
MainCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000225c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  0000225c  000022f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080008e  0080008e  0000231e  2**0
                  ALLOC
  3 .stab         00001d28  00000000  00000000  00002320  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012fe  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005346  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000054a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005635  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000767a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000877b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009700  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009880  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00009b42  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a3d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__vector_1>
       8:	0c 94 47 08 	jmp	0x108e	; 0x108e <__vector_2>
       c:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 65 06 	jmp	0xcca	; 0xcca <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3a       	cpi	r26, 0xAA	; 170
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <main>
      8a:	0c 94 2c 11 	jmp	0x2258	; 0x2258 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e7       	ldi	r26, 0x70	; 112
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 01 11 	jmp	0x2202	; 0x2202 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 01 11 	jmp	0x2202	; 0x2202 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e7       	ldi	r22, 0x70	; 112
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 01 11 	jmp	0x2202	; 0x2202 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 01 11 	jmp	0x2202	; 0x2202 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 01 11 	jmp	0x2202	; 0x2202 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 05 11 	jmp	0x220a	; 0x220a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 21 11 	jmp	0x2242	; 0x2242 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <TIMER_voidSetCallBack>:
//global pointer to fun
static void (*TIMER0_callBack)(void);

//call back fun
void TIMER_voidSetCallBack(  void (*ptr_timer)(void) )
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <TIMER_voidSetCallBack+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	9a 83       	std	Y+2, r25	; 0x02
     caa:	89 83       	std	Y+1, r24	; 0x01

	if(ptr_timer!=NULL)
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	31 f0       	breq	.+12     	; 0xcc0 <TIMER_voidSetCallBack+0x22>
	{
		TIMER0_callBack=ptr_timer ;
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	9a 81       	ldd	r25, Y+2	; 0x02
     cb8:	90 93 8f 00 	sts	0x008F, r25
     cbc:	80 93 8e 00 	sts	0x008E, r24
	}
}
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <__vector_11>:


#if MOOD== NORMAL_MOOD
void __vector_11 () __attribute__  ((signal));
void __vector_11 ()
{
     cca:	1f 92       	push	r1
     ccc:	0f 92       	push	r0
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	0f 92       	push	r0
     cd2:	11 24       	eor	r1, r1
     cd4:	2f 93       	push	r18
     cd6:	3f 93       	push	r19
     cd8:	4f 93       	push	r20
     cda:	5f 93       	push	r21
     cdc:	6f 93       	push	r22
     cde:	7f 93       	push	r23
     ce0:	8f 93       	push	r24
     ce2:	9f 93       	push	r25
     ce4:	af 93       	push	r26
     ce6:	bf 93       	push	r27
     ce8:	ef 93       	push	r30
     cea:	ff 93       	push	r31
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62

	TIMER0_callBack();
     cf4:	e0 91 8e 00 	lds	r30, 0x008E
     cf8:	f0 91 8f 00 	lds	r31, 0x008F
     cfc:	09 95       	icall

}
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	ff 91       	pop	r31
     d04:	ef 91       	pop	r30
     d06:	bf 91       	pop	r27
     d08:	af 91       	pop	r26
     d0a:	9f 91       	pop	r25
     d0c:	8f 91       	pop	r24
     d0e:	7f 91       	pop	r23
     d10:	6f 91       	pop	r22
     d12:	5f 91       	pop	r21
     d14:	4f 91       	pop	r20
     d16:	3f 91       	pop	r19
     d18:	2f 91       	pop	r18
     d1a:	0f 90       	pop	r0
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	0f 90       	pop	r0
     d20:	1f 90       	pop	r1
     d22:	18 95       	reti

00000d24 <TIMER0_VoidInit>:


/**********************************************************************************
 *********************************************************************************/
void TIMER0_VoidInit(void)
{
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62

/**************************************/
#if MOOD==NORMAL_MOOD
/**************************************/
	TCCR0_REG->TCCR0_WGM00 = ZERO;
     d2c:	e3 e5       	ldi	r30, 0x53	; 83
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	8f 7b       	andi	r24, 0xBF	; 191
     d34:	80 83       	st	Z, r24
	TCCR0_REG->TCCR0_WGM01 = ZERO;
     d36:	e3 e5       	ldi	r30, 0x53	; 83
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	87 7f       	andi	r24, 0xF7	; 247
     d3e:	80 83       	st	Z, r24
	TCNT0_REG=PRELOAD;
     d40:	e2 e5       	ldi	r30, 0x52	; 82
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	10 82       	st	Z, r1
	/*------------------------------------*/
#if ISR == ISR_EN
	/*enabel  NORMAL_MOOD interrupt*/
	TIMSK_REG->TIMSK_TOIE0 = ONE ;
     d46:	e9 e5       	ldi	r30, 0x59	; 89
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	81 60       	ori	r24, 0x01	; 1
     d4e:	80 83       	st	Z, r24
#endif /*Related to (#if MOOD==NORMAL_MOOD) and (#elif MOOD==CTC_MOOD) and (#elif MOOD==PWM_MOOD) */
	/**************************************/



}
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <TIMER0_VoidStop>:

/*****************************************************************************/
void TIMER0_VoidStop(void)
{
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG->TCCR0_CS0=No_FREQ;
     d5e:	e3 e5       	ldi	r30, 0x53	; 83
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	88 7f       	andi	r24, 0xF8	; 248
     d66:	80 83       	st	Z, r24

}
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <TIMER0_VoidStart>:


/*****************************************************************************/
void TIMER0_VoidStart(void)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62

	TCCR0_REG->TCCR0_CS0=PRESCALER;
     d76:	e3 e5       	ldi	r30, 0x53	; 83
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	88 7f       	andi	r24, 0xF8	; 248
     d7e:	83 60       	ori	r24, 0x03	; 3
     d80:	80 83       	st	Z, r24

}
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <TIMER0_VoidSetPreload>:

/*****************************************************************************/
void TIMER0_VoidSetPreload(u8 copy_u8PRELOAD )
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	0f 92       	push	r0
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	89 83       	std	Y+1, r24	; 0x01

	TCNT0_REG=copy_u8PRELOAD;
     d94:	e2 e5       	ldi	r30, 0x52	; 82
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	80 83       	st	Z, r24
}
     d9c:	0f 90       	pop	r0
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <TIMER0_VoidVal>:

/*****************************************************************************/

u8 TIMER0_VoidVal(void )
{
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62

	return  TCNT0_REG ;
     dac:	e2 e5       	ldi	r30, 0x52	; 82
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
}
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <TIMER0_VoidSetPWMCompareMatch>:

/*****************************************************************************/
void TIMER0_VoidSetPWMCompareMatch(u8 copy_u8Val )
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	0f 92       	push	r0
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	89 83       	std	Y+1, r24	; 0x01

#elif PWM_COMPARE_MATCH == SET_ON_COMPARE_MATCH_CLR_ON_TOP
	//OCR0_REG = (255) - ( ( (f32)copy_u8Val / 100 ) * (255) ) ;
	  OCR0_REG = (255) - ( ( (u32)copy_u8Val * 255 ) / (100) ) ;
#endif
}
     dc4:	0f 90       	pop	r0
     dc6:	cf 91       	pop	r28
     dc8:	df 91       	pop	r29
     dca:	08 95       	ret

00000dcc <WDT_VoidEnabel>:

/*
 * watch dog timer IN TIMER_1
 */
void WDT_VoidEnabel(void )
{
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62

	//SET_BIT(WDTCR_,3);
	WDTCR_REG->WDTCR_WDE=1;
     dd4:	e1 e4       	ldi	r30, 0x41	; 65
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	88 60       	ori	r24, 0x08	; 8
     ddc:	80 83       	st	Z, r24
}
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <WDT_VoidDisEnabel>:

void WDT_VoidDisEnabel(void )
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
//	WDTCR_==(1<<4)|(1<<3);
//	WDTCR_=0 ;

WDTCR_REG->WDTCR_Data=(1<<4)|(1<<3);
     dec:	e1 e4       	ldi	r30, 0x41	; 65
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	88 e1       	ldi	r24, 0x18	; 24
     df2:	80 83       	st	Z, r24
WDTCR_REG->WDTCR_WDE=0;
     df4:	e1 e4       	ldi	r30, 0x41	; 65
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	87 7f       	andi	r24, 0xF7	; 247
     dfc:	80 83       	st	Z, r24
}
     dfe:	cf 91       	pop	r28
     e00:	df 91       	pop	r29
     e02:	08 95       	ret

00000e04 <WDT_VoidSleep>:
void WDT_VoidSleep(u8 sleep_time )
{
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	0f 92       	push	r0
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	89 83       	std	Y+1, r24	; 0x01

	//WDTCR_=(WDTCR_&0xF8) |sleep_time ;

	WDTCR_REG->WDTCR_WDP=sleep_time;
     e10:	e1 e4       	ldi	r30, 0x41	; 65
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	87 70       	andi	r24, 0x07	; 7
     e18:	98 2f       	mov	r25, r24
     e1a:	97 70       	andi	r25, 0x07	; 7
     e1c:	80 81       	ld	r24, Z
     e1e:	88 7f       	andi	r24, 0xF8	; 248
     e20:	89 2b       	or	r24, r25
     e22:	80 83       	st	Z, r24

}
     e24:	0f 90       	pop	r0
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <GIE_Enable>:
#include "GIE_Interface.h"
#include "GIE_private.h"


void GIE_Enable(void)
{
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     SET_BIT(GIE_SREG,I_bit);
     e34:	af e5       	ldi	r26, 0x5F	; 95
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	ef e5       	ldi	r30, 0x5F	; 95
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	80 68       	ori	r24, 0x80	; 128
     e40:	8c 93       	st	X, r24

}
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <GIE_Disable>:

void GIE_Disable(void)
{
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
 CLR_BIT(GIE_SREG,I_bit);
     e50:	af e5       	ldi	r26, 0x5F	; 95
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	ef e5       	ldi	r30, 0x5F	; 95
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	8f 77       	andi	r24, 0x7F	; 127
     e5c:	8c 93       	st	X, r24

}
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <EXTINT_voidInit>:



#ifdef EXT_Init_NORMAL
void EXTINT_voidInit(u8 copy_u8ExtNum,u8 copy_u8ControlSens)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <EXTINT_voidInit+0x6>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <EXTINT_voidInit+0x8>
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	89 83       	std	Y+1, r24	; 0x01
     e72:	6a 83       	std	Y+2, r22	; 0x02

	switch(copy_u8ExtNum)
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	3c 83       	std	Y+4, r19	; 0x04
     e7c:	2b 83       	std	Y+3, r18	; 0x03
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	9c 81       	ldd	r25, Y+4	; 0x04
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	91 05       	cpc	r25, r1
     e86:	d9 f1       	breq	.+118    	; 0xefe <EXTINT_voidInit+0x9a>
     e88:	2b 81       	ldd	r18, Y+3	; 0x03
     e8a:	3c 81       	ldd	r19, Y+4	; 0x04
     e8c:	22 30       	cpi	r18, 0x02	; 2
     e8e:	31 05       	cpc	r19, r1
     e90:	09 f4       	brne	.+2      	; 0xe94 <EXTINT_voidInit+0x30>
     e92:	65 c0       	rjmp	.+202    	; 0xf5e <EXTINT_voidInit+0xfa>
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	9c 81       	ldd	r25, Y+4	; 0x04
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	09 f0       	breq	.+2      	; 0xe9e <EXTINT_voidInit+0x3a>
     e9c:	81 c0       	rjmp	.+258    	; 0xfa0 <EXTINT_voidInit+0x13c>
	{
	case EXT0_ID :

		DIO_voidSetPinDirection(PORTD_ID,PIN2,PIN_INPUT);
     e9e:	83 e0       	ldi	r24, 0x03	; 3
     ea0:	62 e0       	ldi	r22, 0x02	; 2
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	0e 94 2f 09 	call	0x125e	; 0x125e <DIO_voidSetPinDirection>

		if(copy_u8ControlSens==FALLING_EDGE)
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	88 23       	and	r24, r24
     eac:	79 f4       	brne	.+30     	; 0xecc <EXTINT_voidInit+0x68>
		{

			CLR_BIT(MCUCR_REG,MCUCR_ISC00);
     eae:	a5 e5       	ldi	r26, 0x55	; 85
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e5 e5       	ldi	r30, 0x55	; 85
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	8e 7f       	andi	r24, 0xFE	; 254
     eba:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC01);
     ebc:	a5 e5       	ldi	r26, 0x55	; 85
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e5 e5       	ldi	r30, 0x55	; 85
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	82 60       	ori	r24, 0x02	; 2
     ec8:	8c 93       	st	X, r24
     eca:	11 c0       	rjmp	.+34     	; 0xeee <EXTINT_voidInit+0x8a>

		}


		else if(copy_u8ControlSens==RISING_EDGE)
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	81 30       	cpi	r24, 0x01	; 1
     ed0:	71 f4       	brne	.+28     	; 0xeee <EXTINT_voidInit+0x8a>
		{
			SET_BIT(MCUCR_REG,MCUCR_ISC00);
     ed2:	a5 e5       	ldi	r26, 0x55	; 85
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e5 e5       	ldi	r30, 0x55	; 85
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	81 60       	ori	r24, 0x01	; 1
     ede:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC01);
     ee0:	a5 e5       	ldi	r26, 0x55	; 85
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e5 e5       	ldi	r30, 0x55	; 85
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	82 60       	ori	r24, 0x02	; 2
     eec:	8c 93       	st	X, r24
		}

		SET_BIT(GICR_REG,GICR_INT0);
     eee:	ab e5       	ldi	r26, 0x5B	; 91
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	eb e5       	ldi	r30, 0x5B	; 91
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	80 64       	ori	r24, 0x40	; 64
     efa:	8c 93       	st	X, r24
     efc:	51 c0       	rjmp	.+162    	; 0xfa0 <EXTINT_voidInit+0x13c>
		break ;


	case EXT1_ID :

		DIO_voidSetPinDirection(PORTD_ID,PIN3,PIN_INPUT);
     efe:	83 e0       	ldi	r24, 0x03	; 3
     f00:	63 e0       	ldi	r22, 0x03	; 3
     f02:	40 e0       	ldi	r20, 0x00	; 0
     f04:	0e 94 2f 09 	call	0x125e	; 0x125e <DIO_voidSetPinDirection>

		if(copy_u8ControlSens==FALLING_EDGE)
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	88 23       	and	r24, r24
     f0c:	79 f4       	brne	.+30     	; 0xf2c <EXTINT_voidInit+0xc8>
		{

			CLR_BIT(MCUCR_REG,MCUCR_ISC10);
     f0e:	a5 e5       	ldi	r26, 0x55	; 85
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e5 e5       	ldi	r30, 0x55	; 85
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8b 7f       	andi	r24, 0xFB	; 251
     f1a:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC11);
     f1c:	a5 e5       	ldi	r26, 0x55	; 85
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e5 e5       	ldi	r30, 0x55	; 85
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	88 60       	ori	r24, 0x08	; 8
     f28:	8c 93       	st	X, r24
     f2a:	11 c0       	rjmp	.+34     	; 0xf4e <EXTINT_voidInit+0xea>

		}

		else if(copy_u8ControlSens==RISING_EDGE)
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	81 30       	cpi	r24, 0x01	; 1
     f30:	71 f4       	brne	.+28     	; 0xf4e <EXTINT_voidInit+0xea>
		{
			SET_BIT(MCUCR_REG,MCUCR_ISC10);
     f32:	a5 e5       	ldi	r26, 0x55	; 85
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e5 e5       	ldi	r30, 0x55	; 85
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	84 60       	ori	r24, 0x04	; 4
     f3e:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC11);
     f40:	a5 e5       	ldi	r26, 0x55	; 85
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e5 e5       	ldi	r30, 0x55	; 85
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	88 60       	ori	r24, 0x08	; 8
     f4c:	8c 93       	st	X, r24
		}
		SET_BIT(GICR_REG,GICR_INT1);
     f4e:	ab e5       	ldi	r26, 0x5B	; 91
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	eb e5       	ldi	r30, 0x5B	; 91
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	80 68       	ori	r24, 0x80	; 128
     f5a:	8c 93       	st	X, r24
     f5c:	21 c0       	rjmp	.+66     	; 0xfa0 <EXTINT_voidInit+0x13c>

		break ;

	case EXT2_ID :

		DIO_voidSetPinDirection(PORTB_ID,PIN2,PIN_INPUT);
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	62 e0       	ldi	r22, 0x02	; 2
     f62:	40 e0       	ldi	r20, 0x00	; 0
     f64:	0e 94 2f 09 	call	0x125e	; 0x125e <DIO_voidSetPinDirection>

		if(copy_u8ControlSens==FALLING_EDGE)
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	88 23       	and	r24, r24
     f6c:	41 f4       	brne	.+16     	; 0xf7e <EXTINT_voidInit+0x11a>
		{
			CLR_BIT(MCUCSR_REG,MCUCSR_ISC2);
     f6e:	a4 e5       	ldi	r26, 0x54	; 84
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e4 e5       	ldi	r30, 0x54	; 84
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	8f 7b       	andi	r24, 0xBF	; 191
     f7a:	8c 93       	st	X, r24
     f7c:	0a c0       	rjmp	.+20     	; 0xf92 <EXTINT_voidInit+0x12e>
		}

		else if(copy_u8ControlSens==RISING_EDGE)
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	81 30       	cpi	r24, 0x01	; 1
     f82:	39 f4       	brne	.+14     	; 0xf92 <EXTINT_voidInit+0x12e>
		{
			SET_BIT(MCUCSR_REG,MCUCSR_ISC2);
     f84:	a4 e5       	ldi	r26, 0x54	; 84
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e4 e5       	ldi	r30, 0x54	; 84
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	80 64       	ori	r24, 0x40	; 64
     f90:	8c 93       	st	X, r24
		}
		SET_BIT(GICR_REG,GICR_INT2);
     f92:	ab e5       	ldi	r26, 0x5B	; 91
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	eb e5       	ldi	r30, 0x5B	; 91
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	80 62       	ori	r24, 0x20	; 32
     f9e:	8c 93       	st	X, r24

		break ;

	}
}
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	0f 90       	pop	r0
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <EXTINT_voidSetCallBack>:




void EXTINT_voidSetCallBack (  void (*ptr_ext)(void) ,u8 copy_u8ExtNum )
{
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	00 d0       	rcall	.+0      	; 0xfb4 <EXTINT_voidSetCallBack+0x6>
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <EXTINT_voidSetCallBack+0x8>
     fb6:	0f 92       	push	r0
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	9a 83       	std	Y+2, r25	; 0x02
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	6b 83       	std	Y+3, r22	; 0x03

	if(ptr_ext!=NULL)
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	9a 81       	ldd	r25, Y+2	; 0x02
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	39 f1       	breq	.+78     	; 0x1018 <EXTINT_voidSetCallBack+0x6a>
	{
		switch(copy_u8ExtNum)
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	3d 83       	std	Y+5, r19	; 0x05
     fd2:	2c 83       	std	Y+4, r18	; 0x04
     fd4:	8c 81       	ldd	r24, Y+4	; 0x04
     fd6:	9d 81       	ldd	r25, Y+5	; 0x05
     fd8:	81 30       	cpi	r24, 0x01	; 1
     fda:	91 05       	cpc	r25, r1
     fdc:	81 f0       	breq	.+32     	; 0xffe <EXTINT_voidSetCallBack+0x50>
     fde:	2c 81       	ldd	r18, Y+4	; 0x04
     fe0:	3d 81       	ldd	r19, Y+5	; 0x05
     fe2:	22 30       	cpi	r18, 0x02	; 2
     fe4:	31 05       	cpc	r19, r1
     fe6:	91 f0       	breq	.+36     	; 0x100c <EXTINT_voidSetCallBack+0x5e>
     fe8:	8c 81       	ldd	r24, Y+4	; 0x04
     fea:	9d 81       	ldd	r25, Y+5	; 0x05
     fec:	00 97       	sbiw	r24, 0x00	; 0
     fee:	a1 f4       	brne	.+40     	; 0x1018 <EXTINT_voidSetCallBack+0x6a>
		{
		case EXT0_ID:
			ptr_ArrCallBack[ 0 ]= ptr_ext;
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	9a 81       	ldd	r25, Y+2	; 0x02
     ff4:	90 93 91 00 	sts	0x0091, r25
     ff8:	80 93 90 00 	sts	0x0090, r24
     ffc:	0d c0       	rjmp	.+26     	; 0x1018 <EXTINT_voidSetCallBack+0x6a>
			break;
		case EXT1_ID:
			ptr_ArrCallBack[ 1 ]= ptr_ext;
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	90 93 93 00 	sts	0x0093, r25
    1006:	80 93 92 00 	sts	0x0092, r24
    100a:	06 c0       	rjmp	.+12     	; 0x1018 <EXTINT_voidSetCallBack+0x6a>
			break;
		case EXT2_ID:
			ptr_ArrCallBack[ 2 ]= ptr_ext;
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	9a 81       	ldd	r25, Y+2	; 0x02
    1010:	90 93 95 00 	sts	0x0095, r25
    1014:	80 93 94 00 	sts	0x0094, r24
		}



	}
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <__vector_1>:



void __vector_1 () __attribute__ ((signal));
void __vector_1 ()
{
    1028:	1f 92       	push	r1
    102a:	0f 92       	push	r0
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	0f 92       	push	r0
    1030:	11 24       	eor	r1, r1
    1032:	2f 93       	push	r18
    1034:	3f 93       	push	r19
    1036:	4f 93       	push	r20
    1038:	5f 93       	push	r21
    103a:	6f 93       	push	r22
    103c:	7f 93       	push	r23
    103e:	8f 93       	push	r24
    1040:	9f 93       	push	r25
    1042:	af 93       	push	r26
    1044:	bf 93       	push	r27
    1046:	ef 93       	push	r30
    1048:	ff 93       	push	r31
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62

	if(ptr_ArrCallBack[0] !=NULL)
    1052:	80 91 90 00 	lds	r24, 0x0090
    1056:	90 91 91 00 	lds	r25, 0x0091
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	29 f0       	breq	.+10     	; 0x1068 <__vector_1+0x40>
	{
		ptr_ArrCallBack[0]();
    105e:	e0 91 90 00 	lds	r30, 0x0090
    1062:	f0 91 91 00 	lds	r31, 0x0091
    1066:	09 95       	icall
	}



}
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	ff 91       	pop	r31
    106e:	ef 91       	pop	r30
    1070:	bf 91       	pop	r27
    1072:	af 91       	pop	r26
    1074:	9f 91       	pop	r25
    1076:	8f 91       	pop	r24
    1078:	7f 91       	pop	r23
    107a:	6f 91       	pop	r22
    107c:	5f 91       	pop	r21
    107e:	4f 91       	pop	r20
    1080:	3f 91       	pop	r19
    1082:	2f 91       	pop	r18
    1084:	0f 90       	pop	r0
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	0f 90       	pop	r0
    108a:	1f 90       	pop	r1
    108c:	18 95       	reti

0000108e <__vector_2>:

void __vector_2 () __attribute__ ((signal));
void __vector_2 ()
{
    108e:	1f 92       	push	r1
    1090:	0f 92       	push	r0
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	0f 92       	push	r0
    1096:	11 24       	eor	r1, r1
    1098:	2f 93       	push	r18
    109a:	3f 93       	push	r19
    109c:	4f 93       	push	r20
    109e:	5f 93       	push	r21
    10a0:	6f 93       	push	r22
    10a2:	7f 93       	push	r23
    10a4:	8f 93       	push	r24
    10a6:	9f 93       	push	r25
    10a8:	af 93       	push	r26
    10aa:	bf 93       	push	r27
    10ac:	ef 93       	push	r30
    10ae:	ff 93       	push	r31
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
	if(ptr_ArrCallBack[1] !=NULL)
    10b8:	80 91 92 00 	lds	r24, 0x0092
    10bc:	90 91 93 00 	lds	r25, 0x0093
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	29 f0       	breq	.+10     	; 0x10ce <__vector_2+0x40>
		{
		ptr_ArrCallBack[1]();
    10c4:	e0 91 92 00 	lds	r30, 0x0092
    10c8:	f0 91 93 00 	lds	r31, 0x0093
    10cc:	09 95       	icall
		}


}
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	ff 91       	pop	r31
    10d4:	ef 91       	pop	r30
    10d6:	bf 91       	pop	r27
    10d8:	af 91       	pop	r26
    10da:	9f 91       	pop	r25
    10dc:	8f 91       	pop	r24
    10de:	7f 91       	pop	r23
    10e0:	6f 91       	pop	r22
    10e2:	5f 91       	pop	r21
    10e4:	4f 91       	pop	r20
    10e6:	3f 91       	pop	r19
    10e8:	2f 91       	pop	r18
    10ea:	0f 90       	pop	r0
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	0f 90       	pop	r0
    10f0:	1f 90       	pop	r1
    10f2:	18 95       	reti

000010f4 <__vector_3>:

void __vector_3 () __attribute__ ((signal));
void __vector_3 ()
{
    10f4:	1f 92       	push	r1
    10f6:	0f 92       	push	r0
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	0f 92       	push	r0
    10fc:	11 24       	eor	r1, r1
    10fe:	2f 93       	push	r18
    1100:	3f 93       	push	r19
    1102:	4f 93       	push	r20
    1104:	5f 93       	push	r21
    1106:	6f 93       	push	r22
    1108:	7f 93       	push	r23
    110a:	8f 93       	push	r24
    110c:	9f 93       	push	r25
    110e:	af 93       	push	r26
    1110:	bf 93       	push	r27
    1112:	ef 93       	push	r30
    1114:	ff 93       	push	r31
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
	if(ptr_ArrCallBack[2] !=NULL)
    111e:	80 91 94 00 	lds	r24, 0x0094
    1122:	90 91 95 00 	lds	r25, 0x0095
    1126:	00 97       	sbiw	r24, 0x00	; 0
    1128:	29 f0       	breq	.+10     	; 0x1134 <__vector_3+0x40>
		{
		ptr_ArrCallBack[2]();
    112a:	e0 91 94 00 	lds	r30, 0x0094
    112e:	f0 91 95 00 	lds	r31, 0x0095
    1132:	09 95       	icall
		}


}
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	ff 91       	pop	r31
    113a:	ef 91       	pop	r30
    113c:	bf 91       	pop	r27
    113e:	af 91       	pop	r26
    1140:	9f 91       	pop	r25
    1142:	8f 91       	pop	r24
    1144:	7f 91       	pop	r23
    1146:	6f 91       	pop	r22
    1148:	5f 91       	pop	r21
    114a:	4f 91       	pop	r20
    114c:	3f 91       	pop	r19
    114e:	2f 91       	pop	r18
    1150:	0f 90       	pop	r0
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	0f 90       	pop	r0
    1156:	1f 90       	pop	r1
    1158:	18 95       	reti

0000115a <DIO_voidSetPortDirection>:
#include"DIO_Interface.h"

/*****************************************************************************/

void DIO_voidSetPortDirection(u8 Copy_u8portID,u8 Copy_u8PortDir )
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	00 d0       	rcall	.+0      	; 0x1160 <DIO_voidSetPortDirection+0x6>
    1160:	00 d0       	rcall	.+0      	; 0x1162 <DIO_voidSetPortDirection+0x8>
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8portID)
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	3c 83       	std	Y+4, r19	; 0x04
    1172:	2b 83       	std	Y+3, r18	; 0x03
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	9c 81       	ldd	r25, Y+4	; 0x04
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	91 05       	cpc	r25, r1
    117c:	d1 f0       	breq	.+52     	; 0x11b2 <DIO_voidSetPortDirection+0x58>
    117e:	2b 81       	ldd	r18, Y+3	; 0x03
    1180:	3c 81       	ldd	r19, Y+4	; 0x04
    1182:	22 30       	cpi	r18, 0x02	; 2
    1184:	31 05       	cpc	r19, r1
    1186:	2c f4       	brge	.+10     	; 0x1192 <DIO_voidSetPortDirection+0x38>
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	61 f0       	breq	.+24     	; 0x11a8 <DIO_voidSetPortDirection+0x4e>
    1190:	1e c0       	rjmp	.+60     	; 0x11ce <DIO_voidSetPortDirection+0x74>
    1192:	2b 81       	ldd	r18, Y+3	; 0x03
    1194:	3c 81       	ldd	r19, Y+4	; 0x04
    1196:	22 30       	cpi	r18, 0x02	; 2
    1198:	31 05       	cpc	r19, r1
    119a:	81 f0       	breq	.+32     	; 0x11bc <DIO_voidSetPortDirection+0x62>
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	83 30       	cpi	r24, 0x03	; 3
    11a2:	91 05       	cpc	r25, r1
    11a4:	81 f0       	breq	.+32     	; 0x11c6 <DIO_voidSetPortDirection+0x6c>
    11a6:	13 c0       	rjmp	.+38     	; 0x11ce <DIO_voidSetPortDirection+0x74>
	{
	case PORTA_ID :   DDRA_REG= Copy_u8PortDir ; break ;
    11a8:	ea e3       	ldi	r30, 0x3A	; 58
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	80 83       	st	Z, r24
    11b0:	0e c0       	rjmp	.+28     	; 0x11ce <DIO_voidSetPortDirection+0x74>
	case PORTB_ID :   DDRB_REG= Copy_u8PortDir ; break ;
    11b2:	e7 e3       	ldi	r30, 0x37	; 55
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	80 83       	st	Z, r24
    11ba:	09 c0       	rjmp	.+18     	; 0x11ce <DIO_voidSetPortDirection+0x74>
	case PORTC_ID :   DDRC_REG= Copy_u8PortDir ; break ;
    11bc:	e4 e3       	ldi	r30, 0x34	; 52
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	80 83       	st	Z, r24
    11c4:	04 c0       	rjmp	.+8      	; 0x11ce <DIO_voidSetPortDirection+0x74>
	case PORTD_ID :   DDRD_REG= Copy_u8PortDir ; break ;
    11c6:	e1 e3       	ldi	r30, 0x31	; 49
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	80 83       	st	Z, r24

	}
}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <DIO_voidSetPortValue>:
/*****************************************************************************/

void DIO_voidSetPortValue(u8 Copy_u8PortID,u8 Copy_u8PortVal )

{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <DIO_voidSetPortValue+0x6>
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <DIO_voidSetPortValue+0x8>
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8PortID)
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	3c 83       	std	Y+4, r19	; 0x04
    11f4:	2b 83       	std	Y+3, r18	; 0x03
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	9c 81       	ldd	r25, Y+4	; 0x04
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	91 05       	cpc	r25, r1
    11fe:	d1 f0       	breq	.+52     	; 0x1234 <DIO_voidSetPortValue+0x58>
    1200:	2b 81       	ldd	r18, Y+3	; 0x03
    1202:	3c 81       	ldd	r19, Y+4	; 0x04
    1204:	22 30       	cpi	r18, 0x02	; 2
    1206:	31 05       	cpc	r19, r1
    1208:	2c f4       	brge	.+10     	; 0x1214 <DIO_voidSetPortValue+0x38>
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	9c 81       	ldd	r25, Y+4	; 0x04
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	61 f0       	breq	.+24     	; 0x122a <DIO_voidSetPortValue+0x4e>
    1212:	1e c0       	rjmp	.+60     	; 0x1250 <DIO_voidSetPortValue+0x74>
    1214:	2b 81       	ldd	r18, Y+3	; 0x03
    1216:	3c 81       	ldd	r19, Y+4	; 0x04
    1218:	22 30       	cpi	r18, 0x02	; 2
    121a:	31 05       	cpc	r19, r1
    121c:	81 f0       	breq	.+32     	; 0x123e <DIO_voidSetPortValue+0x62>
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	9c 81       	ldd	r25, Y+4	; 0x04
    1222:	83 30       	cpi	r24, 0x03	; 3
    1224:	91 05       	cpc	r25, r1
    1226:	81 f0       	breq	.+32     	; 0x1248 <DIO_voidSetPortValue+0x6c>
    1228:	13 c0       	rjmp	.+38     	; 0x1250 <DIO_voidSetPortValue+0x74>
	{

	case PORTA_ID :   PORTA_REG= Copy_u8PortVal ; break ;
    122a:	eb e3       	ldi	r30, 0x3B	; 59
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	80 83       	st	Z, r24
    1232:	0e c0       	rjmp	.+28     	; 0x1250 <DIO_voidSetPortValue+0x74>
	case PORTB_ID :   PORTB_REG= Copy_u8PortVal ; break ;
    1234:	e8 e3       	ldi	r30, 0x38	; 56
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	80 83       	st	Z, r24
    123c:	09 c0       	rjmp	.+18     	; 0x1250 <DIO_voidSetPortValue+0x74>
	case PORTC_ID :   PORTC_REG= Copy_u8PortVal ; break ;
    123e:	e5 e3       	ldi	r30, 0x35	; 53
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	80 83       	st	Z, r24
    1246:	04 c0       	rjmp	.+8      	; 0x1250 <DIO_voidSetPortValue+0x74>
	case PORTD_ID :   PORTD_REG= Copy_u8PortVal ; break ;
    1248:	e2 e3       	ldi	r30, 0x32	; 50
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	80 83       	st	Z, r24

	}
}
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <DIO_voidSetPinDirection>:

/*****************************************************************************/


void	DIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinDir)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	27 97       	sbiw	r28, 0x07	; 7
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61
    1272:	89 83       	std	Y+1, r24	; 0x01
    1274:	6a 83       	std	Y+2, r22	; 0x02
    1276:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinID>=PIN0 &&Copy_u8PinID<=PIN7)
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	88 30       	cpi	r24, 0x08	; 8
    127c:	08 f0       	brcs	.+2      	; 0x1280 <DIO_voidSetPinDirection+0x22>
    127e:	ea c0       	rjmp	.+468    	; 0x1454 <DIO_voidSetPinDirection+0x1f6>
	{
		if(Copy_u8PinDir==PIN_OUTPUT)//Output
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	09 f0       	breq	.+2      	; 0x1288 <DIO_voidSetPinDirection+0x2a>
    1286:	6f c0       	rjmp	.+222    	; 0x1366 <DIO_voidSetPinDirection+0x108>
		{
			switch(Copy_u8PortID)
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	3f 83       	std	Y+7, r19	; 0x07
    1290:	2e 83       	std	Y+6, r18	; 0x06
    1292:	8e 81       	ldd	r24, Y+6	; 0x06
    1294:	9f 81       	ldd	r25, Y+7	; 0x07
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	91 05       	cpc	r25, r1
    129a:	49 f1       	breq	.+82     	; 0x12ee <DIO_voidSetPinDirection+0x90>
    129c:	2e 81       	ldd	r18, Y+6	; 0x06
    129e:	3f 81       	ldd	r19, Y+7	; 0x07
    12a0:	22 30       	cpi	r18, 0x02	; 2
    12a2:	31 05       	cpc	r19, r1
    12a4:	2c f4       	brge	.+10     	; 0x12b0 <DIO_voidSetPinDirection+0x52>
    12a6:	8e 81       	ldd	r24, Y+6	; 0x06
    12a8:	9f 81       	ldd	r25, Y+7	; 0x07
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	61 f0       	breq	.+24     	; 0x12c6 <DIO_voidSetPinDirection+0x68>
    12ae:	d2 c0       	rjmp	.+420    	; 0x1454 <DIO_voidSetPinDirection+0x1f6>
    12b0:	2e 81       	ldd	r18, Y+6	; 0x06
    12b2:	3f 81       	ldd	r19, Y+7	; 0x07
    12b4:	22 30       	cpi	r18, 0x02	; 2
    12b6:	31 05       	cpc	r19, r1
    12b8:	71 f1       	breq	.+92     	; 0x1316 <DIO_voidSetPinDirection+0xb8>
    12ba:	8e 81       	ldd	r24, Y+6	; 0x06
    12bc:	9f 81       	ldd	r25, Y+7	; 0x07
    12be:	83 30       	cpi	r24, 0x03	; 3
    12c0:	91 05       	cpc	r25, r1
    12c2:	e9 f1       	breq	.+122    	; 0x133e <DIO_voidSetPinDirection+0xe0>
    12c4:	c7 c0       	rjmp	.+398    	; 0x1454 <DIO_voidSetPinDirection+0x1f6>
			{
			case PORTA_ID:    SET_BIT(DDRA_REG,Copy_u8PinID); break;
    12c6:	aa e3       	ldi	r26, 0x3A	; 58
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	ea e3       	ldi	r30, 0x3A	; 58
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	02 2e       	mov	r0, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <DIO_voidSetPinDirection+0x86>
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <DIO_voidSetPinDirection+0x82>
    12e8:	84 2b       	or	r24, r20
    12ea:	8c 93       	st	X, r24
    12ec:	b3 c0       	rjmp	.+358    	; 0x1454 <DIO_voidSetPinDirection+0x1f6>
			case PORTB_ID:    SET_BIT(DDRB_REG,Copy_u8PinID); break;
    12ee:	a7 e3       	ldi	r26, 0x37	; 55
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e7 e3       	ldi	r30, 0x37	; 55
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	48 2f       	mov	r20, r24
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	02 2e       	mov	r0, r18
    1306:	02 c0       	rjmp	.+4      	; 0x130c <DIO_voidSetPinDirection+0xae>
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	0a 94       	dec	r0
    130e:	e2 f7       	brpl	.-8      	; 0x1308 <DIO_voidSetPinDirection+0xaa>
    1310:	84 2b       	or	r24, r20
    1312:	8c 93       	st	X, r24
    1314:	9f c0       	rjmp	.+318    	; 0x1454 <DIO_voidSetPinDirection+0x1f6>
			case PORTC_ID:    SET_BIT(DDRC_REG,Copy_u8PinID); break;
    1316:	a4 e3       	ldi	r26, 0x34	; 52
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e4 e3       	ldi	r30, 0x34	; 52
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	48 2f       	mov	r20, r24
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	02 2e       	mov	r0, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <DIO_voidSetPinDirection+0xd6>
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	0a 94       	dec	r0
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <DIO_voidSetPinDirection+0xd2>
    1338:	84 2b       	or	r24, r20
    133a:	8c 93       	st	X, r24
    133c:	8b c0       	rjmp	.+278    	; 0x1454 <DIO_voidSetPinDirection+0x1f6>
			case PORTD_ID:    SET_BIT(DDRD_REG,Copy_u8PinID); break;
    133e:	a1 e3       	ldi	r26, 0x31	; 49
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e1 e3       	ldi	r30, 0x31	; 49
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	48 2f       	mov	r20, r24
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	02 2e       	mov	r0, r18
    1356:	02 c0       	rjmp	.+4      	; 0x135c <DIO_voidSetPinDirection+0xfe>
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	0a 94       	dec	r0
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <DIO_voidSetPinDirection+0xfa>
    1360:	84 2b       	or	r24, r20
    1362:	8c 93       	st	X, r24
    1364:	77 c0       	rjmp	.+238    	; 0x1454 <DIO_voidSetPinDirection+0x1f6>

			default:   break;

			}
		}
		else if(Copy_u8PinDir==PIN_INPUT)//Input
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	88 23       	and	r24, r24
    136a:	09 f0       	breq	.+2      	; 0x136e <DIO_voidSetPinDirection+0x110>
    136c:	73 c0       	rjmp	.+230    	; 0x1454 <DIO_voidSetPinDirection+0x1f6>
		{
			switch(Copy_u8PortID)
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	3d 83       	std	Y+5, r19	; 0x05
    1376:	2c 83       	std	Y+4, r18	; 0x04
    1378:	8c 81       	ldd	r24, Y+4	; 0x04
    137a:	9d 81       	ldd	r25, Y+5	; 0x05
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	91 05       	cpc	r25, r1
    1380:	59 f1       	breq	.+86     	; 0x13d8 <DIO_voidSetPinDirection+0x17a>
    1382:	2c 81       	ldd	r18, Y+4	; 0x04
    1384:	3d 81       	ldd	r19, Y+5	; 0x05
    1386:	22 30       	cpi	r18, 0x02	; 2
    1388:	31 05       	cpc	r19, r1
    138a:	2c f4       	brge	.+10     	; 0x1396 <DIO_voidSetPinDirection+0x138>
    138c:	8c 81       	ldd	r24, Y+4	; 0x04
    138e:	9d 81       	ldd	r25, Y+5	; 0x05
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	69 f0       	breq	.+26     	; 0x13ae <DIO_voidSetPinDirection+0x150>
    1394:	5f c0       	rjmp	.+190    	; 0x1454 <DIO_voidSetPinDirection+0x1f6>
    1396:	2c 81       	ldd	r18, Y+4	; 0x04
    1398:	3d 81       	ldd	r19, Y+5	; 0x05
    139a:	22 30       	cpi	r18, 0x02	; 2
    139c:	31 05       	cpc	r19, r1
    139e:	89 f1       	breq	.+98     	; 0x1402 <DIO_voidSetPinDirection+0x1a4>
    13a0:	8c 81       	ldd	r24, Y+4	; 0x04
    13a2:	9d 81       	ldd	r25, Y+5	; 0x05
    13a4:	83 30       	cpi	r24, 0x03	; 3
    13a6:	91 05       	cpc	r25, r1
    13a8:	09 f4       	brne	.+2      	; 0x13ac <DIO_voidSetPinDirection+0x14e>
    13aa:	40 c0       	rjmp	.+128    	; 0x142c <DIO_voidSetPinDirection+0x1ce>
    13ac:	53 c0       	rjmp	.+166    	; 0x1454 <DIO_voidSetPinDirection+0x1f6>
			{
			case PORTA_ID:   CLR_BIT(DDRA_REG,Copy_u8PinID); break;
    13ae:	aa e3       	ldi	r26, 0x3A	; 58
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	ea e3       	ldi	r30, 0x3A	; 58
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	48 2f       	mov	r20, r24
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 2e       	mov	r0, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <DIO_voidSetPinDirection+0x16e>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <DIO_voidSetPinDirection+0x16a>
    13d0:	80 95       	com	r24
    13d2:	84 23       	and	r24, r20
    13d4:	8c 93       	st	X, r24
    13d6:	3e c0       	rjmp	.+124    	; 0x1454 <DIO_voidSetPinDirection+0x1f6>
			case PORTB_ID:   CLR_BIT(DDRB_REG,Copy_u8PinID); break;
    13d8:	a7 e3       	ldi	r26, 0x37	; 55
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e7 e3       	ldi	r30, 0x37	; 55
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	48 2f       	mov	r20, r24
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	02 2e       	mov	r0, r18
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <DIO_voidSetPinDirection+0x198>
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	0a 94       	dec	r0
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <DIO_voidSetPinDirection+0x194>
    13fa:	80 95       	com	r24
    13fc:	84 23       	and	r24, r20
    13fe:	8c 93       	st	X, r24
    1400:	29 c0       	rjmp	.+82     	; 0x1454 <DIO_voidSetPinDirection+0x1f6>
			case PORTC_ID:   CLR_BIT(DDRC_REG,Copy_u8PinID); break;
    1402:	a4 e3       	ldi	r26, 0x34	; 52
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e4 e3       	ldi	r30, 0x34	; 52
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_voidSetPinDirection+0x1c2>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <DIO_voidSetPinDirection+0x1be>
    1424:	80 95       	com	r24
    1426:	84 23       	and	r24, r20
    1428:	8c 93       	st	X, r24
    142a:	14 c0       	rjmp	.+40     	; 0x1454 <DIO_voidSetPinDirection+0x1f6>
			case PORTD_ID:   CLR_BIT(DDRD_REG,Copy_u8PinID); break;
    142c:	a1 e3       	ldi	r26, 0x31	; 49
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e1 e3       	ldi	r30, 0x31	; 49
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	48 2f       	mov	r20, r24
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	02 2e       	mov	r0, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <DIO_voidSetPinDirection+0x1ec>
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	0a 94       	dec	r0
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <DIO_voidSetPinDirection+0x1e8>
    144e:	80 95       	com	r24
    1450:	84 23       	and	r24, r20
    1452:	8c 93       	st	X, r24
			default:   break;
			}
		}
	}

}
    1454:	27 96       	adiw	r28, 0x07	; 7
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <DIO_voidSetPinValue>:
/*****************************************************************************/
void    DIO_voidSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue)
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	27 97       	sbiw	r28, 0x07	; 7
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	de bf       	out	0x3e, r29	; 62
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	cd bf       	out	0x3d, r28	; 61
    147a:	89 83       	std	Y+1, r24	; 0x01
    147c:	6a 83       	std	Y+2, r22	; 0x02
    147e:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinID>=PIN0&&Copy_u8PinID<=PIN7)
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	88 30       	cpi	r24, 0x08	; 8
    1484:	08 f0       	brcs	.+2      	; 0x1488 <DIO_voidSetPinValue+0x22>
    1486:	ea c0       	rjmp	.+468    	; 0x165c <DIO_voidSetPinValue+0x1f6>
	{
		if(Copy_u8PinValue==PIN_HIGH)//High
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	09 f0       	breq	.+2      	; 0x1490 <DIO_voidSetPinValue+0x2a>
    148e:	6f c0       	rjmp	.+222    	; 0x156e <DIO_voidSetPinValue+0x108>
		{

			switch(Copy_u8PortID)
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	3f 83       	std	Y+7, r19	; 0x07
    1498:	2e 83       	std	Y+6, r18	; 0x06
    149a:	8e 81       	ldd	r24, Y+6	; 0x06
    149c:	9f 81       	ldd	r25, Y+7	; 0x07
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	91 05       	cpc	r25, r1
    14a2:	49 f1       	breq	.+82     	; 0x14f6 <DIO_voidSetPinValue+0x90>
    14a4:	2e 81       	ldd	r18, Y+6	; 0x06
    14a6:	3f 81       	ldd	r19, Y+7	; 0x07
    14a8:	22 30       	cpi	r18, 0x02	; 2
    14aa:	31 05       	cpc	r19, r1
    14ac:	2c f4       	brge	.+10     	; 0x14b8 <DIO_voidSetPinValue+0x52>
    14ae:	8e 81       	ldd	r24, Y+6	; 0x06
    14b0:	9f 81       	ldd	r25, Y+7	; 0x07
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	61 f0       	breq	.+24     	; 0x14ce <DIO_voidSetPinValue+0x68>
    14b6:	d2 c0       	rjmp	.+420    	; 0x165c <DIO_voidSetPinValue+0x1f6>
    14b8:	2e 81       	ldd	r18, Y+6	; 0x06
    14ba:	3f 81       	ldd	r19, Y+7	; 0x07
    14bc:	22 30       	cpi	r18, 0x02	; 2
    14be:	31 05       	cpc	r19, r1
    14c0:	71 f1       	breq	.+92     	; 0x151e <DIO_voidSetPinValue+0xb8>
    14c2:	8e 81       	ldd	r24, Y+6	; 0x06
    14c4:	9f 81       	ldd	r25, Y+7	; 0x07
    14c6:	83 30       	cpi	r24, 0x03	; 3
    14c8:	91 05       	cpc	r25, r1
    14ca:	e9 f1       	breq	.+122    	; 0x1546 <DIO_voidSetPinValue+0xe0>
    14cc:	c7 c0       	rjmp	.+398    	; 0x165c <DIO_voidSetPinValue+0x1f6>
			{
			case PORTA_ID :    SET_BIT(PORTA_REG,Copy_u8PinID); break;
    14ce:	ab e3       	ldi	r26, 0x3B	; 59
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	eb e3       	ldi	r30, 0x3B	; 59
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 2e       	mov	r0, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <DIO_voidSetPinValue+0x86>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <DIO_voidSetPinValue+0x82>
    14f0:	84 2b       	or	r24, r20
    14f2:	8c 93       	st	X, r24
    14f4:	b3 c0       	rjmp	.+358    	; 0x165c <DIO_voidSetPinValue+0x1f6>
			case PORTB_ID :    SET_BIT(PORTB_REG,Copy_u8PinID); break;
    14f6:	a8 e3       	ldi	r26, 0x38	; 56
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e8 e3       	ldi	r30, 0x38	; 56
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 2e       	mov	r0, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <DIO_voidSetPinValue+0xae>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <DIO_voidSetPinValue+0xaa>
    1518:	84 2b       	or	r24, r20
    151a:	8c 93       	st	X, r24
    151c:	9f c0       	rjmp	.+318    	; 0x165c <DIO_voidSetPinValue+0x1f6>
			case PORTC_ID :    SET_BIT(PORTC_REG,Copy_u8PinID); break;
    151e:	a5 e3       	ldi	r26, 0x35	; 53
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e5 e3       	ldi	r30, 0x35	; 53
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	48 2f       	mov	r20, r24
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 2e       	mov	r0, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <DIO_voidSetPinValue+0xd6>
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <DIO_voidSetPinValue+0xd2>
    1540:	84 2b       	or	r24, r20
    1542:	8c 93       	st	X, r24
    1544:	8b c0       	rjmp	.+278    	; 0x165c <DIO_voidSetPinValue+0x1f6>
			case PORTD_ID :    SET_BIT(PORTD_REG,Copy_u8PinID); break;
    1546:	a2 e3       	ldi	r26, 0x32	; 50
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e2 e3       	ldi	r30, 0x32	; 50
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	48 2f       	mov	r20, r24
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 2e       	mov	r0, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <DIO_voidSetPinValue+0xfe>
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	0a 94       	dec	r0
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <DIO_voidSetPinValue+0xfa>
    1568:	84 2b       	or	r24, r20
    156a:	8c 93       	st	X, r24
    156c:	77 c0       	rjmp	.+238    	; 0x165c <DIO_voidSetPinValue+0x1f6>

			}
		}
		else if(Copy_u8PinValue==PIN_LOW)//Low
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	88 23       	and	r24, r24
    1572:	09 f0       	breq	.+2      	; 0x1576 <DIO_voidSetPinValue+0x110>
    1574:	73 c0       	rjmp	.+230    	; 0x165c <DIO_voidSetPinValue+0x1f6>
		{
			switch(Copy_u8PortID)
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	3d 83       	std	Y+5, r19	; 0x05
    157e:	2c 83       	std	Y+4, r18	; 0x04
    1580:	8c 81       	ldd	r24, Y+4	; 0x04
    1582:	9d 81       	ldd	r25, Y+5	; 0x05
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	91 05       	cpc	r25, r1
    1588:	59 f1       	breq	.+86     	; 0x15e0 <DIO_voidSetPinValue+0x17a>
    158a:	2c 81       	ldd	r18, Y+4	; 0x04
    158c:	3d 81       	ldd	r19, Y+5	; 0x05
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	2c f4       	brge	.+10     	; 0x159e <DIO_voidSetPinValue+0x138>
    1594:	8c 81       	ldd	r24, Y+4	; 0x04
    1596:	9d 81       	ldd	r25, Y+5	; 0x05
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	69 f0       	breq	.+26     	; 0x15b6 <DIO_voidSetPinValue+0x150>
    159c:	5f c0       	rjmp	.+190    	; 0x165c <DIO_voidSetPinValue+0x1f6>
    159e:	2c 81       	ldd	r18, Y+4	; 0x04
    15a0:	3d 81       	ldd	r19, Y+5	; 0x05
    15a2:	22 30       	cpi	r18, 0x02	; 2
    15a4:	31 05       	cpc	r19, r1
    15a6:	89 f1       	breq	.+98     	; 0x160a <DIO_voidSetPinValue+0x1a4>
    15a8:	8c 81       	ldd	r24, Y+4	; 0x04
    15aa:	9d 81       	ldd	r25, Y+5	; 0x05
    15ac:	83 30       	cpi	r24, 0x03	; 3
    15ae:	91 05       	cpc	r25, r1
    15b0:	09 f4       	brne	.+2      	; 0x15b4 <DIO_voidSetPinValue+0x14e>
    15b2:	40 c0       	rjmp	.+128    	; 0x1634 <DIO_voidSetPinValue+0x1ce>
    15b4:	53 c0       	rjmp	.+166    	; 0x165c <DIO_voidSetPinValue+0x1f6>
			{
			case PORTA_ID : CLR_BIT(PORTA_REG,Copy_u8PinID); break ;
    15b6:	ab e3       	ldi	r26, 0x3B	; 59
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	eb e3       	ldi	r30, 0x3B	; 59
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 2e       	mov	r0, r18
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <DIO_voidSetPinValue+0x16e>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <DIO_voidSetPinValue+0x16a>
    15d8:	80 95       	com	r24
    15da:	84 23       	and	r24, r20
    15dc:	8c 93       	st	X, r24
    15de:	3e c0       	rjmp	.+124    	; 0x165c <DIO_voidSetPinValue+0x1f6>
			case PORTB_ID : CLR_BIT(PORTB_REG,Copy_u8PinID); break ;
    15e0:	a8 e3       	ldi	r26, 0x38	; 56
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e8 e3       	ldi	r30, 0x38	; 56
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	48 2f       	mov	r20, r24
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	02 2e       	mov	r0, r18
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <DIO_voidSetPinValue+0x198>
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	0a 94       	dec	r0
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <DIO_voidSetPinValue+0x194>
    1602:	80 95       	com	r24
    1604:	84 23       	and	r24, r20
    1606:	8c 93       	st	X, r24
    1608:	29 c0       	rjmp	.+82     	; 0x165c <DIO_voidSetPinValue+0x1f6>
			case PORTC_ID : CLR_BIT(PORTC_REG,Copy_u8PinID) ;break ;
    160a:	a5 e3       	ldi	r26, 0x35	; 53
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e5 e3       	ldi	r30, 0x35	; 53
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	48 2f       	mov	r20, r24
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 2e       	mov	r0, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <DIO_voidSetPinValue+0x1c2>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <DIO_voidSetPinValue+0x1be>
    162c:	80 95       	com	r24
    162e:	84 23       	and	r24, r20
    1630:	8c 93       	st	X, r24
    1632:	14 c0       	rjmp	.+40     	; 0x165c <DIO_voidSetPinValue+0x1f6>
			case PORTD_ID : CLR_BIT(PORTD_REG,Copy_u8PinID) ;break ;
    1634:	a2 e3       	ldi	r26, 0x32	; 50
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e2 e3       	ldi	r30, 0x32	; 50
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	48 2f       	mov	r20, r24
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	02 2e       	mov	r0, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <DIO_voidSetPinValue+0x1ec>
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	0a 94       	dec	r0
    1654:	e2 f7       	brpl	.-8      	; 0x164e <DIO_voidSetPinValue+0x1e8>
    1656:	80 95       	com	r24
    1658:	84 23       	and	r24, r20
    165a:	8c 93       	st	X, r24

			}
		}
	}
}
    165c:	27 96       	adiw	r28, 0x07	; 7
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	cd bf       	out	0x3d, r28	; 61
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	08 95       	ret

0000166e <DIO_u8GetBitValue>:
/*****************************************************************************/
u8 DIO_u8GetBitValue(u8 copy_u8PortID , u8 Copy_u8PinID )
{
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	00 d0       	rcall	.+0      	; 0x1674 <DIO_u8GetBitValue+0x6>
    1674:	00 d0       	rcall	.+0      	; 0x1676 <DIO_u8GetBitValue+0x8>
    1676:	0f 92       	push	r0
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	8a 83       	std	Y+2, r24	; 0x02
    167e:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_PinVal ;

	if( Copy_u8PinID>=PIN0 && Copy_u8PinID<=PIN7 )
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	88 30       	cpi	r24, 0x08	; 8
    1684:	08 f0       	brcs	.+2      	; 0x1688 <DIO_u8GetBitValue+0x1a>
    1686:	67 c0       	rjmp	.+206    	; 0x1756 <DIO_u8GetBitValue+0xe8>
	{
		switch(copy_u8PortID)
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	3d 83       	std	Y+5, r19	; 0x05
    1690:	2c 83       	std	Y+4, r18	; 0x04
    1692:	4c 81       	ldd	r20, Y+4	; 0x04
    1694:	5d 81       	ldd	r21, Y+5	; 0x05
    1696:	41 30       	cpi	r20, 0x01	; 1
    1698:	51 05       	cpc	r21, r1
    169a:	41 f1       	breq	.+80     	; 0x16ec <DIO_u8GetBitValue+0x7e>
    169c:	8c 81       	ldd	r24, Y+4	; 0x04
    169e:	9d 81       	ldd	r25, Y+5	; 0x05
    16a0:	82 30       	cpi	r24, 0x02	; 2
    16a2:	91 05       	cpc	r25, r1
    16a4:	34 f4       	brge	.+12     	; 0x16b2 <DIO_u8GetBitValue+0x44>
    16a6:	2c 81       	ldd	r18, Y+4	; 0x04
    16a8:	3d 81       	ldd	r19, Y+5	; 0x05
    16aa:	21 15       	cp	r18, r1
    16ac:	31 05       	cpc	r19, r1
    16ae:	61 f0       	breq	.+24     	; 0x16c8 <DIO_u8GetBitValue+0x5a>
    16b0:	52 c0       	rjmp	.+164    	; 0x1756 <DIO_u8GetBitValue+0xe8>
    16b2:	4c 81       	ldd	r20, Y+4	; 0x04
    16b4:	5d 81       	ldd	r21, Y+5	; 0x05
    16b6:	42 30       	cpi	r20, 0x02	; 2
    16b8:	51 05       	cpc	r21, r1
    16ba:	51 f1       	breq	.+84     	; 0x1710 <DIO_u8GetBitValue+0xa2>
    16bc:	8c 81       	ldd	r24, Y+4	; 0x04
    16be:	9d 81       	ldd	r25, Y+5	; 0x05
    16c0:	83 30       	cpi	r24, 0x03	; 3
    16c2:	91 05       	cpc	r25, r1
    16c4:	b9 f1       	breq	.+110    	; 0x1734 <DIO_u8GetBitValue+0xc6>
    16c6:	47 c0       	rjmp	.+142    	; 0x1756 <DIO_u8GetBitValue+0xe8>
		{

		case PORTA_ID : Local_PinVal=GET_BIT(PINA_REG,Copy_u8PinID)   ; break ;
    16c8:	e9 e3       	ldi	r30, 0x39	; 57
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	88 2f       	mov	r24, r24
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	a9 01       	movw	r20, r18
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <DIO_u8GetBitValue+0x72>
    16dc:	55 95       	asr	r21
    16de:	47 95       	ror	r20
    16e0:	8a 95       	dec	r24
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <DIO_u8GetBitValue+0x6e>
    16e4:	ca 01       	movw	r24, r20
    16e6:	81 70       	andi	r24, 0x01	; 1
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	35 c0       	rjmp	.+106    	; 0x1756 <DIO_u8GetBitValue+0xe8>
		case PORTB_ID : Local_PinVal=GET_BIT(PINB_REG,Copy_u8PinID)   ; break ;
    16ec:	e6 e3       	ldi	r30, 0x36	; 54
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	88 2f       	mov	r24, r24
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a9 01       	movw	r20, r18
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <DIO_u8GetBitValue+0x96>
    1700:	55 95       	asr	r21
    1702:	47 95       	ror	r20
    1704:	8a 95       	dec	r24
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <DIO_u8GetBitValue+0x92>
    1708:	ca 01       	movw	r24, r20
    170a:	81 70       	andi	r24, 0x01	; 1
    170c:	89 83       	std	Y+1, r24	; 0x01
    170e:	23 c0       	rjmp	.+70     	; 0x1756 <DIO_u8GetBitValue+0xe8>
		case PORTC_ID : Local_PinVal=GET_BIT(PINC_REG,Copy_u8PinID)   ; break ;
    1710:	e3 e3       	ldi	r30, 0x33	; 51
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a9 01       	movw	r20, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <DIO_u8GetBitValue+0xba>
    1724:	55 95       	asr	r21
    1726:	47 95       	ror	r20
    1728:	8a 95       	dec	r24
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <DIO_u8GetBitValue+0xb6>
    172c:	ca 01       	movw	r24, r20
    172e:	81 70       	andi	r24, 0x01	; 1
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	11 c0       	rjmp	.+34     	; 0x1756 <DIO_u8GetBitValue+0xe8>
		case PORTD_ID : Local_PinVal=GET_BIT(PIND_REG,Copy_u8PinID)   ; break ;
    1734:	e0 e3       	ldi	r30, 0x30	; 48
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	88 2f       	mov	r24, r24
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a9 01       	movw	r20, r18
    1746:	02 c0       	rjmp	.+4      	; 0x174c <DIO_u8GetBitValue+0xde>
    1748:	55 95       	asr	r21
    174a:	47 95       	ror	r20
    174c:	8a 95       	dec	r24
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <DIO_u8GetBitValue+0xda>
    1750:	ca 01       	movw	r24, r20
    1752:	81 70       	andi	r24, 0x01	; 1
    1754:	89 83       	std	Y+1, r24	; 0x01

		}
	}

	return Local_PinVal ;
    1756:	89 81       	ldd	r24, Y+1	; 0x01

}
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <DIO_voidToggelPin>:
}
 */

/*****************************************************************************/
void DIO_voidToggelPin(u8 copy_u8PortID,u8 Copy_u8PinID)
{
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	00 d0       	rcall	.+0      	; 0x176e <DIO_voidToggelPin+0x6>
    176e:	00 d0       	rcall	.+0      	; 0x1770 <DIO_voidToggelPin+0x8>
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	6a 83       	std	Y+2, r22	; 0x02

	if( Copy_u8PinID>=PIN0 && Copy_u8PinID<=PIN7)
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	88 30       	cpi	r24, 0x08	; 8
    177c:	08 f0       	brcs	.+2      	; 0x1780 <DIO_voidToggelPin+0x18>
    177e:	6e c0       	rjmp	.+220    	; 0x185c <DIO_voidToggelPin+0xf4>
	{

		switch (copy_u8PortID)
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	3c 83       	std	Y+4, r19	; 0x04
    1788:	2b 83       	std	Y+3, r18	; 0x03
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	9c 81       	ldd	r25, Y+4	; 0x04
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	91 05       	cpc	r25, r1
    1792:	49 f1       	breq	.+82     	; 0x17e6 <DIO_voidToggelPin+0x7e>
    1794:	2b 81       	ldd	r18, Y+3	; 0x03
    1796:	3c 81       	ldd	r19, Y+4	; 0x04
    1798:	22 30       	cpi	r18, 0x02	; 2
    179a:	31 05       	cpc	r19, r1
    179c:	2c f4       	brge	.+10     	; 0x17a8 <DIO_voidToggelPin+0x40>
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	9c 81       	ldd	r25, Y+4	; 0x04
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	61 f0       	breq	.+24     	; 0x17be <DIO_voidToggelPin+0x56>
    17a6:	5a c0       	rjmp	.+180    	; 0x185c <DIO_voidToggelPin+0xf4>
    17a8:	2b 81       	ldd	r18, Y+3	; 0x03
    17aa:	3c 81       	ldd	r19, Y+4	; 0x04
    17ac:	22 30       	cpi	r18, 0x02	; 2
    17ae:	31 05       	cpc	r19, r1
    17b0:	71 f1       	breq	.+92     	; 0x180e <DIO_voidToggelPin+0xa6>
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	9c 81       	ldd	r25, Y+4	; 0x04
    17b6:	83 30       	cpi	r24, 0x03	; 3
    17b8:	91 05       	cpc	r25, r1
    17ba:	e9 f1       	breq	.+122    	; 0x1836 <DIO_voidToggelPin+0xce>
    17bc:	4f c0       	rjmp	.+158    	; 0x185c <DIO_voidToggelPin+0xf4>
		{
		case PORTA_ID :  TOG_BIT(PORTA_REG,Copy_u8PinID) ; break ;
    17be:	ab e3       	ldi	r26, 0x3B	; 59
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	eb e3       	ldi	r30, 0x3B	; 59
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	48 2f       	mov	r20, r24
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	02 2e       	mov	r0, r18
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <DIO_voidToggelPin+0x74>
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	0a 94       	dec	r0
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <DIO_voidToggelPin+0x70>
    17e0:	84 27       	eor	r24, r20
    17e2:	8c 93       	st	X, r24
    17e4:	3b c0       	rjmp	.+118    	; 0x185c <DIO_voidToggelPin+0xf4>
		case PORTB_ID :  TOG_BIT(PORTB_REG,Copy_u8PinID) ; break ;
    17e6:	a8 e3       	ldi	r26, 0x38	; 56
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e8 e3       	ldi	r30, 0x38	; 56
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	48 2f       	mov	r20, r24
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	02 2e       	mov	r0, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <DIO_voidToggelPin+0x9c>
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	0a 94       	dec	r0
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <DIO_voidToggelPin+0x98>
    1808:	84 27       	eor	r24, r20
    180a:	8c 93       	st	X, r24
    180c:	27 c0       	rjmp	.+78     	; 0x185c <DIO_voidToggelPin+0xf4>
		case PORTC_ID :  TOG_BIT(PORTC_REG,Copy_u8PinID) ; break ;
    180e:	a5 e3       	ldi	r26, 0x35	; 53
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e5 e3       	ldi	r30, 0x35	; 53
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	48 2f       	mov	r20, r24
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	02 2e       	mov	r0, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <DIO_voidToggelPin+0xc4>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	0a 94       	dec	r0
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <DIO_voidToggelPin+0xc0>
    1830:	84 27       	eor	r24, r20
    1832:	8c 93       	st	X, r24
    1834:	13 c0       	rjmp	.+38     	; 0x185c <DIO_voidToggelPin+0xf4>
		case PORTD_ID :  TOG_BIT(PORTD_REG,Copy_u8PinID) ; break ;
    1836:	a2 e3       	ldi	r26, 0x32	; 50
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e2 e3       	ldi	r30, 0x32	; 50
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	48 2f       	mov	r20, r24
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	02 2e       	mov	r0, r18
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <DIO_voidToggelPin+0xec>
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	0a 94       	dec	r0
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <DIO_voidToggelPin+0xe8>
    1858:	84 27       	eor	r24, r20
    185a:	8c 93       	st	X, r24
		}

	}
}
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <LCD_voidInit>:



/***********************************************************************************/
void LCD_voidInit(void)
{
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	2e 97       	sbiw	r28, 0x0e	; 14
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	de bf       	out	0x3e, r29	; 62
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	cd bf       	out	0x3d, r28	; 61
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	a0 ef       	ldi	r26, 0xF0	; 240
    1884:	b1 e4       	ldi	r27, 0x41	; 65
    1886:	8b 87       	std	Y+11, r24	; 0x0b
    1888:	9c 87       	std	Y+12, r25	; 0x0c
    188a:	ad 87       	std	Y+13, r26	; 0x0d
    188c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    188e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1890:	7c 85       	ldd	r23, Y+12	; 0x0c
    1892:	8d 85       	ldd	r24, Y+13	; 0x0d
    1894:	9e 85       	ldd	r25, Y+14	; 0x0e
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	4a e7       	ldi	r20, 0x7A	; 122
    189c:	55 e4       	ldi	r21, 0x45	; 69
    189e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	8f 83       	std	Y+7, r24	; 0x07
    18a8:	98 87       	std	Y+8, r25	; 0x08
    18aa:	a9 87       	std	Y+9, r26	; 0x09
    18ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18ae:	6f 81       	ldd	r22, Y+7	; 0x07
    18b0:	78 85       	ldd	r23, Y+8	; 0x08
    18b2:	89 85       	ldd	r24, Y+9	; 0x09
    18b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e8       	ldi	r20, 0x80	; 128
    18bc:	5f e3       	ldi	r21, 0x3F	; 63
    18be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18c2:	88 23       	and	r24, r24
    18c4:	2c f4       	brge	.+10     	; 0x18d0 <LCD_voidInit+0x66>
		__ticks = 1;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	9e 83       	std	Y+6, r25	; 0x06
    18cc:	8d 83       	std	Y+5, r24	; 0x05
    18ce:	3f c0       	rjmp	.+126    	; 0x194e <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    18d0:	6f 81       	ldd	r22, Y+7	; 0x07
    18d2:	78 85       	ldd	r23, Y+8	; 0x08
    18d4:	89 85       	ldd	r24, Y+9	; 0x09
    18d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	3f ef       	ldi	r19, 0xFF	; 255
    18dc:	4f e7       	ldi	r20, 0x7F	; 127
    18de:	57 e4       	ldi	r21, 0x47	; 71
    18e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18e4:	18 16       	cp	r1, r24
    18e6:	4c f5       	brge	.+82     	; 0x193a <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e2       	ldi	r20, 0x20	; 32
    18f6:	51 e4       	ldi	r21, 0x41	; 65
    18f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	bc 01       	movw	r22, r24
    1902:	cd 01       	movw	r24, r26
    1904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	9e 83       	std	Y+6, r25	; 0x06
    190e:	8d 83       	std	Y+5, r24	; 0x05
    1910:	0f c0       	rjmp	.+30     	; 0x1930 <LCD_voidInit+0xc6>
    1912:	80 e9       	ldi	r24, 0x90	; 144
    1914:	91 e0       	ldi	r25, 0x01	; 1
    1916:	9c 83       	std	Y+4, r25	; 0x04
    1918:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	9c 81       	ldd	r25, Y+4	; 0x04
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	f1 f7       	brne	.-4      	; 0x191e <LCD_voidInit+0xb4>
    1922:	9c 83       	std	Y+4, r25	; 0x04
    1924:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1926:	8d 81       	ldd	r24, Y+5	; 0x05
    1928:	9e 81       	ldd	r25, Y+6	; 0x06
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	9e 83       	std	Y+6, r25	; 0x06
    192e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1930:	8d 81       	ldd	r24, Y+5	; 0x05
    1932:	9e 81       	ldd	r25, Y+6	; 0x06
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	69 f7       	brne	.-38     	; 0x1912 <LCD_voidInit+0xa8>
    1938:	14 c0       	rjmp	.+40     	; 0x1962 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193a:	6f 81       	ldd	r22, Y+7	; 0x07
    193c:	78 85       	ldd	r23, Y+8	; 0x08
    193e:	89 85       	ldd	r24, Y+9	; 0x09
    1940:	9a 85       	ldd	r25, Y+10	; 0x0a
    1942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	9e 83       	std	Y+6, r25	; 0x06
    194c:	8d 83       	std	Y+5, r24	; 0x05
    194e:	8d 81       	ldd	r24, Y+5	; 0x05
    1950:	9e 81       	ldd	r25, Y+6	; 0x06
    1952:	9a 83       	std	Y+2, r25	; 0x02
    1954:	89 83       	std	Y+1, r24	; 0x01
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	9a 81       	ldd	r25, Y+2	; 0x02
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <LCD_voidInit+0xf0>
    195e:	9a 83       	std	Y+2, r25	; 0x02
    1960:	89 83       	std	Y+1, r24	; 0x01
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Set Control pins as output */
	DIO_voidSetPinDirection(RS_PORT,RS_PIN,PIN_OUTPUT);
    1962:	82 e0       	ldi	r24, 0x02	; 2
    1964:	60 e0       	ldi	r22, 0x00	; 0
    1966:	41 e0       	ldi	r20, 0x01	; 1
    1968:	0e 94 2f 09 	call	0x125e	; 0x125e <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(RW_PORT,RW_PIN,PIN_OUTPUT);
	DIO_voidSetPinDirection(EN_PORT, EN_PIN,PIN_OUTPUT);
    196c:	82 e0       	ldi	r24, 0x02	; 2
    196e:	61 e0       	ldi	r22, 0x01	; 1
    1970:	41 e0       	ldi	r20, 0x01	; 1
    1972:	0e 94 2f 09 	call	0x125e	; 0x125e <DIO_voidSetPinDirection>

	/* Set Data Port Direction as output */
	DIO_voidSetPinDirection(D4_PORT,D4_PIN,PIN_OUTPUT);
    1976:	82 e0       	ldi	r24, 0x02	; 2
    1978:	62 e0       	ldi	r22, 0x02	; 2
    197a:	41 e0       	ldi	r20, 0x01	; 1
    197c:	0e 94 2f 09 	call	0x125e	; 0x125e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D5_PORT,D5_PIN,PIN_OUTPUT);
    1980:	82 e0       	ldi	r24, 0x02	; 2
    1982:	63 e0       	ldi	r22, 0x03	; 3
    1984:	41 e0       	ldi	r20, 0x01	; 1
    1986:	0e 94 2f 09 	call	0x125e	; 0x125e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D6_PORT,D6_PIN,PIN_OUTPUT);
    198a:	82 e0       	ldi	r24, 0x02	; 2
    198c:	64 e0       	ldi	r22, 0x04	; 4
    198e:	41 e0       	ldi	r20, 0x01	; 1
    1990:	0e 94 2f 09 	call	0x125e	; 0x125e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D7_PORT,D7_PIN,PIN_OUTPUT);
    1994:	82 e0       	ldi	r24, 0x02	; 2
    1996:	65 e0       	ldi	r22, 0x05	; 5
    1998:	41 e0       	ldi	r20, 0x01	; 1
    199a:	0e 94 2f 09 	call	0x125e	; 0x125e <DIO_voidSetPinDirection>

	/* Return Home */
	LCD_voidWriteCommand(RETURN_HOME);
    199e:	82 e0       	ldi	r24, 0x02	; 2
    19a0:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LCD_voidWriteCommand>

	/* Configure as 4-bit data mode*/
	LCD_voidWriteCommand(FUNCTION_SET_4BIT_2LINES_5X7_DOTS);
    19a4:	88 e2       	ldi	r24, 0x28	; 40
    19a6:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LCD_voidWriteCommand>

	/*Display ON OFF Control */
	LCD_voidWriteCommand(DISPLAY_ON_CURSOR_OFF);
    19aa:	8c e0       	ldi	r24, 0x0C	; 12
    19ac:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LCD_voidWriteCommand>

	/* Clear Display */
	LCD_voidWriteCommand(DISPLAY_CLEAR);
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LCD_voidWriteCommand>

	/*ENTRY MODE*/
	LCD_voidWriteCommand(ENTRY_MODE_SET);
    19b6:	86 e0       	ldi	r24, 0x06	; 6
    19b8:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LCD_voidWriteCommand>

}
    19bc:	2e 96       	adiw	r28, 0x0e	; 14
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	08 95       	ret

000019ce <LCD_voidWriteBitsToSend>:
/***********************************************************************************/

static void LCD_voidWriteBitsToSend(u8 copy_u8Byte)
{
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	6d 97       	sbiw	r28, 0x1d	; 29
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    19e2:	8d 8f       	std	Y+29, r24	; 0x1d



	/*prepare 4 bits MSB to send */
	DIO_voidSetPinValue(D7_PORT,D7_PIN, GET_BIT(copy_u8Byte,PIN7) );
    19e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19e6:	98 2f       	mov	r25, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	99 27       	eor	r25, r25
    19ec:	99 1f       	adc	r25, r25
    19ee:	82 e0       	ldi	r24, 0x02	; 2
    19f0:	65 e0       	ldi	r22, 0x05	; 5
    19f2:	49 2f       	mov	r20, r25
    19f4:	0e 94 33 0a 	call	0x1466	; 0x1466 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT,D6_PIN, GET_BIT(copy_u8Byte,PIN6) );
    19f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19fa:	82 95       	swap	r24
    19fc:	86 95       	lsr	r24
    19fe:	86 95       	lsr	r24
    1a00:	83 70       	andi	r24, 0x03	; 3
    1a02:	98 2f       	mov	r25, r24
    1a04:	91 70       	andi	r25, 0x01	; 1
    1a06:	82 e0       	ldi	r24, 0x02	; 2
    1a08:	64 e0       	ldi	r22, 0x04	; 4
    1a0a:	49 2f       	mov	r20, r25
    1a0c:	0e 94 33 0a 	call	0x1466	; 0x1466 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT,D5_PIN, GET_BIT(copy_u8Byte,PIN5) );
    1a10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a12:	82 95       	swap	r24
    1a14:	86 95       	lsr	r24
    1a16:	87 70       	andi	r24, 0x07	; 7
    1a18:	98 2f       	mov	r25, r24
    1a1a:	91 70       	andi	r25, 0x01	; 1
    1a1c:	82 e0       	ldi	r24, 0x02	; 2
    1a1e:	63 e0       	ldi	r22, 0x03	; 3
    1a20:	49 2f       	mov	r20, r25
    1a22:	0e 94 33 0a 	call	0x1466	; 0x1466 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT,D4_PIN, GET_BIT(copy_u8Byte,PIN4) );
    1a26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a28:	82 95       	swap	r24
    1a2a:	8f 70       	andi	r24, 0x0F	; 15
    1a2c:	98 2f       	mov	r25, r24
    1a2e:	91 70       	andi	r25, 0x01	; 1
    1a30:	82 e0       	ldi	r24, 0x02	; 2
    1a32:	62 e0       	ldi	r22, 0x02	; 2
    1a34:	49 2f       	mov	r20, r25
    1a36:	0e 94 33 0a 	call	0x1466	; 0x1466 <DIO_voidSetPinValue>

	/* open EN--> make it high --- then after 2m close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_HIGH);
    1a3a:	82 e0       	ldi	r24, 0x02	; 2
    1a3c:	61 e0       	ldi	r22, 0x01	; 1
    1a3e:	41 e0       	ldi	r20, 0x01	; 1
    1a40:	0e 94 33 0a 	call	0x1466	; 0x1466 <DIO_voidSetPinValue>
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	a0 e0       	ldi	r26, 0x00	; 0
    1a4a:	b0 e4       	ldi	r27, 0x40	; 64
    1a4c:	89 8f       	std	Y+25, r24	; 0x19
    1a4e:	9a 8f       	std	Y+26, r25	; 0x1a
    1a50:	ab 8f       	std	Y+27, r26	; 0x1b
    1a52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a54:	69 8d       	ldd	r22, Y+25	; 0x19
    1a56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	4a e7       	ldi	r20, 0x7A	; 122
    1a62:	55 e4       	ldi	r21, 0x45	; 69
    1a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	8d 8b       	std	Y+21, r24	; 0x15
    1a6e:	9e 8b       	std	Y+22, r25	; 0x16
    1a70:	af 8b       	std	Y+23, r26	; 0x17
    1a72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a74:	6d 89       	ldd	r22, Y+21	; 0x15
    1a76:	7e 89       	ldd	r23, Y+22	; 0x16
    1a78:	8f 89       	ldd	r24, Y+23	; 0x17
    1a7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	40 e8       	ldi	r20, 0x80	; 128
    1a82:	5f e3       	ldi	r21, 0x3F	; 63
    1a84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a88:	88 23       	and	r24, r24
    1a8a:	2c f4       	brge	.+10     	; 0x1a96 <LCD_voidWriteBitsToSend+0xc8>
		__ticks = 1;
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	9c 8b       	std	Y+20, r25	; 0x14
    1a92:	8b 8b       	std	Y+19, r24	; 0x13
    1a94:	3f c0       	rjmp	.+126    	; 0x1b14 <LCD_voidWriteBitsToSend+0x146>
	else if (__tmp > 65535)
    1a96:	6d 89       	ldd	r22, Y+21	; 0x15
    1a98:	7e 89       	ldd	r23, Y+22	; 0x16
    1a9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	3f ef       	ldi	r19, 0xFF	; 255
    1aa2:	4f e7       	ldi	r20, 0x7F	; 127
    1aa4:	57 e4       	ldi	r21, 0x47	; 71
    1aa6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aaa:	18 16       	cp	r1, r24
    1aac:	4c f5       	brge	.+82     	; 0x1b00 <LCD_voidWriteBitsToSend+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aae:	69 8d       	ldd	r22, Y+25	; 0x19
    1ab0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ab2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ab4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e2       	ldi	r20, 0x20	; 32
    1abc:	51 e4       	ldi	r21, 0x41	; 65
    1abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	bc 01       	movw	r22, r24
    1ac8:	cd 01       	movw	r24, r26
    1aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	9c 8b       	std	Y+20, r25	; 0x14
    1ad4:	8b 8b       	std	Y+19, r24	; 0x13
    1ad6:	0f c0       	rjmp	.+30     	; 0x1af6 <LCD_voidWriteBitsToSend+0x128>
    1ad8:	80 e9       	ldi	r24, 0x90	; 144
    1ada:	91 e0       	ldi	r25, 0x01	; 1
    1adc:	9a 8b       	std	Y+18, r25	; 0x12
    1ade:	89 8b       	std	Y+17, r24	; 0x11
    1ae0:	89 89       	ldd	r24, Y+17	; 0x11
    1ae2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <LCD_voidWriteBitsToSend+0x116>
    1ae8:	9a 8b       	std	Y+18, r25	; 0x12
    1aea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aec:	8b 89       	ldd	r24, Y+19	; 0x13
    1aee:	9c 89       	ldd	r25, Y+20	; 0x14
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	9c 8b       	std	Y+20, r25	; 0x14
    1af4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af6:	8b 89       	ldd	r24, Y+19	; 0x13
    1af8:	9c 89       	ldd	r25, Y+20	; 0x14
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	69 f7       	brne	.-38     	; 0x1ad8 <LCD_voidWriteBitsToSend+0x10a>
    1afe:	14 c0       	rjmp	.+40     	; 0x1b28 <LCD_voidWriteBitsToSend+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b00:	6d 89       	ldd	r22, Y+21	; 0x15
    1b02:	7e 89       	ldd	r23, Y+22	; 0x16
    1b04:	8f 89       	ldd	r24, Y+23	; 0x17
    1b06:	98 8d       	ldd	r25, Y+24	; 0x18
    1b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	9c 8b       	std	Y+20, r25	; 0x14
    1b12:	8b 8b       	std	Y+19, r24	; 0x13
    1b14:	8b 89       	ldd	r24, Y+19	; 0x13
    1b16:	9c 89       	ldd	r25, Y+20	; 0x14
    1b18:	98 8b       	std	Y+16, r25	; 0x10
    1b1a:	8f 87       	std	Y+15, r24	; 0x0f
    1b1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b1e:	98 89       	ldd	r25, Y+16	; 0x10
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	f1 f7       	brne	.-4      	; 0x1b20 <LCD_voidWriteBitsToSend+0x152>
    1b24:	98 8b       	std	Y+16, r25	; 0x10
    1b26:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_LOW);
    1b28:	82 e0       	ldi	r24, 0x02	; 2
    1b2a:	61 e0       	ldi	r22, 0x01	; 1
    1b2c:	40 e0       	ldi	r20, 0x00	; 0
    1b2e:	0e 94 33 0a 	call	0x1466	; 0x1466 <DIO_voidSetPinValue>


	/*prepare 4 bits LSB to send */
	DIO_voidSetPinValue(D7_PORT,D7_PIN, GET_BIT(copy_u8Byte,PIN3) );
    1b32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b34:	86 95       	lsr	r24
    1b36:	86 95       	lsr	r24
    1b38:	86 95       	lsr	r24
    1b3a:	98 2f       	mov	r25, r24
    1b3c:	91 70       	andi	r25, 0x01	; 1
    1b3e:	82 e0       	ldi	r24, 0x02	; 2
    1b40:	65 e0       	ldi	r22, 0x05	; 5
    1b42:	49 2f       	mov	r20, r25
    1b44:	0e 94 33 0a 	call	0x1466	; 0x1466 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT,D6_PIN, GET_BIT(copy_u8Byte,PIN2) );
    1b48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b4a:	86 95       	lsr	r24
    1b4c:	86 95       	lsr	r24
    1b4e:	98 2f       	mov	r25, r24
    1b50:	91 70       	andi	r25, 0x01	; 1
    1b52:	82 e0       	ldi	r24, 0x02	; 2
    1b54:	64 e0       	ldi	r22, 0x04	; 4
    1b56:	49 2f       	mov	r20, r25
    1b58:	0e 94 33 0a 	call	0x1466	; 0x1466 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT,D5_PIN, GET_BIT(copy_u8Byte,PIN1) );
    1b5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b5e:	86 95       	lsr	r24
    1b60:	98 2f       	mov	r25, r24
    1b62:	91 70       	andi	r25, 0x01	; 1
    1b64:	82 e0       	ldi	r24, 0x02	; 2
    1b66:	63 e0       	ldi	r22, 0x03	; 3
    1b68:	49 2f       	mov	r20, r25
    1b6a:	0e 94 33 0a 	call	0x1466	; 0x1466 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT,D4_PIN, GET_BIT(copy_u8Byte,PIN0) );
    1b6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b70:	98 2f       	mov	r25, r24
    1b72:	91 70       	andi	r25, 0x01	; 1
    1b74:	82 e0       	ldi	r24, 0x02	; 2
    1b76:	62 e0       	ldi	r22, 0x02	; 2
    1b78:	49 2f       	mov	r20, r25
    1b7a:	0e 94 33 0a 	call	0x1466	; 0x1466 <DIO_voidSetPinValue>

	/* open EN--> make it high --- then after 2m -- close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_HIGH);
    1b7e:	82 e0       	ldi	r24, 0x02	; 2
    1b80:	61 e0       	ldi	r22, 0x01	; 1
    1b82:	41 e0       	ldi	r20, 0x01	; 1
    1b84:	0e 94 33 0a 	call	0x1466	; 0x1466 <DIO_voidSetPinValue>
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	a0 e0       	ldi	r26, 0x00	; 0
    1b8e:	b0 e4       	ldi	r27, 0x40	; 64
    1b90:	8b 87       	std	Y+11, r24	; 0x0b
    1b92:	9c 87       	std	Y+12, r25	; 0x0c
    1b94:	ad 87       	std	Y+13, r26	; 0x0d
    1b96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	4a e7       	ldi	r20, 0x7A	; 122
    1ba6:	55 e4       	ldi	r21, 0x45	; 69
    1ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	8f 83       	std	Y+7, r24	; 0x07
    1bb2:	98 87       	std	Y+8, r25	; 0x08
    1bb4:	a9 87       	std	Y+9, r26	; 0x09
    1bb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bba:	78 85       	ldd	r23, Y+8	; 0x08
    1bbc:	89 85       	ldd	r24, Y+9	; 0x09
    1bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	40 e8       	ldi	r20, 0x80	; 128
    1bc6:	5f e3       	ldi	r21, 0x3F	; 63
    1bc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bcc:	88 23       	and	r24, r24
    1bce:	2c f4       	brge	.+10     	; 0x1bda <LCD_voidWriteBitsToSend+0x20c>
		__ticks = 1;
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	9e 83       	std	Y+6, r25	; 0x06
    1bd6:	8d 83       	std	Y+5, r24	; 0x05
    1bd8:	3f c0       	rjmp	.+126    	; 0x1c58 <LCD_voidWriteBitsToSend+0x28a>
	else if (__tmp > 65535)
    1bda:	6f 81       	ldd	r22, Y+7	; 0x07
    1bdc:	78 85       	ldd	r23, Y+8	; 0x08
    1bde:	89 85       	ldd	r24, Y+9	; 0x09
    1be0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	3f ef       	ldi	r19, 0xFF	; 255
    1be6:	4f e7       	ldi	r20, 0x7F	; 127
    1be8:	57 e4       	ldi	r21, 0x47	; 71
    1bea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bee:	18 16       	cp	r1, r24
    1bf0:	4c f5       	brge	.+82     	; 0x1c44 <LCD_voidWriteBitsToSend+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	40 e2       	ldi	r20, 0x20	; 32
    1c00:	51 e4       	ldi	r21, 0x41	; 65
    1c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	bc 01       	movw	r22, r24
    1c0c:	cd 01       	movw	r24, r26
    1c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	9e 83       	std	Y+6, r25	; 0x06
    1c18:	8d 83       	std	Y+5, r24	; 0x05
    1c1a:	0f c0       	rjmp	.+30     	; 0x1c3a <LCD_voidWriteBitsToSend+0x26c>
    1c1c:	80 e9       	ldi	r24, 0x90	; 144
    1c1e:	91 e0       	ldi	r25, 0x01	; 1
    1c20:	9c 83       	std	Y+4, r25	; 0x04
    1c22:	8b 83       	std	Y+3, r24	; 0x03
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	9c 81       	ldd	r25, Y+4	; 0x04
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	f1 f7       	brne	.-4      	; 0x1c28 <LCD_voidWriteBitsToSend+0x25a>
    1c2c:	9c 83       	std	Y+4, r25	; 0x04
    1c2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c30:	8d 81       	ldd	r24, Y+5	; 0x05
    1c32:	9e 81       	ldd	r25, Y+6	; 0x06
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	9e 83       	std	Y+6, r25	; 0x06
    1c38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	69 f7       	brne	.-38     	; 0x1c1c <LCD_voidWriteBitsToSend+0x24e>
    1c42:	14 c0       	rjmp	.+40     	; 0x1c6c <LCD_voidWriteBitsToSend+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c44:	6f 81       	ldd	r22, Y+7	; 0x07
    1c46:	78 85       	ldd	r23, Y+8	; 0x08
    1c48:	89 85       	ldd	r24, Y+9	; 0x09
    1c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	9e 83       	std	Y+6, r25	; 0x06
    1c56:	8d 83       	std	Y+5, r24	; 0x05
    1c58:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5c:	9a 83       	std	Y+2, r25	; 0x02
    1c5e:	89 83       	std	Y+1, r24	; 0x01
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	9a 81       	ldd	r25, Y+2	; 0x02
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	f1 f7       	brne	.-4      	; 0x1c64 <LCD_voidWriteBitsToSend+0x296>
    1c68:	9a 83       	std	Y+2, r25	; 0x02
    1c6a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_LOW);
    1c6c:	82 e0       	ldi	r24, 0x02	; 2
    1c6e:	61 e0       	ldi	r22, 0x01	; 1
    1c70:	40 e0       	ldi	r20, 0x00	; 0
    1c72:	0e 94 33 0a 	call	0x1466	; 0x1466 <DIO_voidSetPinValue>




}
    1c76:	6d 96       	adiw	r28, 0x1d	; 29
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <LCD_voidWriteData>:



/***********************************************************************************/
void LCD_voidWriteData(u8 copy_u8data)
{
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	0f 92       	push	r0
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to HIGH */
	DIO_voidSetPinValue(RS_PORT,RS_PIN,PIN_HIGH);
    1c94:	82 e0       	ldi	r24, 0x02	; 2
    1c96:	60 e0       	ldi	r22, 0x00	; 0
    1c98:	41 e0       	ldi	r20, 0x01	; 1
    1c9a:	0e 94 33 0a 	call	0x1466	; 0x1466 <DIO_voidSetPinValue>

	LCD_voidWriteBitsToSend(copy_u8data);
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <LCD_voidWriteBitsToSend>
}
    1ca4:	0f 90       	pop	r0
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <LCD_voidWriteCommand>:


/***********************************************************************************/

void LCD_voidWriteCommand(u8 copy_u8Command)
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	0f 92       	push	r0
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to low */
	DIO_voidSetPinValue(RS_PORT,RS_PIN,PIN_LOW);
    1cb8:	82 e0       	ldi	r24, 0x02	; 2
    1cba:	60 e0       	ldi	r22, 0x00	; 0
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	0e 94 33 0a 	call	0x1466	; 0x1466 <DIO_voidSetPinValue>


	LCD_voidWriteBitsToSend(copy_u8Command);
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <LCD_voidWriteBitsToSend>
}
    1cc8:	0f 90       	pop	r0
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <LCD_voidWriteString>:
/***********************************************************************************/



void LCD_voidWriteString(u8 * copy_str)
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <LCD_voidWriteString+0x6>
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <LCD_voidWriteString+0x8>
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	9c 83       	std	Y+4, r25	; 0x04
    1cde:	8b 83       	std	Y+3, r24	; 0x03

	u16 i= ZERO;
    1ce0:	1a 82       	std	Y+2, r1	; 0x02
    1ce2:	19 82       	std	Y+1, r1	; 0x01
    1ce4:	0f c0       	rjmp	.+30     	; 0x1d04 <LCD_voidWriteString+0x34>
	while(copy_str[i] != '\0')
	{
		LCD_voidWriteData(copy_str[i]);
    1ce6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	9a 81       	ldd	r25, Y+2	; 0x02
    1cee:	f9 01       	movw	r30, r18
    1cf0:	e8 0f       	add	r30, r24
    1cf2:	f9 1f       	adc	r31, r25
    1cf4:	80 81       	ld	r24, Z
    1cf6:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_voidWriteData>
		i++;
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfe:	01 96       	adiw	r24, 0x01	; 1
    1d00:	9a 83       	std	Y+2, r25	; 0x02
    1d02:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidWriteString(u8 * copy_str)
{

	u16 i= ZERO;
	while(copy_str[i] != '\0')
    1d04:	2b 81       	ldd	r18, Y+3	; 0x03
    1d06:	3c 81       	ldd	r19, Y+4	; 0x04
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
    1d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0c:	f9 01       	movw	r30, r18
    1d0e:	e8 0f       	add	r30, r24
    1d10:	f9 1f       	adc	r31, r25
    1d12:	80 81       	ld	r24, Z
    1d14:	88 23       	and	r24, r24
    1d16:	39 f7       	brne	.-50     	; 0x1ce6 <LCD_voidWriteString+0x16>
	{
		LCD_voidWriteData(copy_str[i]);
		i++;
	}
}
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <LCD_voidGoToXY>:


/***********************************************************************************/
void LCD_voidGoToXY(u8 copy_u8row,u8 copy_u8col)
{
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	27 97       	sbiw	r28, 0x07	; 7
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	8e 83       	std	Y+6, r24	; 0x06
    1d3c:	6f 83       	std	Y+7, r22	; 0x07
	 * 0x40 --> address row 1
	 * 0x14 --> address row 2
	 * 0x54 --> address row 3
	 * copy_u8col --> col num
	 * */
	u8 rows_address[4]={0x00,0x40,0x14,0x54};
    1d3e:	1a 82       	std	Y+2, r1	; 0x02
    1d40:	80 e4       	ldi	r24, 0x40	; 64
    1d42:	8b 83       	std	Y+3, r24	; 0x03
    1d44:	84 e1       	ldi	r24, 0x14	; 20
    1d46:	8c 83       	std	Y+4, r24	; 0x04
    1d48:	84 e5       	ldi	r24, 0x54	; 84
    1d4a:	8d 83       	std	Y+5, r24	; 0x05

	u8 local_address=( rows_address[copy_u8row]  + copy_u8col ) + SET_DDRAM_ADDRESS ;
    1d4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	ce 01       	movw	r24, r28
    1d54:	02 96       	adiw	r24, 0x02	; 2
    1d56:	fc 01       	movw	r30, r24
    1d58:	e2 0f       	add	r30, r18
    1d5a:	f3 1f       	adc	r31, r19
    1d5c:	90 81       	ld	r25, Z
    1d5e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d60:	89 0f       	add	r24, r25
    1d62:	80 58       	subi	r24, 0x80	; 128
    1d64:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteCommand(local_address) ;
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LCD_voidWriteCommand>

}
    1d6c:	27 96       	adiw	r28, 0x07	; 7
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	de bf       	out	0x3e, r29	; 62
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	cd bf       	out	0x3d, r28	; 61
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <LCD_voidClear>:

/***********************************************************************************/

void LCD_voidClear(void)
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
	LCD_voidWriteCommand( DISPLAY_CLEAR);
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LCD_voidWriteCommand>

}
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	08 95       	ret

00001d92 <LCD_voidShift>:



/***********************************************************************************/

void LCD_voidShift(u8 copy_u8direction){
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	0f 92       	push	r0
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	89 83       	std	Y+1, r24	; 0x01
	if (copy_u8direction==SHIFT_DISPLAY_RIGHT)
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	8c 31       	cpi	r24, 0x1C	; 28
    1da2:	21 f4       	brne	.+8      	; 0x1dac <LCD_voidShift+0x1a>
		{
			//Shift right
			LCD_voidWriteCommand(SHIFT_DISPLAY_RIGHT);
    1da4:	8c e1       	ldi	r24, 0x1C	; 28
    1da6:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LCD_voidWriteCommand>
    1daa:	06 c0       	rjmp	.+12     	; 0x1db8 <LCD_voidShift+0x26>
		}
		else if (copy_u8direction==SHIFT_DISPLAY_LIFT)
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	88 31       	cpi	r24, 0x18	; 24
    1db0:	19 f4       	brne	.+6      	; 0x1db8 <LCD_voidShift+0x26>
		{
			//Shift left
			LCD_voidWriteCommand(SHIFT_DISPLAY_LIFT);
    1db2:	88 e1       	ldi	r24, 0x18	; 24
    1db4:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LCD_voidWriteCommand>
		}
}
    1db8:	0f 90       	pop	r0
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <LCD_voidWriteNumber>:

/***********************************************************************************/

void LCD_voidWriteNumber( u32 Copy_u8num )

{
    1dc0:	0f 93       	push	r16
    1dc2:	1f 93       	push	r17
    1dc4:	df 93       	push	r29
    1dc6:	cf 93       	push	r28
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	63 97       	sbiw	r28, 0x13	; 19
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	f8 94       	cli
    1dd2:	de bf       	out	0x3e, r29	; 62
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	cd bf       	out	0x3d, r28	; 61
    1dd8:	68 8b       	std	Y+16, r22	; 0x10
    1dda:	79 8b       	std	Y+17, r23	; 0x11
    1ddc:	8a 8b       	std	Y+18, r24	; 0x12
    1dde:	9b 8b       	std	Y+19, r25	; 0x13
	u32 LOCAL_NUMBER=Copy_u8num ;
    1de0:	88 89       	ldd	r24, Y+16	; 0x10
    1de2:	99 89       	ldd	r25, Y+17	; 0x11
    1de4:	aa 89       	ldd	r26, Y+18	; 0x12
    1de6:	bb 89       	ldd	r27, Y+19	; 0x13
    1de8:	8a 83       	std	Y+2, r24	; 0x02
    1dea:	9b 83       	std	Y+3, r25	; 0x03
    1dec:	ac 83       	std	Y+4, r26	; 0x04
    1dee:	bd 83       	std	Y+5, r27	; 0x05
	u8 LOCAL_ARR[10]   ;
	u8 i=ZERO ;
    1df0:	19 82       	std	Y+1, r1	; 0x01


	do
	{
		LOCAL_ARR[i]= ( (LOCAL_NUMBER%10)+'0' );
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	08 2f       	mov	r16, r24
    1df6:	10 e0       	ldi	r17, 0x00	; 0
    1df8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfa:	9b 81       	ldd	r25, Y+3	; 0x03
    1dfc:	ac 81       	ldd	r26, Y+4	; 0x04
    1dfe:	bd 81       	ldd	r27, Y+5	; 0x05
    1e00:	2a e0       	ldi	r18, 0x0A	; 10
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e0       	ldi	r20, 0x00	; 0
    1e06:	50 e0       	ldi	r21, 0x00	; 0
    1e08:	bc 01       	movw	r22, r24
    1e0a:	cd 01       	movw	r24, r26
    1e0c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <__udivmodsi4>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	28 2f       	mov	r18, r24
    1e16:	20 5d       	subi	r18, 0xD0	; 208
    1e18:	ce 01       	movw	r24, r28
    1e1a:	06 96       	adiw	r24, 0x06	; 6
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	e0 0f       	add	r30, r16
    1e20:	f1 1f       	adc	r31, r17
    1e22:	20 83       	st	Z, r18
		LOCAL_NUMBER=LOCAL_NUMBER/10 ;
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	9b 81       	ldd	r25, Y+3	; 0x03
    1e28:	ac 81       	ldd	r26, Y+4	; 0x04
    1e2a:	bd 81       	ldd	r27, Y+5	; 0x05
    1e2c:	2a e0       	ldi	r18, 0x0A	; 10
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e0       	ldi	r20, 0x00	; 0
    1e32:	50 e0       	ldi	r21, 0x00	; 0
    1e34:	bc 01       	movw	r22, r24
    1e36:	cd 01       	movw	r24, r26
    1e38:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <__udivmodsi4>
    1e3c:	da 01       	movw	r26, r20
    1e3e:	c9 01       	movw	r24, r18
    1e40:	8a 83       	std	Y+2, r24	; 0x02
    1e42:	9b 83       	std	Y+3, r25	; 0x03
    1e44:	ac 83       	std	Y+4, r26	; 0x04
    1e46:	bd 83       	std	Y+5, r27	; 0x05
		i++ ;
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	8f 5f       	subi	r24, 0xFF	; 255
    1e4c:	89 83       	std	Y+1, r24	; 0x01
	}
	while(LOCAL_NUMBER!=ZERO);
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	9b 81       	ldd	r25, Y+3	; 0x03
    1e52:	ac 81       	ldd	r26, Y+4	; 0x04
    1e54:	bd 81       	ldd	r27, Y+5	; 0x05
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	a1 05       	cpc	r26, r1
    1e5a:	b1 05       	cpc	r27, r1
    1e5c:	51 f6       	brne	.-108    	; 0x1df2 <LCD_voidWriteNumber+0x32>
    1e5e:	11 c0       	rjmp	.+34     	; 0x1e82 <LCD_voidWriteNumber+0xc2>


	for(;i>0;i--)
	{
		LCD_voidWriteData(LOCAL_ARR[i-ONE]);
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	88 2f       	mov	r24, r24
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	9c 01       	movw	r18, r24
    1e68:	21 50       	subi	r18, 0x01	; 1
    1e6a:	30 40       	sbci	r19, 0x00	; 0
    1e6c:	ce 01       	movw	r24, r28
    1e6e:	06 96       	adiw	r24, 0x06	; 6
    1e70:	fc 01       	movw	r30, r24
    1e72:	e2 0f       	add	r30, r18
    1e74:	f3 1f       	adc	r31, r19
    1e76:	80 81       	ld	r24, Z
    1e78:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_voidWriteData>
		i++ ;
	}
	while(LOCAL_NUMBER!=ZERO);


	for(;i>0;i--)
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	81 50       	subi	r24, 0x01	; 1
    1e80:	89 83       	std	Y+1, r24	; 0x01
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	88 23       	and	r24, r24
    1e86:	61 f7       	brne	.-40     	; 0x1e60 <LCD_voidWriteNumber+0xa0>
		LCD_voidWriteData(LOCAL_ARR[i-ONE]);
	}



}
    1e88:	63 96       	adiw	r28, 0x13	; 19
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	f8 94       	cli
    1e8e:	de bf       	out	0x3e, r29	; 62
    1e90:	0f be       	out	0x3f, r0	; 63
    1e92:	cd bf       	out	0x3d, r28	; 61
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	1f 91       	pop	r17
    1e9a:	0f 91       	pop	r16
    1e9c:	08 95       	ret

00001e9e <LCD_voidWriteSpecialCharToCGRAM>:

/***********************************************************************************/

void LCD_voidWriteSpecialCharToCGRAM(u8 *copy_u8data , u8 copy_u8ByteNum )

{
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	00 d0       	rcall	.+0      	; 0x1ea4 <LCD_voidWriteSpecialCharToCGRAM+0x6>
    1ea4:	00 d0       	rcall	.+0      	; 0x1ea6 <LCD_voidWriteSpecialCharToCGRAM+0x8>
    1ea6:	0f 92       	push	r0
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
    1eac:	9c 83       	std	Y+4, r25	; 0x04
    1eae:	8b 83       	std	Y+3, r24	; 0x03
    1eb0:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8CGramAddrss ;
	u8 counter=ZERO ;
    1eb2:	19 82       	std	Y+1, r1	; 0x01

	Local_u8CGramAddrss = ( (copy_u8ByteNum * EIGHT)+SET_CGRAM_ADDRESS ) ;
    1eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb6:	88 2f       	mov	r24, r24
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	08 96       	adiw	r24, 0x08	; 8
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	88 0f       	add	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	8a 83       	std	Y+2, r24	; 0x02

	LCD_voidWriteCommand( Local_u8CGramAddrss  ) ;
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LCD_voidWriteCommand>


	for(counter=ZERO;counter<EIGHT;counter++)
    1ed0:	19 82       	std	Y+1, r1	; 0x01
    1ed2:	0e c0       	rjmp	.+28     	; 0x1ef0 <LCD_voidWriteSpecialCharToCGRAM+0x52>
	{
		LCD_voidWriteData(copy_u8data[counter]);
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ede:	fc 01       	movw	r30, r24
    1ee0:	e2 0f       	add	r30, r18
    1ee2:	f3 1f       	adc	r31, r19
    1ee4:	80 81       	ld	r24, Z
    1ee6:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_voidWriteData>
	Local_u8CGramAddrss = ( (copy_u8ByteNum * EIGHT)+SET_CGRAM_ADDRESS ) ;

	LCD_voidWriteCommand( Local_u8CGramAddrss  ) ;


	for(counter=ZERO;counter<EIGHT;counter++)
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	8f 5f       	subi	r24, 0xFF	; 255
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	88 30       	cpi	r24, 0x08	; 8
    1ef4:	78 f3       	brcs	.-34     	; 0x1ed4 <LCD_voidWriteSpecialCharToCGRAM+0x36>
	{
		LCD_voidWriteData(copy_u8data[counter]);
	}

	//Reset cursor
	LCD_voidGoToXY(0,0);
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	60 e0       	ldi	r22, 0x00	; 0
    1efa:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_voidGoToXY>

}
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <LCD_voidDisplaySpecialChar>:

/***********************************************************************************/

void LCD_voidDisplaySpecialChar(u8 copy_u8ByteNum )
{
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	0f 92       	push	r0
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteData(copy_u8ByteNum);
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_voidWriteData>

}
    1f20:	0f 90       	pop	r0
    1f22:	cf 91       	pop	r28
    1f24:	df 91       	pop	r29
    1f26:	08 95       	ret

00001f28 <OverFlowFunction>:

u32 OverFlowCounter=0;

u8 edge = RISING_EDGE, RemainingTime=0;

void OverFlowFunction(){
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
	OverFlowCounter++;
    1f30:	80 91 a5 00 	lds	r24, 0x00A5
    1f34:	90 91 a6 00 	lds	r25, 0x00A6
    1f38:	a0 91 a7 00 	lds	r26, 0x00A7
    1f3c:	b0 91 a8 00 	lds	r27, 0x00A8
    1f40:	01 96       	adiw	r24, 0x01	; 1
    1f42:	a1 1d       	adc	r26, r1
    1f44:	b1 1d       	adc	r27, r1
    1f46:	80 93 a5 00 	sts	0x00A5, r24
    1f4a:	90 93 a6 00 	sts	0x00A6, r25
    1f4e:	a0 93 a7 00 	sts	0x00A7, r26
    1f52:	b0 93 a8 00 	sts	0x00A8, r27
}
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <EXTINT_voidTriger>:

void EXTINT_voidTriger(){
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62

	State = TRUE;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	80 93 98 00 	sts	0x0098, r24

	//rising edge state
	if (edge==RISING_EDGE){
    1f6a:	80 91 7c 00 	lds	r24, 0x007C
    1f6e:	81 30       	cpi	r24, 0x01	; 1
    1f70:	51 f4       	brne	.+20     	; 0x1f86 <EXTINT_voidTriger+0x2a>

		/*LowState = FALSE;

		RisingState = TRUE;*/

		HighState = TRUE;
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	80 93 96 00 	sts	0x0096, r24

		TIMER0_VoidSetPreload(0);

		OverFlowCounter = 0;*/

		EXTINT_voidInit(EXT0_ID,FALLING_EDGE);
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	60 e0       	ldi	r22, 0x00	; 0
    1f7c:	0e 94 32 07 	call	0xe64	; 0xe64 <EXTINT_voidInit>

		edge = FALLING_EDGE;
    1f80:	10 92 7c 00 	sts	0x007C, r1
    1f84:	0e c0       	rjmp	.+28     	; 0x1fa2 <EXTINT_voidTriger+0x46>

	}

	//falling edge state
	else if (edge==FALLING_EDGE){
    1f86:	80 91 7c 00 	lds	r24, 0x007C
    1f8a:	88 23       	and	r24, r24
    1f8c:	51 f4       	brne	.+20     	; 0x1fa2 <EXTINT_voidTriger+0x46>

/*		HighState = FALSE;

		FallingState = TRUE;*/

		LowState = TRUE;
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	80 93 97 00 	sts	0x0097, r24

		/*RemainingTime = TIMER0_VoidVal();

		TotalONTime = (RemainingTime + (256*OverFlowCounter) );*/

		EXTINT_voidInit(EXT0_ID,RISING_EDGE);
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	61 e0       	ldi	r22, 0x01	; 1
    1f98:	0e 94 32 07 	call	0xe64	; 0xe64 <EXTINT_voidInit>

		edge = RISING_EDGE;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	80 93 7c 00 	sts	0x007C, r24
	}
}
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <main>:

int main(){
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	a3 97       	sbiw	r28, 0x23	; 35
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61

	//LCD

	LCD_voidInit();
    1fbc:	0e 94 35 0c 	call	0x186a	; 0x186a <LCD_voidInit>

	u8 LCDLocation = 0;
    1fc0:	19 82       	std	Y+1, r1	; 0x01
	   (u8)0b00000000,
	   (u8)0b00000000,
	   (u8)0b00000000,
	   (u8)0b00000000,
	   (u8)0b00000000
	};
    1fc2:	88 e0       	ldi	r24, 0x08	; 8
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	32 96       	adiw	r30, 0x02	; 2
    1fc8:	df 01       	movw	r26, r30
    1fca:	98 2f       	mov	r25, r24
    1fcc:	1d 92       	st	X+, r1
    1fce:	9a 95       	dec	r25
    1fd0:	e9 f7       	brne	.-6      	; 0x1fcc <main+0x24>
    1fd2:	8f ef       	ldi	r24, 0xFF	; 255
    1fd4:	8a 83       	std	Y+2, r24	; 0x02
		(u8)0b00000000,
		(u8)0b00000000,
		(u8)0b00000000,
		(u8)0b11111111,
		(u8)0b11111111
	};
    1fd6:	de 01       	movw	r26, r28
    1fd8:	1a 96       	adiw	r26, 0x0a	; 10
    1fda:	bb 8f       	std	Y+27, r27	; 0x1b
    1fdc:	aa 8f       	std	Y+26, r26	; 0x1a
    1fde:	e5 e8       	ldi	r30, 0x85	; 133
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	fd 8f       	std	Y+29, r31	; 0x1d
    1fe4:	ec 8f       	std	Y+28, r30	; 0x1c
    1fe6:	f8 e0       	ldi	r31, 0x08	; 8
    1fe8:	fe 8f       	std	Y+30, r31	; 0x1e
    1fea:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1fec:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1fee:	0c 90       	ld	r0, X
    1ff0:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1ff2:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1ff4:	31 96       	adiw	r30, 0x01	; 1
    1ff6:	fd 8f       	std	Y+29, r31	; 0x1d
    1ff8:	ec 8f       	std	Y+28, r30	; 0x1c
    1ffa:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1ffc:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1ffe:	0c 92       	st	X, r0
    2000:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2002:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2004:	31 96       	adiw	r30, 0x01	; 1
    2006:	fb 8f       	std	Y+27, r31	; 0x1b
    2008:	ea 8f       	std	Y+26, r30	; 0x1a
    200a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    200c:	f1 50       	subi	r31, 0x01	; 1
    200e:	fe 8f       	std	Y+30, r31	; 0x1e
    2010:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2012:	88 23       	and	r24, r24
    2014:	51 f7       	brne	.-44     	; 0x1fea <main+0x42>
		(u8)0b11111111,
		(u8)0b11111111,
		(u8)0b11111111,
		(u8)0b11111111,
		(u8)0b11111111
	};
    2016:	de 01       	movw	r26, r28
    2018:	52 96       	adiw	r26, 0x12	; 18
    201a:	b8 a3       	std	Y+32, r27	; 0x20
    201c:	af 8f       	std	Y+31, r26	; 0x1f
    201e:	ed e7       	ldi	r30, 0x7D	; 125
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	fa a3       	std	Y+34, r31	; 0x22
    2024:	e9 a3       	std	Y+33, r30	; 0x21
    2026:	f8 e0       	ldi	r31, 0x08	; 8
    2028:	fb a3       	std	Y+35, r31	; 0x23
    202a:	a9 a1       	ldd	r26, Y+33	; 0x21
    202c:	ba a1       	ldd	r27, Y+34	; 0x22
    202e:	0c 90       	ld	r0, X
    2030:	e9 a1       	ldd	r30, Y+33	; 0x21
    2032:	fa a1       	ldd	r31, Y+34	; 0x22
    2034:	31 96       	adiw	r30, 0x01	; 1
    2036:	fa a3       	std	Y+34, r31	; 0x22
    2038:	e9 a3       	std	Y+33, r30	; 0x21
    203a:	af 8d       	ldd	r26, Y+31	; 0x1f
    203c:	b8 a1       	ldd	r27, Y+32	; 0x20
    203e:	0c 92       	st	X, r0
    2040:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2042:	f8 a1       	ldd	r31, Y+32	; 0x20
    2044:	31 96       	adiw	r30, 0x01	; 1
    2046:	f8 a3       	std	Y+32, r31	; 0x20
    2048:	ef 8f       	std	Y+31, r30	; 0x1f
    204a:	fb a1       	ldd	r31, Y+35	; 0x23
    204c:	f1 50       	subi	r31, 0x01	; 1
    204e:	fb a3       	std	Y+35, r31	; 0x23
    2050:	8b a1       	ldd	r24, Y+35	; 0x23
    2052:	88 23       	and	r24, r24
    2054:	51 f7       	brne	.-44     	; 0x202a <main+0x82>
		(u8)0b11111111
	};*/

	//EXTINT0

	DIO_voidSetPinDirection(PORTD_ID,PIN2,PIN_INPUT);
    2056:	83 e0       	ldi	r24, 0x03	; 3
    2058:	62 e0       	ldi	r22, 0x02	; 2
    205a:	40 e0       	ldi	r20, 0x00	; 0
    205c:	0e 94 2f 09 	call	0x125e	; 0x125e <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(PORTD_ID,PIN2,PIN_HIGH);
    2060:	83 e0       	ldi	r24, 0x03	; 3
    2062:	62 e0       	ldi	r22, 0x02	; 2
    2064:	41 e0       	ldi	r20, 0x01	; 1
    2066:	0e 94 33 0a 	call	0x1466	; 0x1466 <DIO_voidSetPinValue>

	EXTINT_voidInit(EXT0_ID,RISING_EDGE);
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	61 e0       	ldi	r22, 0x01	; 1
    206e:	0e 94 32 07 	call	0xe64	; 0xe64 <EXTINT_voidInit>

	EXTINT_voidSetCallBack(EXTINT_voidTriger,EXT0_ID);
    2072:	8e ea       	ldi	r24, 0xAE	; 174
    2074:	9f e0       	ldi	r25, 0x0F	; 15
    2076:	60 e0       	ldi	r22, 0x00	; 0
    2078:	0e 94 d7 07 	call	0xfae	; 0xfae <EXTINT_voidSetCallBack>

	//Timer0
	TIMER0_VoidInit();
    207c:	0e 94 92 06 	call	0xd24	; 0xd24 <TIMER0_VoidInit>

	TIMER_voidSetCallBack(OverFlowFunction);
    2080:	84 e9       	ldi	r24, 0x94	; 148
    2082:	9f e0       	ldi	r25, 0x0F	; 15
    2084:	0e 94 4f 06 	call	0xc9e	; 0xc9e <TIMER_voidSetCallBack>

	TIMER0_VoidStart();
    2088:	0e 94 b7 06 	call	0xd6e	; 0xd6e <TIMER0_VoidStart>

	//Global Interrupt Enable
	GIE_Enable();
    208c:	0e 94 16 07 	call	0xe2c	; 0xe2c <GIE_Enable>

	while (1){

		//Send the custom characters to the CGRAM
		LCD_voidWriteSpecialCharToCGRAM(High,HIGH_ADDRESS);
    2090:	ce 01       	movw	r24, r28
    2092:	02 96       	adiw	r24, 0x02	; 2
    2094:	61 e0       	ldi	r22, 0x01	; 1
    2096:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <LCD_voidWriteSpecialCharToCGRAM>

		/*LCD_voidWriteSpecialCharToCGRAM(RISING_ADDRESS,LOW_ADDRESS);*/

		LCD_voidWriteSpecialCharToCGRAM(Low,LOW_ADDRESS);
    209a:	ce 01       	movw	r24, r28
    209c:	0a 96       	adiw	r24, 0x0a	; 10
    209e:	62 e0       	ldi	r22, 0x02	; 2
    20a0:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <LCD_voidWriteSpecialCharToCGRAM>

		LCD_voidWriteSpecialCharToCGRAM(ChangingState,FALLING_ADDRESS);
    20a4:	ce 01       	movw	r24, r28
    20a6:	42 96       	adiw	r24, 0x12	; 18
    20a8:	63 e0       	ldi	r22, 0x03	; 3
    20aa:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <LCD_voidWriteSpecialCharToCGRAM>

/*		LCD_voidWriteSpecialCharToCGRAM(Rising,RISING_ADDRESS);*/

		//Frequency
		LCD_voidWriteString("F: ");
    20ae:	80 e6       	ldi	r24, 0x60	; 96
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_voidWriteString>

		LCD_voidWriteNumber((u8)((1 / DutyCycle) *1000));
    20b6:	20 91 a1 00 	lds	r18, 0x00A1
    20ba:	30 91 a2 00 	lds	r19, 0x00A2
    20be:	40 91 a3 00 	lds	r20, 0x00A3
    20c2:	50 91 a4 00 	lds	r21, 0x00A4
    20c6:	60 e0       	ldi	r22, 0x00	; 0
    20c8:	70 e0       	ldi	r23, 0x00	; 0
    20ca:	80 e8       	ldi	r24, 0x80	; 128
    20cc:	9f e3       	ldi	r25, 0x3F	; 63
    20ce:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	bc 01       	movw	r22, r24
    20d8:	cd 01       	movw	r24, r26
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	4a e7       	ldi	r20, 0x7A	; 122
    20e0:	54 e4       	ldi	r21, 0x44	; 68
    20e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	bc 01       	movw	r22, r24
    20ec:	cd 01       	movw	r24, r26
    20ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	88 2f       	mov	r24, r24
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	a0 e0       	ldi	r26, 0x00	; 0
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	bc 01       	movw	r22, r24
    2100:	cd 01       	movw	r24, r26
    2102:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <LCD_voidWriteNumber>

		LCD_voidWriteString(" KHz");
    2106:	84 e6       	ldi	r24, 0x64	; 100
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_voidWriteString>

		//Duty Cycle
		LCD_voidGoToXY(0,12);
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	6c e0       	ldi	r22, 0x0C	; 12
    2112:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_voidGoToXY>

		LCD_voidWriteString("D: ");
    2116:	89 e6       	ldi	r24, 0x69	; 105
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_voidWriteString>

		LCD_voidWriteNumber((u8)DutyCycle);
    211e:	80 91 a1 00 	lds	r24, 0x00A1
    2122:	90 91 a2 00 	lds	r25, 0x00A2
    2126:	a0 91 a3 00 	lds	r26, 0x00A3
    212a:	b0 91 a4 00 	lds	r27, 0x00A4
    212e:	bc 01       	movw	r22, r24
    2130:	cd 01       	movw	r24, r26
    2132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	88 2f       	mov	r24, r24
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	a0 e0       	ldi	r26, 0x00	; 0
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	bc 01       	movw	r22, r24
    2144:	cd 01       	movw	r24, r26
    2146:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <LCD_voidWriteNumber>

		LCD_voidWriteString(" %");
    214a:	8d e6       	ldi	r24, 0x6D	; 109
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_voidWriteString>

		//Illustration
		LCD_voidGoToXY(2,LCDLocation);
    2152:	82 e0       	ldi	r24, 0x02	; 2
    2154:	69 81       	ldd	r22, Y+1	; 0x01
    2156:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <LCD_voidGoToXY>

		if(State==TRUE){
    215a:	80 91 98 00 	lds	r24, 0x0098
    215e:	81 30       	cpi	r24, 0x01	; 1
    2160:	41 f4       	brne	.+16     	; 0x2172 <main+0x1ca>
			/*LCD_voidDisplaySpecialChar(RISING_ADDRESS);*/

			LCD_voidDisplaySpecialChar(FALLING_ADDRESS);
    2162:	83 e0       	ldi	r24, 0x03	; 3
    2164:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <LCD_voidDisplaySpecialChar>
			LCDLocation++;
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	8f 5f       	subi	r24, 0xFF	; 255
    216c:	89 83       	std	Y+1, r24	; 0x01
			State = FALSE;
    216e:	10 92 98 00 	sts	0x0098, r1
			LCD_voidDisplaySpecialChar(FALLING_ADDRESS);
			LCDLocation++;
			FallingState = FALSE;
		}*/

		if(HighState==TRUE){
    2172:	80 91 96 00 	lds	r24, 0x0096
    2176:	81 30       	cpi	r24, 0x01	; 1
    2178:	31 f4       	brne	.+12     	; 0x2186 <main+0x1de>
			LCD_voidDisplaySpecialChar(HIGH_ADDRESS);
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <LCD_voidDisplaySpecialChar>
			LCDLocation++;
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	8f 5f       	subi	r24, 0xFF	; 255
    2184:	89 83       	std	Y+1, r24	; 0x01
		}

		if(LowState==TRUE){
    2186:	80 91 97 00 	lds	r24, 0x0097
    218a:	81 30       	cpi	r24, 0x01	; 1
    218c:	31 f4       	brne	.+12     	; 0x219a <main+0x1f2>
			LCD_voidDisplaySpecialChar(LOW_ADDRESS);
    218e:	82 e0       	ldi	r24, 0x02	; 2
    2190:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <LCD_voidDisplaySpecialChar>
			LCDLocation++;
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	8f 5f       	subi	r24, 0xFF	; 255
    2198:	89 83       	std	Y+1, r24	; 0x01
		}


		if(LCDLocation>=19){
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	83 31       	cpi	r24, 0x13	; 19
    219e:	08 f4       	brcc	.+2      	; 0x21a2 <main+0x1fa>
    21a0:	77 cf       	rjmp	.-274    	; 0x2090 <main+0xe8>
			LCDLocation = 0;
    21a2:	19 82       	std	Y+1, r1	; 0x01
    21a4:	75 cf       	rjmp	.-278    	; 0x2090 <main+0xe8>

000021a6 <__udivmodsi4>:
    21a6:	a1 e2       	ldi	r26, 0x21	; 33
    21a8:	1a 2e       	mov	r1, r26
    21aa:	aa 1b       	sub	r26, r26
    21ac:	bb 1b       	sub	r27, r27
    21ae:	fd 01       	movw	r30, r26
    21b0:	0d c0       	rjmp	.+26     	; 0x21cc <__udivmodsi4_ep>

000021b2 <__udivmodsi4_loop>:
    21b2:	aa 1f       	adc	r26, r26
    21b4:	bb 1f       	adc	r27, r27
    21b6:	ee 1f       	adc	r30, r30
    21b8:	ff 1f       	adc	r31, r31
    21ba:	a2 17       	cp	r26, r18
    21bc:	b3 07       	cpc	r27, r19
    21be:	e4 07       	cpc	r30, r20
    21c0:	f5 07       	cpc	r31, r21
    21c2:	20 f0       	brcs	.+8      	; 0x21cc <__udivmodsi4_ep>
    21c4:	a2 1b       	sub	r26, r18
    21c6:	b3 0b       	sbc	r27, r19
    21c8:	e4 0b       	sbc	r30, r20
    21ca:	f5 0b       	sbc	r31, r21

000021cc <__udivmodsi4_ep>:
    21cc:	66 1f       	adc	r22, r22
    21ce:	77 1f       	adc	r23, r23
    21d0:	88 1f       	adc	r24, r24
    21d2:	99 1f       	adc	r25, r25
    21d4:	1a 94       	dec	r1
    21d6:	69 f7       	brne	.-38     	; 0x21b2 <__udivmodsi4_loop>
    21d8:	60 95       	com	r22
    21da:	70 95       	com	r23
    21dc:	80 95       	com	r24
    21de:	90 95       	com	r25
    21e0:	9b 01       	movw	r18, r22
    21e2:	ac 01       	movw	r20, r24
    21e4:	bd 01       	movw	r22, r26
    21e6:	cf 01       	movw	r24, r30
    21e8:	08 95       	ret

000021ea <__prologue_saves__>:
    21ea:	2f 92       	push	r2
    21ec:	3f 92       	push	r3
    21ee:	4f 92       	push	r4
    21f0:	5f 92       	push	r5
    21f2:	6f 92       	push	r6
    21f4:	7f 92       	push	r7
    21f6:	8f 92       	push	r8
    21f8:	9f 92       	push	r9
    21fa:	af 92       	push	r10
    21fc:	bf 92       	push	r11
    21fe:	cf 92       	push	r12
    2200:	df 92       	push	r13
    2202:	ef 92       	push	r14
    2204:	ff 92       	push	r15
    2206:	0f 93       	push	r16
    2208:	1f 93       	push	r17
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	ca 1b       	sub	r28, r26
    2214:	db 0b       	sbc	r29, r27
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	09 94       	ijmp

00002222 <__epilogue_restores__>:
    2222:	2a 88       	ldd	r2, Y+18	; 0x12
    2224:	39 88       	ldd	r3, Y+17	; 0x11
    2226:	48 88       	ldd	r4, Y+16	; 0x10
    2228:	5f 84       	ldd	r5, Y+15	; 0x0f
    222a:	6e 84       	ldd	r6, Y+14	; 0x0e
    222c:	7d 84       	ldd	r7, Y+13	; 0x0d
    222e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2230:	9b 84       	ldd	r9, Y+11	; 0x0b
    2232:	aa 84       	ldd	r10, Y+10	; 0x0a
    2234:	b9 84       	ldd	r11, Y+9	; 0x09
    2236:	c8 84       	ldd	r12, Y+8	; 0x08
    2238:	df 80       	ldd	r13, Y+7	; 0x07
    223a:	ee 80       	ldd	r14, Y+6	; 0x06
    223c:	fd 80       	ldd	r15, Y+5	; 0x05
    223e:	0c 81       	ldd	r16, Y+4	; 0x04
    2240:	1b 81       	ldd	r17, Y+3	; 0x03
    2242:	aa 81       	ldd	r26, Y+2	; 0x02
    2244:	b9 81       	ldd	r27, Y+1	; 0x01
    2246:	ce 0f       	add	r28, r30
    2248:	d1 1d       	adc	r29, r1
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	ed 01       	movw	r28, r26
    2256:	08 95       	ret

00002258 <_exit>:
    2258:	f8 94       	cli

0000225a <__stop_program>:
    225a:	ff cf       	rjmp	.-2      	; 0x225a <__stop_program>
