
MainCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002764  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  00002764  000027f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800186  00800186  0000291e  2**0
                  ALLOC
  3 .stab         00001f50  00000000  00000000  00002920  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012db  00000000  00000000  00004870  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00005ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00005edd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000082e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000966e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a844  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000aa04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000acfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b668  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <__vector_1>
       8:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__vector_2>
       c:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3a       	cpi	r26, 0xA1	; 161
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 11 	call	0x222e	; 0x222e <main>
      8a:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 79 13 	jmp	0x26f2	; 0x26f2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e7       	ldi	r26, 0x70	; 112
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 95 13 	jmp	0x272a	; 0x272a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 85 13 	jmp	0x270a	; 0x270a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 85 13 	jmp	0x270a	; 0x270a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 79 13 	jmp	0x26f2	; 0x26f2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 95 13 	jmp	0x272a	; 0x272a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e7       	ldi	r22, 0x70	; 112
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9d 13 	jmp	0x273a	; 0x273a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 85 13 	jmp	0x270a	; 0x270a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 85 13 	jmp	0x270a	; 0x270a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 85 13 	jmp	0x270a	; 0x270a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 9d 13 	jmp	0x273a	; 0x273a <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 58       	subi	r30, 0x88	; 136
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <TIMER_voidSetCallBack>:
//global pointer to fun
static void (*TIMER0_callBack)(void);

//call back fun
void TIMER_voidSetCallBack(  void (*ptr_timer)(void) )
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <TIMER_voidSetCallBack+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01

	if(ptr_timer!=NULL)
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	31 f0       	breq	.+12     	; 0xe50 <TIMER_voidSetCallBack+0x22>
	{
		TIMER0_callBack=ptr_timer ;
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	9a 81       	ldd	r25, Y+2	; 0x02
     e48:	90 93 87 01 	sts	0x0187, r25
     e4c:	80 93 86 01 	sts	0x0186, r24
	}
}
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <__vector_11>:


#if MOOD== NORMAL_MOOD
void __vector_11 () __attribute__  ((signal));
void __vector_11 ()
{
     e5a:	1f 92       	push	r1
     e5c:	0f 92       	push	r0
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	0f 92       	push	r0
     e62:	11 24       	eor	r1, r1
     e64:	2f 93       	push	r18
     e66:	3f 93       	push	r19
     e68:	4f 93       	push	r20
     e6a:	5f 93       	push	r21
     e6c:	6f 93       	push	r22
     e6e:	7f 93       	push	r23
     e70:	8f 93       	push	r24
     e72:	9f 93       	push	r25
     e74:	af 93       	push	r26
     e76:	bf 93       	push	r27
     e78:	ef 93       	push	r30
     e7a:	ff 93       	push	r31
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62

	TIMER0_callBack();
     e84:	e0 91 86 01 	lds	r30, 0x0186
     e88:	f0 91 87 01 	lds	r31, 0x0187
     e8c:	09 95       	icall

}
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	ff 91       	pop	r31
     e94:	ef 91       	pop	r30
     e96:	bf 91       	pop	r27
     e98:	af 91       	pop	r26
     e9a:	9f 91       	pop	r25
     e9c:	8f 91       	pop	r24
     e9e:	7f 91       	pop	r23
     ea0:	6f 91       	pop	r22
     ea2:	5f 91       	pop	r21
     ea4:	4f 91       	pop	r20
     ea6:	3f 91       	pop	r19
     ea8:	2f 91       	pop	r18
     eaa:	0f 90       	pop	r0
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	0f 90       	pop	r0
     eb0:	1f 90       	pop	r1
     eb2:	18 95       	reti

00000eb4 <TIMER0_VoidInit>:


/**********************************************************************************
 *********************************************************************************/
void TIMER0_VoidInit(void)
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62

/**************************************/
#if MOOD==NORMAL_MOOD
/**************************************/
	TCCR0_REG->TCCR0_WGM00 = ZERO;
     ebc:	e3 e5       	ldi	r30, 0x53	; 83
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	8f 7b       	andi	r24, 0xBF	; 191
     ec4:	80 83       	st	Z, r24
	TCCR0_REG->TCCR0_WGM01 = ZERO;
     ec6:	e3 e5       	ldi	r30, 0x53	; 83
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	87 7f       	andi	r24, 0xF7	; 247
     ece:	80 83       	st	Z, r24
	TCNT0_REG=PRELOAD;
     ed0:	e2 e5       	ldi	r30, 0x52	; 82
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	10 82       	st	Z, r1
	/*------------------------------------*/
#if ISR == ISR_EN
	/*enabel  NORMAL_MOOD interrupt*/
	TIMSK_REG->TIMSK_TOIE0 = ONE ;
     ed6:	e9 e5       	ldi	r30, 0x59	; 89
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	81 60       	ori	r24, 0x01	; 1
     ede:	80 83       	st	Z, r24
#endif /*Related to (#if MOOD==NORMAL_MOOD) and (#elif MOOD==CTC_MOOD) and (#elif MOOD==PWM_MOOD) */
	/**************************************/



}
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <TIMER0_VoidStop>:

/*****************************************************************************/
void TIMER0_VoidStop(void)
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG->TCCR0_CS0=No_FREQ;
     eee:	e3 e5       	ldi	r30, 0x53	; 83
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	88 7f       	andi	r24, 0xF8	; 248
     ef6:	80 83       	st	Z, r24

}
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <TIMER0_VoidStart>:


/*****************************************************************************/
void TIMER0_VoidStart(void)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62

	TCCR0_REG->TCCR0_CS0=PRESCALER;
     f06:	e3 e5       	ldi	r30, 0x53	; 83
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	88 7f       	andi	r24, 0xF8	; 248
     f0e:	83 60       	ori	r24, 0x03	; 3
     f10:	80 83       	st	Z, r24

}
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	08 95       	ret

00000f18 <TIMER0_VoidSetPreload>:

/*****************************************************************************/
void TIMER0_VoidSetPreload(u8 copy_u8PRELOAD )
{
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	0f 92       	push	r0
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	89 83       	std	Y+1, r24	; 0x01

	TCNT0_REG=copy_u8PRELOAD;
     f24:	e2 e5       	ldi	r30, 0x52	; 82
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	80 83       	st	Z, r24
}
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <TIMER0_VoidVal>:

/*****************************************************************************/

u8 TIMER0_VoidVal(void )
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62

	return  TCNT0_REG ;
     f3c:	e2 e5       	ldi	r30, 0x52	; 82
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
}
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <TIMER0_VoidSetPWMCompareMatch>:

/*****************************************************************************/
void TIMER0_VoidSetPWMCompareMatch(u8 copy_u8Val )
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	0f 92       	push	r0
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	89 83       	std	Y+1, r24	; 0x01

#elif PWM_COMPARE_MATCH == SET_ON_COMPARE_MATCH_CLR_ON_TOP
	//OCR0_REG = (255) - ( ( (f32)copy_u8Val / 100 ) * (255) ) ;
	  OCR0_REG = (255) - ( ( (u32)copy_u8Val * 255 ) / (100) ) ;
#endif
}
     f54:	0f 90       	pop	r0
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	08 95       	ret

00000f5c <WDT_VoidEnabel>:

/*
 * watch dog timer IN TIMER_1
 */
void WDT_VoidEnabel(void )
{
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62

	//SET_BIT(WDTCR_,3);
	WDTCR_REG->WDTCR_WDE=1;
     f64:	e1 e4       	ldi	r30, 0x41	; 65
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	88 60       	ori	r24, 0x08	; 8
     f6c:	80 83       	st	Z, r24
}
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <WDT_VoidDisEnabel>:

void WDT_VoidDisEnabel(void )
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
//	WDTCR_==(1<<4)|(1<<3);
//	WDTCR_=0 ;

WDTCR_REG->WDTCR_Data=(1<<4)|(1<<3);
     f7c:	e1 e4       	ldi	r30, 0x41	; 65
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	88 e1       	ldi	r24, 0x18	; 24
     f82:	80 83       	st	Z, r24
WDTCR_REG->WDTCR_WDE=0;
     f84:	e1 e4       	ldi	r30, 0x41	; 65
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	87 7f       	andi	r24, 0xF7	; 247
     f8c:	80 83       	st	Z, r24
}
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <WDT_VoidSleep>:
void WDT_VoidSleep(u8 sleep_time )
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	0f 92       	push	r0
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	89 83       	std	Y+1, r24	; 0x01

	//WDTCR_=(WDTCR_&0xF8) |sleep_time ;

	WDTCR_REG->WDTCR_WDP=sleep_time;
     fa0:	e1 e4       	ldi	r30, 0x41	; 65
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	87 70       	andi	r24, 0x07	; 7
     fa8:	98 2f       	mov	r25, r24
     faa:	97 70       	andi	r25, 0x07	; 7
     fac:	80 81       	ld	r24, Z
     fae:	88 7f       	andi	r24, 0xF8	; 248
     fb0:	89 2b       	or	r24, r25
     fb2:	80 83       	st	Z, r24

}
     fb4:	0f 90       	pop	r0
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <GIE_Enable>:
#include "GIE_Interface.h"
#include "GIE_private.h"


void GIE_Enable(void)
{
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     SET_BIT(GIE_SREG,I_bit);
     fc4:	af e5       	ldi	r26, 0x5F	; 95
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	ef e5       	ldi	r30, 0x5F	; 95
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	80 68       	ori	r24, 0x80	; 128
     fd0:	8c 93       	st	X, r24

}
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	08 95       	ret

00000fd8 <GIE_Disable>:

void GIE_Disable(void)
{
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
 CLR_BIT(GIE_SREG,I_bit);
     fe0:	af e5       	ldi	r26, 0x5F	; 95
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	ef e5       	ldi	r30, 0x5F	; 95
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	8f 77       	andi	r24, 0x7F	; 127
     fec:	8c 93       	st	X, r24

}
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <EXTINT_voidInit>:



#ifdef EXT_Init_NORMAL
void EXTINT_voidInit(u8 copy_u8ExtNum,u8 copy_u8ControlSens)
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <EXTINT_voidInit+0x6>
     ffa:	00 d0       	rcall	.+0      	; 0xffc <EXTINT_voidInit+0x8>
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	89 83       	std	Y+1, r24	; 0x01
    1002:	6a 83       	std	Y+2, r22	; 0x02

	switch(copy_u8ExtNum)
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	3c 83       	std	Y+4, r19	; 0x04
    100c:	2b 83       	std	Y+3, r18	; 0x03
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	9c 81       	ldd	r25, Y+4	; 0x04
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	91 05       	cpc	r25, r1
    1016:	d9 f1       	breq	.+118    	; 0x108e <EXTINT_voidInit+0x9a>
    1018:	2b 81       	ldd	r18, Y+3	; 0x03
    101a:	3c 81       	ldd	r19, Y+4	; 0x04
    101c:	22 30       	cpi	r18, 0x02	; 2
    101e:	31 05       	cpc	r19, r1
    1020:	09 f4       	brne	.+2      	; 0x1024 <EXTINT_voidInit+0x30>
    1022:	65 c0       	rjmp	.+202    	; 0x10ee <EXTINT_voidInit+0xfa>
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	9c 81       	ldd	r25, Y+4	; 0x04
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	09 f0       	breq	.+2      	; 0x102e <EXTINT_voidInit+0x3a>
    102c:	81 c0       	rjmp	.+258    	; 0x1130 <EXTINT_voidInit+0x13c>
	{
	case EXT0_ID :

		DIO_voidSetPinDirection(PORTD_ID,PIN2,PIN_INPUT);
    102e:	83 e0       	ldi	r24, 0x03	; 3
    1030:	62 e0       	ldi	r22, 0x02	; 2
    1032:	40 e0       	ldi	r20, 0x00	; 0
    1034:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_voidSetPinDirection>

		if(copy_u8ControlSens==FALLING_EDGE)
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	88 23       	and	r24, r24
    103c:	79 f4       	brne	.+30     	; 0x105c <EXTINT_voidInit+0x68>
		{

			CLR_BIT(MCUCR_REG,MCUCR_ISC00);
    103e:	a5 e5       	ldi	r26, 0x55	; 85
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e5 e5       	ldi	r30, 0x55	; 85
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	8e 7f       	andi	r24, 0xFE	; 254
    104a:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC01);
    104c:	a5 e5       	ldi	r26, 0x55	; 85
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e5 e5       	ldi	r30, 0x55	; 85
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	82 60       	ori	r24, 0x02	; 2
    1058:	8c 93       	st	X, r24
    105a:	11 c0       	rjmp	.+34     	; 0x107e <EXTINT_voidInit+0x8a>

		}


		else if(copy_u8ControlSens==RISING_EDGE)
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	71 f4       	brne	.+28     	; 0x107e <EXTINT_voidInit+0x8a>
		{
			SET_BIT(MCUCR_REG,MCUCR_ISC00);
    1062:	a5 e5       	ldi	r26, 0x55	; 85
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e5 e5       	ldi	r30, 0x55	; 85
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	81 60       	ori	r24, 0x01	; 1
    106e:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC01);
    1070:	a5 e5       	ldi	r26, 0x55	; 85
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e5 e5       	ldi	r30, 0x55	; 85
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	82 60       	ori	r24, 0x02	; 2
    107c:	8c 93       	st	X, r24
		}

		SET_BIT(GICR_REG,GICR_INT0);
    107e:	ab e5       	ldi	r26, 0x5B	; 91
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	eb e5       	ldi	r30, 0x5B	; 91
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	80 64       	ori	r24, 0x40	; 64
    108a:	8c 93       	st	X, r24
    108c:	51 c0       	rjmp	.+162    	; 0x1130 <EXTINT_voidInit+0x13c>
		break ;


	case EXT1_ID :

		DIO_voidSetPinDirection(PORTD_ID,PIN3,PIN_INPUT);
    108e:	83 e0       	ldi	r24, 0x03	; 3
    1090:	63 e0       	ldi	r22, 0x03	; 3
    1092:	40 e0       	ldi	r20, 0x00	; 0
    1094:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_voidSetPinDirection>

		if(copy_u8ControlSens==FALLING_EDGE)
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	88 23       	and	r24, r24
    109c:	79 f4       	brne	.+30     	; 0x10bc <EXTINT_voidInit+0xc8>
		{

			CLR_BIT(MCUCR_REG,MCUCR_ISC10);
    109e:	a5 e5       	ldi	r26, 0x55	; 85
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e5 e5       	ldi	r30, 0x55	; 85
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8b 7f       	andi	r24, 0xFB	; 251
    10aa:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC11);
    10ac:	a5 e5       	ldi	r26, 0x55	; 85
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e5 e5       	ldi	r30, 0x55	; 85
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	88 60       	ori	r24, 0x08	; 8
    10b8:	8c 93       	st	X, r24
    10ba:	11 c0       	rjmp	.+34     	; 0x10de <EXTINT_voidInit+0xea>

		}

		else if(copy_u8ControlSens==RISING_EDGE)
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	71 f4       	brne	.+28     	; 0x10de <EXTINT_voidInit+0xea>
		{
			SET_BIT(MCUCR_REG,MCUCR_ISC10);
    10c2:	a5 e5       	ldi	r26, 0x55	; 85
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e5 e5       	ldi	r30, 0x55	; 85
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	84 60       	ori	r24, 0x04	; 4
    10ce:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC11);
    10d0:	a5 e5       	ldi	r26, 0x55	; 85
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e5 e5       	ldi	r30, 0x55	; 85
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	88 60       	ori	r24, 0x08	; 8
    10dc:	8c 93       	st	X, r24
		}
		SET_BIT(GICR_REG,GICR_INT1);
    10de:	ab e5       	ldi	r26, 0x5B	; 91
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	eb e5       	ldi	r30, 0x5B	; 91
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	80 68       	ori	r24, 0x80	; 128
    10ea:	8c 93       	st	X, r24
    10ec:	21 c0       	rjmp	.+66     	; 0x1130 <EXTINT_voidInit+0x13c>

		break ;

	case EXT2_ID :

		DIO_voidSetPinDirection(PORTB_ID,PIN2,PIN_INPUT);
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	62 e0       	ldi	r22, 0x02	; 2
    10f2:	40 e0       	ldi	r20, 0x00	; 0
    10f4:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_voidSetPinDirection>

		if(copy_u8ControlSens==FALLING_EDGE)
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	88 23       	and	r24, r24
    10fc:	41 f4       	brne	.+16     	; 0x110e <EXTINT_voidInit+0x11a>
		{
			CLR_BIT(MCUCSR_REG,MCUCSR_ISC2);
    10fe:	a4 e5       	ldi	r26, 0x54	; 84
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e4 e5       	ldi	r30, 0x54	; 84
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	8f 7b       	andi	r24, 0xBF	; 191
    110a:	8c 93       	st	X, r24
    110c:	0a c0       	rjmp	.+20     	; 0x1122 <EXTINT_voidInit+0x12e>
		}

		else if(copy_u8ControlSens==RISING_EDGE)
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	81 30       	cpi	r24, 0x01	; 1
    1112:	39 f4       	brne	.+14     	; 0x1122 <EXTINT_voidInit+0x12e>
		{
			SET_BIT(MCUCSR_REG,MCUCSR_ISC2);
    1114:	a4 e5       	ldi	r26, 0x54	; 84
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e4 e5       	ldi	r30, 0x54	; 84
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	80 64       	ori	r24, 0x40	; 64
    1120:	8c 93       	st	X, r24
		}
		SET_BIT(GICR_REG,GICR_INT2);
    1122:	ab e5       	ldi	r26, 0x5B	; 91
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	eb e5       	ldi	r30, 0x5B	; 91
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	80 62       	ori	r24, 0x20	; 32
    112e:	8c 93       	st	X, r24

		break ;

	}
}
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <EXTINT_voidSetCallBack>:




void EXTINT_voidSetCallBack (  void (*ptr_ext)(void) ,u8 copy_u8ExtNum )
{
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	00 d0       	rcall	.+0      	; 0x1144 <EXTINT_voidSetCallBack+0x6>
    1144:	00 d0       	rcall	.+0      	; 0x1146 <EXTINT_voidSetCallBack+0x8>
    1146:	0f 92       	push	r0
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	9a 83       	std	Y+2, r25	; 0x02
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	6b 83       	std	Y+3, r22	; 0x03

	if(ptr_ext!=NULL)
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	39 f1       	breq	.+78     	; 0x11a8 <EXTINT_voidSetCallBack+0x6a>
	{
		switch(copy_u8ExtNum)
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	3d 83       	std	Y+5, r19	; 0x05
    1162:	2c 83       	std	Y+4, r18	; 0x04
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	9d 81       	ldd	r25, Y+5	; 0x05
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	91 05       	cpc	r25, r1
    116c:	81 f0       	breq	.+32     	; 0x118e <EXTINT_voidSetCallBack+0x50>
    116e:	2c 81       	ldd	r18, Y+4	; 0x04
    1170:	3d 81       	ldd	r19, Y+5	; 0x05
    1172:	22 30       	cpi	r18, 0x02	; 2
    1174:	31 05       	cpc	r19, r1
    1176:	91 f0       	breq	.+36     	; 0x119c <EXTINT_voidSetCallBack+0x5e>
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	9d 81       	ldd	r25, Y+5	; 0x05
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	a1 f4       	brne	.+40     	; 0x11a8 <EXTINT_voidSetCallBack+0x6a>
		{
		case EXT0_ID:
			ptr_ArrCallBack[ 0 ]= ptr_ext;
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	90 93 89 01 	sts	0x0189, r25
    1188:	80 93 88 01 	sts	0x0188, r24
    118c:	0d c0       	rjmp	.+26     	; 0x11a8 <EXTINT_voidSetCallBack+0x6a>
			break;
		case EXT1_ID:
			ptr_ArrCallBack[ 1 ]= ptr_ext;
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	9a 81       	ldd	r25, Y+2	; 0x02
    1192:	90 93 8b 01 	sts	0x018B, r25
    1196:	80 93 8a 01 	sts	0x018A, r24
    119a:	06 c0       	rjmp	.+12     	; 0x11a8 <EXTINT_voidSetCallBack+0x6a>
			break;
		case EXT2_ID:
			ptr_ArrCallBack[ 2 ]= ptr_ext;
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	9a 81       	ldd	r25, Y+2	; 0x02
    11a0:	90 93 8d 01 	sts	0x018D, r25
    11a4:	80 93 8c 01 	sts	0x018C, r24
		}



	}
}
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <__vector_1>:



void __vector_1 () __attribute__ ((signal));
void __vector_1 ()
{
    11b8:	1f 92       	push	r1
    11ba:	0f 92       	push	r0
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	0f 92       	push	r0
    11c0:	11 24       	eor	r1, r1
    11c2:	2f 93       	push	r18
    11c4:	3f 93       	push	r19
    11c6:	4f 93       	push	r20
    11c8:	5f 93       	push	r21
    11ca:	6f 93       	push	r22
    11cc:	7f 93       	push	r23
    11ce:	8f 93       	push	r24
    11d0:	9f 93       	push	r25
    11d2:	af 93       	push	r26
    11d4:	bf 93       	push	r27
    11d6:	ef 93       	push	r30
    11d8:	ff 93       	push	r31
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62

	if(ptr_ArrCallBack[0] !=NULL)
    11e2:	80 91 88 01 	lds	r24, 0x0188
    11e6:	90 91 89 01 	lds	r25, 0x0189
    11ea:	00 97       	sbiw	r24, 0x00	; 0
    11ec:	29 f0       	breq	.+10     	; 0x11f8 <__vector_1+0x40>
	{
		ptr_ArrCallBack[0]();
    11ee:	e0 91 88 01 	lds	r30, 0x0188
    11f2:	f0 91 89 01 	lds	r31, 0x0189
    11f6:	09 95       	icall
	}



}
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	ff 91       	pop	r31
    11fe:	ef 91       	pop	r30
    1200:	bf 91       	pop	r27
    1202:	af 91       	pop	r26
    1204:	9f 91       	pop	r25
    1206:	8f 91       	pop	r24
    1208:	7f 91       	pop	r23
    120a:	6f 91       	pop	r22
    120c:	5f 91       	pop	r21
    120e:	4f 91       	pop	r20
    1210:	3f 91       	pop	r19
    1212:	2f 91       	pop	r18
    1214:	0f 90       	pop	r0
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	0f 90       	pop	r0
    121a:	1f 90       	pop	r1
    121c:	18 95       	reti

0000121e <__vector_2>:

void __vector_2 () __attribute__ ((signal));
void __vector_2 ()
{
    121e:	1f 92       	push	r1
    1220:	0f 92       	push	r0
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	0f 92       	push	r0
    1226:	11 24       	eor	r1, r1
    1228:	2f 93       	push	r18
    122a:	3f 93       	push	r19
    122c:	4f 93       	push	r20
    122e:	5f 93       	push	r21
    1230:	6f 93       	push	r22
    1232:	7f 93       	push	r23
    1234:	8f 93       	push	r24
    1236:	9f 93       	push	r25
    1238:	af 93       	push	r26
    123a:	bf 93       	push	r27
    123c:	ef 93       	push	r30
    123e:	ff 93       	push	r31
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
	if(ptr_ArrCallBack[1] !=NULL)
    1248:	80 91 8a 01 	lds	r24, 0x018A
    124c:	90 91 8b 01 	lds	r25, 0x018B
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	29 f0       	breq	.+10     	; 0x125e <__vector_2+0x40>
		{
		ptr_ArrCallBack[1]();
    1254:	e0 91 8a 01 	lds	r30, 0x018A
    1258:	f0 91 8b 01 	lds	r31, 0x018B
    125c:	09 95       	icall
		}


}
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	ff 91       	pop	r31
    1264:	ef 91       	pop	r30
    1266:	bf 91       	pop	r27
    1268:	af 91       	pop	r26
    126a:	9f 91       	pop	r25
    126c:	8f 91       	pop	r24
    126e:	7f 91       	pop	r23
    1270:	6f 91       	pop	r22
    1272:	5f 91       	pop	r21
    1274:	4f 91       	pop	r20
    1276:	3f 91       	pop	r19
    1278:	2f 91       	pop	r18
    127a:	0f 90       	pop	r0
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	0f 90       	pop	r0
    1280:	1f 90       	pop	r1
    1282:	18 95       	reti

00001284 <__vector_3>:

void __vector_3 () __attribute__ ((signal));
void __vector_3 ()
{
    1284:	1f 92       	push	r1
    1286:	0f 92       	push	r0
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	0f 92       	push	r0
    128c:	11 24       	eor	r1, r1
    128e:	2f 93       	push	r18
    1290:	3f 93       	push	r19
    1292:	4f 93       	push	r20
    1294:	5f 93       	push	r21
    1296:	6f 93       	push	r22
    1298:	7f 93       	push	r23
    129a:	8f 93       	push	r24
    129c:	9f 93       	push	r25
    129e:	af 93       	push	r26
    12a0:	bf 93       	push	r27
    12a2:	ef 93       	push	r30
    12a4:	ff 93       	push	r31
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
	if(ptr_ArrCallBack[2] !=NULL)
    12ae:	80 91 8c 01 	lds	r24, 0x018C
    12b2:	90 91 8d 01 	lds	r25, 0x018D
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	29 f0       	breq	.+10     	; 0x12c4 <__vector_3+0x40>
		{
		ptr_ArrCallBack[2]();
    12ba:	e0 91 8c 01 	lds	r30, 0x018C
    12be:	f0 91 8d 01 	lds	r31, 0x018D
    12c2:	09 95       	icall
		}


}
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	ff 91       	pop	r31
    12ca:	ef 91       	pop	r30
    12cc:	bf 91       	pop	r27
    12ce:	af 91       	pop	r26
    12d0:	9f 91       	pop	r25
    12d2:	8f 91       	pop	r24
    12d4:	7f 91       	pop	r23
    12d6:	6f 91       	pop	r22
    12d8:	5f 91       	pop	r21
    12da:	4f 91       	pop	r20
    12dc:	3f 91       	pop	r19
    12de:	2f 91       	pop	r18
    12e0:	0f 90       	pop	r0
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	0f 90       	pop	r0
    12e6:	1f 90       	pop	r1
    12e8:	18 95       	reti

000012ea <DIO_voidSetPortDirection>:
#include"DIO_Interface.h"

/*****************************************************************************/

void DIO_voidSetPortDirection(u8 Copy_u8portID,u8 Copy_u8PortDir )
{
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <DIO_voidSetPortDirection+0x6>
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <DIO_voidSetPortDirection+0x8>
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8portID)
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	3c 83       	std	Y+4, r19	; 0x04
    1302:	2b 83       	std	Y+3, r18	; 0x03
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	9c 81       	ldd	r25, Y+4	; 0x04
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	91 05       	cpc	r25, r1
    130c:	d1 f0       	breq	.+52     	; 0x1342 <DIO_voidSetPortDirection+0x58>
    130e:	2b 81       	ldd	r18, Y+3	; 0x03
    1310:	3c 81       	ldd	r19, Y+4	; 0x04
    1312:	22 30       	cpi	r18, 0x02	; 2
    1314:	31 05       	cpc	r19, r1
    1316:	2c f4       	brge	.+10     	; 0x1322 <DIO_voidSetPortDirection+0x38>
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	9c 81       	ldd	r25, Y+4	; 0x04
    131c:	00 97       	sbiw	r24, 0x00	; 0
    131e:	61 f0       	breq	.+24     	; 0x1338 <DIO_voidSetPortDirection+0x4e>
    1320:	1e c0       	rjmp	.+60     	; 0x135e <DIO_voidSetPortDirection+0x74>
    1322:	2b 81       	ldd	r18, Y+3	; 0x03
    1324:	3c 81       	ldd	r19, Y+4	; 0x04
    1326:	22 30       	cpi	r18, 0x02	; 2
    1328:	31 05       	cpc	r19, r1
    132a:	81 f0       	breq	.+32     	; 0x134c <DIO_voidSetPortDirection+0x62>
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	9c 81       	ldd	r25, Y+4	; 0x04
    1330:	83 30       	cpi	r24, 0x03	; 3
    1332:	91 05       	cpc	r25, r1
    1334:	81 f0       	breq	.+32     	; 0x1356 <DIO_voidSetPortDirection+0x6c>
    1336:	13 c0       	rjmp	.+38     	; 0x135e <DIO_voidSetPortDirection+0x74>
	{
	case PORTA_ID :   DDRA_REG= Copy_u8PortDir ; break ;
    1338:	ea e3       	ldi	r30, 0x3A	; 58
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	80 83       	st	Z, r24
    1340:	0e c0       	rjmp	.+28     	; 0x135e <DIO_voidSetPortDirection+0x74>
	case PORTB_ID :   DDRB_REG= Copy_u8PortDir ; break ;
    1342:	e7 e3       	ldi	r30, 0x37	; 55
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	80 83       	st	Z, r24
    134a:	09 c0       	rjmp	.+18     	; 0x135e <DIO_voidSetPortDirection+0x74>
	case PORTC_ID :   DDRC_REG= Copy_u8PortDir ; break ;
    134c:	e4 e3       	ldi	r30, 0x34	; 52
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	80 83       	st	Z, r24
    1354:	04 c0       	rjmp	.+8      	; 0x135e <DIO_voidSetPortDirection+0x74>
	case PORTD_ID :   DDRD_REG= Copy_u8PortDir ; break ;
    1356:	e1 e3       	ldi	r30, 0x31	; 49
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	80 83       	st	Z, r24

	}
}
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <DIO_voidSetPortValue>:
/*****************************************************************************/

void DIO_voidSetPortValue(u8 Copy_u8PortID,u8 Copy_u8PortVal )

{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	00 d0       	rcall	.+0      	; 0x1372 <DIO_voidSetPortValue+0x6>
    1372:	00 d0       	rcall	.+0      	; 0x1374 <DIO_voidSetPortValue+0x8>
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	89 83       	std	Y+1, r24	; 0x01
    137a:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8PortID)
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	3c 83       	std	Y+4, r19	; 0x04
    1384:	2b 83       	std	Y+3, r18	; 0x03
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	91 05       	cpc	r25, r1
    138e:	d1 f0       	breq	.+52     	; 0x13c4 <DIO_voidSetPortValue+0x58>
    1390:	2b 81       	ldd	r18, Y+3	; 0x03
    1392:	3c 81       	ldd	r19, Y+4	; 0x04
    1394:	22 30       	cpi	r18, 0x02	; 2
    1396:	31 05       	cpc	r19, r1
    1398:	2c f4       	brge	.+10     	; 0x13a4 <DIO_voidSetPortValue+0x38>
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	9c 81       	ldd	r25, Y+4	; 0x04
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	61 f0       	breq	.+24     	; 0x13ba <DIO_voidSetPortValue+0x4e>
    13a2:	1e c0       	rjmp	.+60     	; 0x13e0 <DIO_voidSetPortValue+0x74>
    13a4:	2b 81       	ldd	r18, Y+3	; 0x03
    13a6:	3c 81       	ldd	r19, Y+4	; 0x04
    13a8:	22 30       	cpi	r18, 0x02	; 2
    13aa:	31 05       	cpc	r19, r1
    13ac:	81 f0       	breq	.+32     	; 0x13ce <DIO_voidSetPortValue+0x62>
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	9c 81       	ldd	r25, Y+4	; 0x04
    13b2:	83 30       	cpi	r24, 0x03	; 3
    13b4:	91 05       	cpc	r25, r1
    13b6:	81 f0       	breq	.+32     	; 0x13d8 <DIO_voidSetPortValue+0x6c>
    13b8:	13 c0       	rjmp	.+38     	; 0x13e0 <DIO_voidSetPortValue+0x74>
	{

	case PORTA_ID :   PORTA_REG= Copy_u8PortVal ; break ;
    13ba:	eb e3       	ldi	r30, 0x3B	; 59
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	80 83       	st	Z, r24
    13c2:	0e c0       	rjmp	.+28     	; 0x13e0 <DIO_voidSetPortValue+0x74>
	case PORTB_ID :   PORTB_REG= Copy_u8PortVal ; break ;
    13c4:	e8 e3       	ldi	r30, 0x38	; 56
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	80 83       	st	Z, r24
    13cc:	09 c0       	rjmp	.+18     	; 0x13e0 <DIO_voidSetPortValue+0x74>
	case PORTC_ID :   PORTC_REG= Copy_u8PortVal ; break ;
    13ce:	e5 e3       	ldi	r30, 0x35	; 53
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	80 83       	st	Z, r24
    13d6:	04 c0       	rjmp	.+8      	; 0x13e0 <DIO_voidSetPortValue+0x74>
	case PORTD_ID :   PORTD_REG= Copy_u8PortVal ; break ;
    13d8:	e2 e3       	ldi	r30, 0x32	; 50
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	80 83       	st	Z, r24

	}
}
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <DIO_voidSetPinDirection>:

/*****************************************************************************/


void	DIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinDir)
{
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	27 97       	sbiw	r28, 0x07	; 7
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	de bf       	out	0x3e, r29	; 62
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	cd bf       	out	0x3d, r28	; 61
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	6a 83       	std	Y+2, r22	; 0x02
    1406:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinID>=PIN0 &&Copy_u8PinID<=PIN7)
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	88 30       	cpi	r24, 0x08	; 8
    140c:	08 f0       	brcs	.+2      	; 0x1410 <DIO_voidSetPinDirection+0x22>
    140e:	ea c0       	rjmp	.+468    	; 0x15e4 <DIO_voidSetPinDirection+0x1f6>
	{
		if(Copy_u8PinDir==PIN_OUTPUT)//Output
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	81 30       	cpi	r24, 0x01	; 1
    1414:	09 f0       	breq	.+2      	; 0x1418 <DIO_voidSetPinDirection+0x2a>
    1416:	6f c0       	rjmp	.+222    	; 0x14f6 <DIO_voidSetPinDirection+0x108>
		{
			switch(Copy_u8PortID)
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	3f 83       	std	Y+7, r19	; 0x07
    1420:	2e 83       	std	Y+6, r18	; 0x06
    1422:	8e 81       	ldd	r24, Y+6	; 0x06
    1424:	9f 81       	ldd	r25, Y+7	; 0x07
    1426:	81 30       	cpi	r24, 0x01	; 1
    1428:	91 05       	cpc	r25, r1
    142a:	49 f1       	breq	.+82     	; 0x147e <DIO_voidSetPinDirection+0x90>
    142c:	2e 81       	ldd	r18, Y+6	; 0x06
    142e:	3f 81       	ldd	r19, Y+7	; 0x07
    1430:	22 30       	cpi	r18, 0x02	; 2
    1432:	31 05       	cpc	r19, r1
    1434:	2c f4       	brge	.+10     	; 0x1440 <DIO_voidSetPinDirection+0x52>
    1436:	8e 81       	ldd	r24, Y+6	; 0x06
    1438:	9f 81       	ldd	r25, Y+7	; 0x07
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	61 f0       	breq	.+24     	; 0x1456 <DIO_voidSetPinDirection+0x68>
    143e:	d2 c0       	rjmp	.+420    	; 0x15e4 <DIO_voidSetPinDirection+0x1f6>
    1440:	2e 81       	ldd	r18, Y+6	; 0x06
    1442:	3f 81       	ldd	r19, Y+7	; 0x07
    1444:	22 30       	cpi	r18, 0x02	; 2
    1446:	31 05       	cpc	r19, r1
    1448:	71 f1       	breq	.+92     	; 0x14a6 <DIO_voidSetPinDirection+0xb8>
    144a:	8e 81       	ldd	r24, Y+6	; 0x06
    144c:	9f 81       	ldd	r25, Y+7	; 0x07
    144e:	83 30       	cpi	r24, 0x03	; 3
    1450:	91 05       	cpc	r25, r1
    1452:	e9 f1       	breq	.+122    	; 0x14ce <DIO_voidSetPinDirection+0xe0>
    1454:	c7 c0       	rjmp	.+398    	; 0x15e4 <DIO_voidSetPinDirection+0x1f6>
			{
			case PORTA_ID:    SET_BIT(DDRA_REG,Copy_u8PinID); break;
    1456:	aa e3       	ldi	r26, 0x3A	; 58
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	ea e3       	ldi	r30, 0x3A	; 58
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	48 2f       	mov	r20, r24
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 2e       	mov	r0, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <DIO_voidSetPinDirection+0x86>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	0a 94       	dec	r0
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <DIO_voidSetPinDirection+0x82>
    1478:	84 2b       	or	r24, r20
    147a:	8c 93       	st	X, r24
    147c:	b3 c0       	rjmp	.+358    	; 0x15e4 <DIO_voidSetPinDirection+0x1f6>
			case PORTB_ID:    SET_BIT(DDRB_REG,Copy_u8PinID); break;
    147e:	a7 e3       	ldi	r26, 0x37	; 55
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e7 e3       	ldi	r30, 0x37	; 55
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 2e       	mov	r0, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <DIO_voidSetPinDirection+0xae>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	0a 94       	dec	r0
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <DIO_voidSetPinDirection+0xaa>
    14a0:	84 2b       	or	r24, r20
    14a2:	8c 93       	st	X, r24
    14a4:	9f c0       	rjmp	.+318    	; 0x15e4 <DIO_voidSetPinDirection+0x1f6>
			case PORTC_ID:    SET_BIT(DDRC_REG,Copy_u8PinID); break;
    14a6:	a4 e3       	ldi	r26, 0x34	; 52
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e4 e3       	ldi	r30, 0x34	; 52
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_voidSetPinDirection+0xd6>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <DIO_voidSetPinDirection+0xd2>
    14c8:	84 2b       	or	r24, r20
    14ca:	8c 93       	st	X, r24
    14cc:	8b c0       	rjmp	.+278    	; 0x15e4 <DIO_voidSetPinDirection+0x1f6>
			case PORTD_ID:    SET_BIT(DDRD_REG,Copy_u8PinID); break;
    14ce:	a1 e3       	ldi	r26, 0x31	; 49
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e1 e3       	ldi	r30, 0x31	; 49
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 2e       	mov	r0, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <DIO_voidSetPinDirection+0xfe>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <DIO_voidSetPinDirection+0xfa>
    14f0:	84 2b       	or	r24, r20
    14f2:	8c 93       	st	X, r24
    14f4:	77 c0       	rjmp	.+238    	; 0x15e4 <DIO_voidSetPinDirection+0x1f6>

			default:   break;

			}
		}
		else if(Copy_u8PinDir==PIN_INPUT)//Input
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	88 23       	and	r24, r24
    14fa:	09 f0       	breq	.+2      	; 0x14fe <DIO_voidSetPinDirection+0x110>
    14fc:	73 c0       	rjmp	.+230    	; 0x15e4 <DIO_voidSetPinDirection+0x1f6>
		{
			switch(Copy_u8PortID)
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	3d 83       	std	Y+5, r19	; 0x05
    1506:	2c 83       	std	Y+4, r18	; 0x04
    1508:	8c 81       	ldd	r24, Y+4	; 0x04
    150a:	9d 81       	ldd	r25, Y+5	; 0x05
    150c:	81 30       	cpi	r24, 0x01	; 1
    150e:	91 05       	cpc	r25, r1
    1510:	59 f1       	breq	.+86     	; 0x1568 <DIO_voidSetPinDirection+0x17a>
    1512:	2c 81       	ldd	r18, Y+4	; 0x04
    1514:	3d 81       	ldd	r19, Y+5	; 0x05
    1516:	22 30       	cpi	r18, 0x02	; 2
    1518:	31 05       	cpc	r19, r1
    151a:	2c f4       	brge	.+10     	; 0x1526 <DIO_voidSetPinDirection+0x138>
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	9d 81       	ldd	r25, Y+5	; 0x05
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	69 f0       	breq	.+26     	; 0x153e <DIO_voidSetPinDirection+0x150>
    1524:	5f c0       	rjmp	.+190    	; 0x15e4 <DIO_voidSetPinDirection+0x1f6>
    1526:	2c 81       	ldd	r18, Y+4	; 0x04
    1528:	3d 81       	ldd	r19, Y+5	; 0x05
    152a:	22 30       	cpi	r18, 0x02	; 2
    152c:	31 05       	cpc	r19, r1
    152e:	89 f1       	breq	.+98     	; 0x1592 <DIO_voidSetPinDirection+0x1a4>
    1530:	8c 81       	ldd	r24, Y+4	; 0x04
    1532:	9d 81       	ldd	r25, Y+5	; 0x05
    1534:	83 30       	cpi	r24, 0x03	; 3
    1536:	91 05       	cpc	r25, r1
    1538:	09 f4       	brne	.+2      	; 0x153c <DIO_voidSetPinDirection+0x14e>
    153a:	40 c0       	rjmp	.+128    	; 0x15bc <DIO_voidSetPinDirection+0x1ce>
    153c:	53 c0       	rjmp	.+166    	; 0x15e4 <DIO_voidSetPinDirection+0x1f6>
			{
			case PORTA_ID:   CLR_BIT(DDRA_REG,Copy_u8PinID); break;
    153e:	aa e3       	ldi	r26, 0x3A	; 58
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	ea e3       	ldi	r30, 0x3A	; 58
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	48 2f       	mov	r20, r24
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	02 2e       	mov	r0, r18
    1556:	02 c0       	rjmp	.+4      	; 0x155c <DIO_voidSetPinDirection+0x16e>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	0a 94       	dec	r0
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <DIO_voidSetPinDirection+0x16a>
    1560:	80 95       	com	r24
    1562:	84 23       	and	r24, r20
    1564:	8c 93       	st	X, r24
    1566:	3e c0       	rjmp	.+124    	; 0x15e4 <DIO_voidSetPinDirection+0x1f6>
			case PORTB_ID:   CLR_BIT(DDRB_REG,Copy_u8PinID); break;
    1568:	a7 e3       	ldi	r26, 0x37	; 55
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e7 e3       	ldi	r30, 0x37	; 55
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	48 2f       	mov	r20, r24
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 2e       	mov	r0, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <DIO_voidSetPinDirection+0x198>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	0a 94       	dec	r0
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <DIO_voidSetPinDirection+0x194>
    158a:	80 95       	com	r24
    158c:	84 23       	and	r24, r20
    158e:	8c 93       	st	X, r24
    1590:	29 c0       	rjmp	.+82     	; 0x15e4 <DIO_voidSetPinDirection+0x1f6>
			case PORTC_ID:   CLR_BIT(DDRC_REG,Copy_u8PinID); break;
    1592:	a4 e3       	ldi	r26, 0x34	; 52
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e4 e3       	ldi	r30, 0x34	; 52
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	48 2f       	mov	r20, r24
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	02 2e       	mov	r0, r18
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <DIO_voidSetPinDirection+0x1c2>
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	0a 94       	dec	r0
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <DIO_voidSetPinDirection+0x1be>
    15b4:	80 95       	com	r24
    15b6:	84 23       	and	r24, r20
    15b8:	8c 93       	st	X, r24
    15ba:	14 c0       	rjmp	.+40     	; 0x15e4 <DIO_voidSetPinDirection+0x1f6>
			case PORTD_ID:   CLR_BIT(DDRD_REG,Copy_u8PinID); break;
    15bc:	a1 e3       	ldi	r26, 0x31	; 49
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e1 e3       	ldi	r30, 0x31	; 49
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	48 2f       	mov	r20, r24
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	02 2e       	mov	r0, r18
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <DIO_voidSetPinDirection+0x1ec>
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	0a 94       	dec	r0
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <DIO_voidSetPinDirection+0x1e8>
    15de:	80 95       	com	r24
    15e0:	84 23       	and	r24, r20
    15e2:	8c 93       	st	X, r24
			default:   break;
			}
		}
	}

}
    15e4:	27 96       	adiw	r28, 0x07	; 7
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <DIO_voidSetPinValue>:
/*****************************************************************************/
void    DIO_voidSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue)
{
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	27 97       	sbiw	r28, 0x07	; 7
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	6a 83       	std	Y+2, r22	; 0x02
    160e:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinID>=PIN0&&Copy_u8PinID<=PIN7)
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	88 30       	cpi	r24, 0x08	; 8
    1614:	08 f0       	brcs	.+2      	; 0x1618 <DIO_voidSetPinValue+0x22>
    1616:	ea c0       	rjmp	.+468    	; 0x17ec <DIO_voidSetPinValue+0x1f6>
	{
		if(Copy_u8PinValue==PIN_HIGH)//High
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	09 f0       	breq	.+2      	; 0x1620 <DIO_voidSetPinValue+0x2a>
    161e:	6f c0       	rjmp	.+222    	; 0x16fe <DIO_voidSetPinValue+0x108>
		{

			switch(Copy_u8PortID)
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	3f 83       	std	Y+7, r19	; 0x07
    1628:	2e 83       	std	Y+6, r18	; 0x06
    162a:	8e 81       	ldd	r24, Y+6	; 0x06
    162c:	9f 81       	ldd	r25, Y+7	; 0x07
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	91 05       	cpc	r25, r1
    1632:	49 f1       	breq	.+82     	; 0x1686 <DIO_voidSetPinValue+0x90>
    1634:	2e 81       	ldd	r18, Y+6	; 0x06
    1636:	3f 81       	ldd	r19, Y+7	; 0x07
    1638:	22 30       	cpi	r18, 0x02	; 2
    163a:	31 05       	cpc	r19, r1
    163c:	2c f4       	brge	.+10     	; 0x1648 <DIO_voidSetPinValue+0x52>
    163e:	8e 81       	ldd	r24, Y+6	; 0x06
    1640:	9f 81       	ldd	r25, Y+7	; 0x07
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	61 f0       	breq	.+24     	; 0x165e <DIO_voidSetPinValue+0x68>
    1646:	d2 c0       	rjmp	.+420    	; 0x17ec <DIO_voidSetPinValue+0x1f6>
    1648:	2e 81       	ldd	r18, Y+6	; 0x06
    164a:	3f 81       	ldd	r19, Y+7	; 0x07
    164c:	22 30       	cpi	r18, 0x02	; 2
    164e:	31 05       	cpc	r19, r1
    1650:	71 f1       	breq	.+92     	; 0x16ae <DIO_voidSetPinValue+0xb8>
    1652:	8e 81       	ldd	r24, Y+6	; 0x06
    1654:	9f 81       	ldd	r25, Y+7	; 0x07
    1656:	83 30       	cpi	r24, 0x03	; 3
    1658:	91 05       	cpc	r25, r1
    165a:	e9 f1       	breq	.+122    	; 0x16d6 <DIO_voidSetPinValue+0xe0>
    165c:	c7 c0       	rjmp	.+398    	; 0x17ec <DIO_voidSetPinValue+0x1f6>
			{
			case PORTA_ID :    SET_BIT(PORTA_REG,Copy_u8PinID); break;
    165e:	ab e3       	ldi	r26, 0x3B	; 59
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	eb e3       	ldi	r30, 0x3B	; 59
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	48 2f       	mov	r20, r24
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	02 2e       	mov	r0, r18
    1676:	02 c0       	rjmp	.+4      	; 0x167c <DIO_voidSetPinValue+0x86>
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	0a 94       	dec	r0
    167e:	e2 f7       	brpl	.-8      	; 0x1678 <DIO_voidSetPinValue+0x82>
    1680:	84 2b       	or	r24, r20
    1682:	8c 93       	st	X, r24
    1684:	b3 c0       	rjmp	.+358    	; 0x17ec <DIO_voidSetPinValue+0x1f6>
			case PORTB_ID :    SET_BIT(PORTB_REG,Copy_u8PinID); break;
    1686:	a8 e3       	ldi	r26, 0x38	; 56
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e8 e3       	ldi	r30, 0x38	; 56
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	48 2f       	mov	r20, r24
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	02 2e       	mov	r0, r18
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <DIO_voidSetPinValue+0xae>
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	0a 94       	dec	r0
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <DIO_voidSetPinValue+0xaa>
    16a8:	84 2b       	or	r24, r20
    16aa:	8c 93       	st	X, r24
    16ac:	9f c0       	rjmp	.+318    	; 0x17ec <DIO_voidSetPinValue+0x1f6>
			case PORTC_ID :    SET_BIT(PORTC_REG,Copy_u8PinID); break;
    16ae:	a5 e3       	ldi	r26, 0x35	; 53
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e5 e3       	ldi	r30, 0x35	; 53
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 2e       	mov	r0, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <DIO_voidSetPinValue+0xd6>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <DIO_voidSetPinValue+0xd2>
    16d0:	84 2b       	or	r24, r20
    16d2:	8c 93       	st	X, r24
    16d4:	8b c0       	rjmp	.+278    	; 0x17ec <DIO_voidSetPinValue+0x1f6>
			case PORTD_ID :    SET_BIT(PORTD_REG,Copy_u8PinID); break;
    16d6:	a2 e3       	ldi	r26, 0x32	; 50
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e2 e3       	ldi	r30, 0x32	; 50
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	48 2f       	mov	r20, r24
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	02 2e       	mov	r0, r18
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <DIO_voidSetPinValue+0xfe>
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	0a 94       	dec	r0
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <DIO_voidSetPinValue+0xfa>
    16f8:	84 2b       	or	r24, r20
    16fa:	8c 93       	st	X, r24
    16fc:	77 c0       	rjmp	.+238    	; 0x17ec <DIO_voidSetPinValue+0x1f6>

			}
		}
		else if(Copy_u8PinValue==PIN_LOW)//Low
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	88 23       	and	r24, r24
    1702:	09 f0       	breq	.+2      	; 0x1706 <DIO_voidSetPinValue+0x110>
    1704:	73 c0       	rjmp	.+230    	; 0x17ec <DIO_voidSetPinValue+0x1f6>
		{
			switch(Copy_u8PortID)
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	3d 83       	std	Y+5, r19	; 0x05
    170e:	2c 83       	std	Y+4, r18	; 0x04
    1710:	8c 81       	ldd	r24, Y+4	; 0x04
    1712:	9d 81       	ldd	r25, Y+5	; 0x05
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	91 05       	cpc	r25, r1
    1718:	59 f1       	breq	.+86     	; 0x1770 <DIO_voidSetPinValue+0x17a>
    171a:	2c 81       	ldd	r18, Y+4	; 0x04
    171c:	3d 81       	ldd	r19, Y+5	; 0x05
    171e:	22 30       	cpi	r18, 0x02	; 2
    1720:	31 05       	cpc	r19, r1
    1722:	2c f4       	brge	.+10     	; 0x172e <DIO_voidSetPinValue+0x138>
    1724:	8c 81       	ldd	r24, Y+4	; 0x04
    1726:	9d 81       	ldd	r25, Y+5	; 0x05
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	69 f0       	breq	.+26     	; 0x1746 <DIO_voidSetPinValue+0x150>
    172c:	5f c0       	rjmp	.+190    	; 0x17ec <DIO_voidSetPinValue+0x1f6>
    172e:	2c 81       	ldd	r18, Y+4	; 0x04
    1730:	3d 81       	ldd	r19, Y+5	; 0x05
    1732:	22 30       	cpi	r18, 0x02	; 2
    1734:	31 05       	cpc	r19, r1
    1736:	89 f1       	breq	.+98     	; 0x179a <DIO_voidSetPinValue+0x1a4>
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	9d 81       	ldd	r25, Y+5	; 0x05
    173c:	83 30       	cpi	r24, 0x03	; 3
    173e:	91 05       	cpc	r25, r1
    1740:	09 f4       	brne	.+2      	; 0x1744 <DIO_voidSetPinValue+0x14e>
    1742:	40 c0       	rjmp	.+128    	; 0x17c4 <DIO_voidSetPinValue+0x1ce>
    1744:	53 c0       	rjmp	.+166    	; 0x17ec <DIO_voidSetPinValue+0x1f6>
			{
			case PORTA_ID : CLR_BIT(PORTA_REG,Copy_u8PinID); break ;
    1746:	ab e3       	ldi	r26, 0x3B	; 59
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	eb e3       	ldi	r30, 0x3B	; 59
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	48 2f       	mov	r20, r24
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	02 2e       	mov	r0, r18
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <DIO_voidSetPinValue+0x16e>
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	0a 94       	dec	r0
    1766:	e2 f7       	brpl	.-8      	; 0x1760 <DIO_voidSetPinValue+0x16a>
    1768:	80 95       	com	r24
    176a:	84 23       	and	r24, r20
    176c:	8c 93       	st	X, r24
    176e:	3e c0       	rjmp	.+124    	; 0x17ec <DIO_voidSetPinValue+0x1f6>
			case PORTB_ID : CLR_BIT(PORTB_REG,Copy_u8PinID); break ;
    1770:	a8 e3       	ldi	r26, 0x38	; 56
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e8 e3       	ldi	r30, 0x38	; 56
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	48 2f       	mov	r20, r24
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	02 2e       	mov	r0, r18
    1788:	02 c0       	rjmp	.+4      	; 0x178e <DIO_voidSetPinValue+0x198>
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	0a 94       	dec	r0
    1790:	e2 f7       	brpl	.-8      	; 0x178a <DIO_voidSetPinValue+0x194>
    1792:	80 95       	com	r24
    1794:	84 23       	and	r24, r20
    1796:	8c 93       	st	X, r24
    1798:	29 c0       	rjmp	.+82     	; 0x17ec <DIO_voidSetPinValue+0x1f6>
			case PORTC_ID : CLR_BIT(PORTC_REG,Copy_u8PinID) ;break ;
    179a:	a5 e3       	ldi	r26, 0x35	; 53
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e5 e3       	ldi	r30, 0x35	; 53
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	48 2f       	mov	r20, r24
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	02 2e       	mov	r0, r18
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <DIO_voidSetPinValue+0x1c2>
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	0a 94       	dec	r0
    17ba:	e2 f7       	brpl	.-8      	; 0x17b4 <DIO_voidSetPinValue+0x1be>
    17bc:	80 95       	com	r24
    17be:	84 23       	and	r24, r20
    17c0:	8c 93       	st	X, r24
    17c2:	14 c0       	rjmp	.+40     	; 0x17ec <DIO_voidSetPinValue+0x1f6>
			case PORTD_ID : CLR_BIT(PORTD_REG,Copy_u8PinID) ;break ;
    17c4:	a2 e3       	ldi	r26, 0x32	; 50
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e2 e3       	ldi	r30, 0x32	; 50
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	48 2f       	mov	r20, r24
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	02 2e       	mov	r0, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <DIO_voidSetPinValue+0x1ec>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	0a 94       	dec	r0
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <DIO_voidSetPinValue+0x1e8>
    17e6:	80 95       	com	r24
    17e8:	84 23       	and	r24, r20
    17ea:	8c 93       	st	X, r24

			}
		}
	}
}
    17ec:	27 96       	adiw	r28, 0x07	; 7
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	08 95       	ret

000017fe <DIO_u8GetBitValue>:
/*****************************************************************************/
u8 DIO_u8GetBitValue(u8 copy_u8PortID , u8 Copy_u8PinID )
{
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	00 d0       	rcall	.+0      	; 0x1804 <DIO_u8GetBitValue+0x6>
    1804:	00 d0       	rcall	.+0      	; 0x1806 <DIO_u8GetBitValue+0x8>
    1806:	0f 92       	push	r0
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	8a 83       	std	Y+2, r24	; 0x02
    180e:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_PinVal ;

	if( Copy_u8PinID>=PIN0 && Copy_u8PinID<=PIN7 )
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	88 30       	cpi	r24, 0x08	; 8
    1814:	08 f0       	brcs	.+2      	; 0x1818 <DIO_u8GetBitValue+0x1a>
    1816:	67 c0       	rjmp	.+206    	; 0x18e6 <DIO_u8GetBitValue+0xe8>
	{
		switch(copy_u8PortID)
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	3d 83       	std	Y+5, r19	; 0x05
    1820:	2c 83       	std	Y+4, r18	; 0x04
    1822:	4c 81       	ldd	r20, Y+4	; 0x04
    1824:	5d 81       	ldd	r21, Y+5	; 0x05
    1826:	41 30       	cpi	r20, 0x01	; 1
    1828:	51 05       	cpc	r21, r1
    182a:	41 f1       	breq	.+80     	; 0x187c <DIO_u8GetBitValue+0x7e>
    182c:	8c 81       	ldd	r24, Y+4	; 0x04
    182e:	9d 81       	ldd	r25, Y+5	; 0x05
    1830:	82 30       	cpi	r24, 0x02	; 2
    1832:	91 05       	cpc	r25, r1
    1834:	34 f4       	brge	.+12     	; 0x1842 <DIO_u8GetBitValue+0x44>
    1836:	2c 81       	ldd	r18, Y+4	; 0x04
    1838:	3d 81       	ldd	r19, Y+5	; 0x05
    183a:	21 15       	cp	r18, r1
    183c:	31 05       	cpc	r19, r1
    183e:	61 f0       	breq	.+24     	; 0x1858 <DIO_u8GetBitValue+0x5a>
    1840:	52 c0       	rjmp	.+164    	; 0x18e6 <DIO_u8GetBitValue+0xe8>
    1842:	4c 81       	ldd	r20, Y+4	; 0x04
    1844:	5d 81       	ldd	r21, Y+5	; 0x05
    1846:	42 30       	cpi	r20, 0x02	; 2
    1848:	51 05       	cpc	r21, r1
    184a:	51 f1       	breq	.+84     	; 0x18a0 <DIO_u8GetBitValue+0xa2>
    184c:	8c 81       	ldd	r24, Y+4	; 0x04
    184e:	9d 81       	ldd	r25, Y+5	; 0x05
    1850:	83 30       	cpi	r24, 0x03	; 3
    1852:	91 05       	cpc	r25, r1
    1854:	b9 f1       	breq	.+110    	; 0x18c4 <DIO_u8GetBitValue+0xc6>
    1856:	47 c0       	rjmp	.+142    	; 0x18e6 <DIO_u8GetBitValue+0xe8>
		{

		case PORTA_ID : Local_PinVal=GET_BIT(PINA_REG,Copy_u8PinID)   ; break ;
    1858:	e9 e3       	ldi	r30, 0x39	; 57
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	88 2f       	mov	r24, r24
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	a9 01       	movw	r20, r18
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <DIO_u8GetBitValue+0x72>
    186c:	55 95       	asr	r21
    186e:	47 95       	ror	r20
    1870:	8a 95       	dec	r24
    1872:	e2 f7       	brpl	.-8      	; 0x186c <DIO_u8GetBitValue+0x6e>
    1874:	ca 01       	movw	r24, r20
    1876:	81 70       	andi	r24, 0x01	; 1
    1878:	89 83       	std	Y+1, r24	; 0x01
    187a:	35 c0       	rjmp	.+106    	; 0x18e6 <DIO_u8GetBitValue+0xe8>
		case PORTB_ID : Local_PinVal=GET_BIT(PINB_REG,Copy_u8PinID)   ; break ;
    187c:	e6 e3       	ldi	r30, 0x36	; 54
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	88 2f       	mov	r24, r24
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	a9 01       	movw	r20, r18
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <DIO_u8GetBitValue+0x96>
    1890:	55 95       	asr	r21
    1892:	47 95       	ror	r20
    1894:	8a 95       	dec	r24
    1896:	e2 f7       	brpl	.-8      	; 0x1890 <DIO_u8GetBitValue+0x92>
    1898:	ca 01       	movw	r24, r20
    189a:	81 70       	andi	r24, 0x01	; 1
    189c:	89 83       	std	Y+1, r24	; 0x01
    189e:	23 c0       	rjmp	.+70     	; 0x18e6 <DIO_u8GetBitValue+0xe8>
		case PORTC_ID : Local_PinVal=GET_BIT(PINC_REG,Copy_u8PinID)   ; break ;
    18a0:	e3 e3       	ldi	r30, 0x33	; 51
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	88 2f       	mov	r24, r24
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	a9 01       	movw	r20, r18
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <DIO_u8GetBitValue+0xba>
    18b4:	55 95       	asr	r21
    18b6:	47 95       	ror	r20
    18b8:	8a 95       	dec	r24
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <DIO_u8GetBitValue+0xb6>
    18bc:	ca 01       	movw	r24, r20
    18be:	81 70       	andi	r24, 0x01	; 1
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	11 c0       	rjmp	.+34     	; 0x18e6 <DIO_u8GetBitValue+0xe8>
		case PORTD_ID : Local_PinVal=GET_BIT(PIND_REG,Copy_u8PinID)   ; break ;
    18c4:	e0 e3       	ldi	r30, 0x30	; 48
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	88 2f       	mov	r24, r24
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	a9 01       	movw	r20, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <DIO_u8GetBitValue+0xde>
    18d8:	55 95       	asr	r21
    18da:	47 95       	ror	r20
    18dc:	8a 95       	dec	r24
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <DIO_u8GetBitValue+0xda>
    18e0:	ca 01       	movw	r24, r20
    18e2:	81 70       	andi	r24, 0x01	; 1
    18e4:	89 83       	std	Y+1, r24	; 0x01

		}
	}

	return Local_PinVal ;
    18e6:	89 81       	ldd	r24, Y+1	; 0x01

}
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <DIO_voidToggelPin>:
}
 */

/*****************************************************************************/
void DIO_voidToggelPin(u8 copy_u8PortID,u8 Copy_u8PinID)
{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <DIO_voidToggelPin+0x6>
    18fe:	00 d0       	rcall	.+0      	; 0x1900 <DIO_voidToggelPin+0x8>
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	89 83       	std	Y+1, r24	; 0x01
    1906:	6a 83       	std	Y+2, r22	; 0x02

	if( Copy_u8PinID>=PIN0 && Copy_u8PinID<=PIN7)
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	88 30       	cpi	r24, 0x08	; 8
    190c:	08 f0       	brcs	.+2      	; 0x1910 <DIO_voidToggelPin+0x18>
    190e:	6e c0       	rjmp	.+220    	; 0x19ec <DIO_voidToggelPin+0xf4>
	{

		switch (copy_u8PortID)
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	3c 83       	std	Y+4, r19	; 0x04
    1918:	2b 83       	std	Y+3, r18	; 0x03
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	9c 81       	ldd	r25, Y+4	; 0x04
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	91 05       	cpc	r25, r1
    1922:	49 f1       	breq	.+82     	; 0x1976 <DIO_voidToggelPin+0x7e>
    1924:	2b 81       	ldd	r18, Y+3	; 0x03
    1926:	3c 81       	ldd	r19, Y+4	; 0x04
    1928:	22 30       	cpi	r18, 0x02	; 2
    192a:	31 05       	cpc	r19, r1
    192c:	2c f4       	brge	.+10     	; 0x1938 <DIO_voidToggelPin+0x40>
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	61 f0       	breq	.+24     	; 0x194e <DIO_voidToggelPin+0x56>
    1936:	5a c0       	rjmp	.+180    	; 0x19ec <DIO_voidToggelPin+0xf4>
    1938:	2b 81       	ldd	r18, Y+3	; 0x03
    193a:	3c 81       	ldd	r19, Y+4	; 0x04
    193c:	22 30       	cpi	r18, 0x02	; 2
    193e:	31 05       	cpc	r19, r1
    1940:	71 f1       	breq	.+92     	; 0x199e <DIO_voidToggelPin+0xa6>
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	9c 81       	ldd	r25, Y+4	; 0x04
    1946:	83 30       	cpi	r24, 0x03	; 3
    1948:	91 05       	cpc	r25, r1
    194a:	e9 f1       	breq	.+122    	; 0x19c6 <DIO_voidToggelPin+0xce>
    194c:	4f c0       	rjmp	.+158    	; 0x19ec <DIO_voidToggelPin+0xf4>
		{
		case PORTA_ID :  TOG_BIT(PORTA_REG,Copy_u8PinID) ; break ;
    194e:	ab e3       	ldi	r26, 0x3B	; 59
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	eb e3       	ldi	r30, 0x3B	; 59
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	48 2f       	mov	r20, r24
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	02 2e       	mov	r0, r18
    1966:	02 c0       	rjmp	.+4      	; 0x196c <DIO_voidToggelPin+0x74>
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	0a 94       	dec	r0
    196e:	e2 f7       	brpl	.-8      	; 0x1968 <DIO_voidToggelPin+0x70>
    1970:	84 27       	eor	r24, r20
    1972:	8c 93       	st	X, r24
    1974:	3b c0       	rjmp	.+118    	; 0x19ec <DIO_voidToggelPin+0xf4>
		case PORTB_ID :  TOG_BIT(PORTB_REG,Copy_u8PinID) ; break ;
    1976:	a8 e3       	ldi	r26, 0x38	; 56
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e8 e3       	ldi	r30, 0x38	; 56
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	48 2f       	mov	r20, r24
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	02 2e       	mov	r0, r18
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <DIO_voidToggelPin+0x9c>
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	0a 94       	dec	r0
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <DIO_voidToggelPin+0x98>
    1998:	84 27       	eor	r24, r20
    199a:	8c 93       	st	X, r24
    199c:	27 c0       	rjmp	.+78     	; 0x19ec <DIO_voidToggelPin+0xf4>
		case PORTC_ID :  TOG_BIT(PORTC_REG,Copy_u8PinID) ; break ;
    199e:	a5 e3       	ldi	r26, 0x35	; 53
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e5 e3       	ldi	r30, 0x35	; 53
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	48 2f       	mov	r20, r24
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	02 2e       	mov	r0, r18
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <DIO_voidToggelPin+0xc4>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	0a 94       	dec	r0
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <DIO_voidToggelPin+0xc0>
    19c0:	84 27       	eor	r24, r20
    19c2:	8c 93       	st	X, r24
    19c4:	13 c0       	rjmp	.+38     	; 0x19ec <DIO_voidToggelPin+0xf4>
		case PORTD_ID :  TOG_BIT(PORTD_REG,Copy_u8PinID) ; break ;
    19c6:	a2 e3       	ldi	r26, 0x32	; 50
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e2 e3       	ldi	r30, 0x32	; 50
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	48 2f       	mov	r20, r24
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	02 2e       	mov	r0, r18
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <DIO_voidToggelPin+0xec>
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	0a 94       	dec	r0
    19e6:	e2 f7       	brpl	.-8      	; 0x19e0 <DIO_voidToggelPin+0xe8>
    19e8:	84 27       	eor	r24, r20
    19ea:	8c 93       	st	X, r24
		}

	}
}
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <LCD_voidInit>:



/***********************************************************************************/
void LCD_voidInit(void)
{
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
    1a02:	2e 97       	sbiw	r28, 0x0e	; 14
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a0 ef       	ldi	r26, 0xF0	; 240
    1a14:	b1 e4       	ldi	r27, 0x41	; 65
    1a16:	8b 87       	std	Y+11, r24	; 0x0b
    1a18:	9c 87       	std	Y+12, r25	; 0x0c
    1a1a:	ad 87       	std	Y+13, r26	; 0x0d
    1a1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	4a e7       	ldi	r20, 0x7A	; 122
    1a2c:	55 e4       	ldi	r21, 0x45	; 69
    1a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	8f 83       	std	Y+7, r24	; 0x07
    1a38:	98 87       	std	Y+8, r25	; 0x08
    1a3a:	a9 87       	std	Y+9, r26	; 0x09
    1a3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a40:	78 85       	ldd	r23, Y+8	; 0x08
    1a42:	89 85       	ldd	r24, Y+9	; 0x09
    1a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e8       	ldi	r20, 0x80	; 128
    1a4c:	5f e3       	ldi	r21, 0x3F	; 63
    1a4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a52:	88 23       	and	r24, r24
    1a54:	2c f4       	brge	.+10     	; 0x1a60 <LCD_voidInit+0x66>
		__ticks = 1;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	9e 83       	std	Y+6, r25	; 0x06
    1a5c:	8d 83       	std	Y+5, r24	; 0x05
    1a5e:	3f c0       	rjmp	.+126    	; 0x1ade <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1a60:	6f 81       	ldd	r22, Y+7	; 0x07
    1a62:	78 85       	ldd	r23, Y+8	; 0x08
    1a64:	89 85       	ldd	r24, Y+9	; 0x09
    1a66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	3f ef       	ldi	r19, 0xFF	; 255
    1a6c:	4f e7       	ldi	r20, 0x7F	; 127
    1a6e:	57 e4       	ldi	r21, 0x47	; 71
    1a70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a74:	18 16       	cp	r1, r24
    1a76:	4c f5       	brge	.+82     	; 0x1aca <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e2       	ldi	r20, 0x20	; 32
    1a86:	51 e4       	ldi	r21, 0x41	; 65
    1a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	bc 01       	movw	r22, r24
    1a92:	cd 01       	movw	r24, r26
    1a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9e 83       	std	Y+6, r25	; 0x06
    1a9e:	8d 83       	std	Y+5, r24	; 0x05
    1aa0:	0f c0       	rjmp	.+30     	; 0x1ac0 <LCD_voidInit+0xc6>
    1aa2:	80 e9       	ldi	r24, 0x90	; 144
    1aa4:	91 e0       	ldi	r25, 0x01	; 1
    1aa6:	9c 83       	std	Y+4, r25	; 0x04
    1aa8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	9c 81       	ldd	r25, Y+4	; 0x04
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <LCD_voidInit+0xb4>
    1ab2:	9c 83       	std	Y+4, r25	; 0x04
    1ab4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	9e 83       	std	Y+6, r25	; 0x06
    1abe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	69 f7       	brne	.-38     	; 0x1aa2 <LCD_voidInit+0xa8>
    1ac8:	14 c0       	rjmp	.+40     	; 0x1af2 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aca:	6f 81       	ldd	r22, Y+7	; 0x07
    1acc:	78 85       	ldd	r23, Y+8	; 0x08
    1ace:	89 85       	ldd	r24, Y+9	; 0x09
    1ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	8d 83       	std	Y+5, r24	; 0x05
    1ade:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae2:	9a 83       	std	Y+2, r25	; 0x02
    1ae4:	89 83       	std	Y+1, r24	; 0x01
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <LCD_voidInit+0xf0>
    1aee:	9a 83       	std	Y+2, r25	; 0x02
    1af0:	89 83       	std	Y+1, r24	; 0x01
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Set Control pins as output */
	DIO_voidSetPinDirection(RS_PORT,RS_PIN,PIN_OUTPUT);
    1af2:	82 e0       	ldi	r24, 0x02	; 2
    1af4:	60 e0       	ldi	r22, 0x00	; 0
    1af6:	41 e0       	ldi	r20, 0x01	; 1
    1af8:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(RW_PORT,RW_PIN,PIN_OUTPUT);
	DIO_voidSetPinDirection(EN_PORT, EN_PIN,PIN_OUTPUT);
    1afc:	82 e0       	ldi	r24, 0x02	; 2
    1afe:	61 e0       	ldi	r22, 0x01	; 1
    1b00:	41 e0       	ldi	r20, 0x01	; 1
    1b02:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_voidSetPinDirection>

	/* Set Data Port Direction as output */
	DIO_voidSetPinDirection(D4_PORT,D4_PIN,PIN_OUTPUT);
    1b06:	82 e0       	ldi	r24, 0x02	; 2
    1b08:	62 e0       	ldi	r22, 0x02	; 2
    1b0a:	41 e0       	ldi	r20, 0x01	; 1
    1b0c:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D5_PORT,D5_PIN,PIN_OUTPUT);
    1b10:	82 e0       	ldi	r24, 0x02	; 2
    1b12:	63 e0       	ldi	r22, 0x03	; 3
    1b14:	41 e0       	ldi	r20, 0x01	; 1
    1b16:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D6_PORT,D6_PIN,PIN_OUTPUT);
    1b1a:	82 e0       	ldi	r24, 0x02	; 2
    1b1c:	64 e0       	ldi	r22, 0x04	; 4
    1b1e:	41 e0       	ldi	r20, 0x01	; 1
    1b20:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D7_PORT,D7_PIN,PIN_OUTPUT);
    1b24:	82 e0       	ldi	r24, 0x02	; 2
    1b26:	65 e0       	ldi	r22, 0x05	; 5
    1b28:	41 e0       	ldi	r20, 0x01	; 1
    1b2a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_voidSetPinDirection>

	/* Return Home */
	LCD_voidWriteCommand(RETURN_HOME);
    1b2e:	82 e0       	ldi	r24, 0x02	; 2
    1b30:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidWriteCommand>

	/* Configure as 4-bit data mode*/
	LCD_voidWriteCommand(FUNCTION_SET_4BIT_2LINES_5X7_DOTS);
    1b34:	88 e2       	ldi	r24, 0x28	; 40
    1b36:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidWriteCommand>

	/*Display ON OFF Control */
	LCD_voidWriteCommand(DISPLAY_ON_CURSOR_OFF);
    1b3a:	8c e0       	ldi	r24, 0x0C	; 12
    1b3c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidWriteCommand>

	/* Clear Display */
	LCD_voidWriteCommand(DISPLAY_CLEAR);
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidWriteCommand>

	/*ENTRY MODE*/
	LCD_voidWriteCommand(ENTRY_MODE_SET);
    1b46:	86 e0       	ldi	r24, 0x06	; 6
    1b48:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidWriteCommand>

}
    1b4c:	2e 96       	adiw	r28, 0x0e	; 14
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <LCD_voidWriteBitsToSend>:
/***********************************************************************************/

static void LCD_voidWriteBitsToSend(u8 copy_u8Byte)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	6d 97       	sbiw	r28, 0x1d	; 29
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	8d 8f       	std	Y+29, r24	; 0x1d



	/*prepare 4 bits MSB to send */
	DIO_voidSetPinValue(D7_PORT,D7_PIN, GET_BIT(copy_u8Byte,PIN7) );
    1b74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b76:	98 2f       	mov	r25, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	99 27       	eor	r25, r25
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	82 e0       	ldi	r24, 0x02	; 2
    1b80:	65 e0       	ldi	r22, 0x05	; 5
    1b82:	49 2f       	mov	r20, r25
    1b84:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT,D6_PIN, GET_BIT(copy_u8Byte,PIN6) );
    1b88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b8a:	82 95       	swap	r24
    1b8c:	86 95       	lsr	r24
    1b8e:	86 95       	lsr	r24
    1b90:	83 70       	andi	r24, 0x03	; 3
    1b92:	98 2f       	mov	r25, r24
    1b94:	91 70       	andi	r25, 0x01	; 1
    1b96:	82 e0       	ldi	r24, 0x02	; 2
    1b98:	64 e0       	ldi	r22, 0x04	; 4
    1b9a:	49 2f       	mov	r20, r25
    1b9c:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT,D5_PIN, GET_BIT(copy_u8Byte,PIN5) );
    1ba0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ba2:	82 95       	swap	r24
    1ba4:	86 95       	lsr	r24
    1ba6:	87 70       	andi	r24, 0x07	; 7
    1ba8:	98 2f       	mov	r25, r24
    1baa:	91 70       	andi	r25, 0x01	; 1
    1bac:	82 e0       	ldi	r24, 0x02	; 2
    1bae:	63 e0       	ldi	r22, 0x03	; 3
    1bb0:	49 2f       	mov	r20, r25
    1bb2:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT,D4_PIN, GET_BIT(copy_u8Byte,PIN4) );
    1bb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bb8:	82 95       	swap	r24
    1bba:	8f 70       	andi	r24, 0x0F	; 15
    1bbc:	98 2f       	mov	r25, r24
    1bbe:	91 70       	andi	r25, 0x01	; 1
    1bc0:	82 e0       	ldi	r24, 0x02	; 2
    1bc2:	62 e0       	ldi	r22, 0x02	; 2
    1bc4:	49 2f       	mov	r20, r25
    1bc6:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <DIO_voidSetPinValue>

	/* open EN--> make it high --- then after 2m close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_HIGH);
    1bca:	82 e0       	ldi	r24, 0x02	; 2
    1bcc:	61 e0       	ldi	r22, 0x01	; 1
    1bce:	41 e0       	ldi	r20, 0x01	; 1
    1bd0:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <DIO_voidSetPinValue>
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	a0 e0       	ldi	r26, 0x00	; 0
    1bda:	b0 e4       	ldi	r27, 0x40	; 64
    1bdc:	89 8f       	std	Y+25, r24	; 0x19
    1bde:	9a 8f       	std	Y+26, r25	; 0x1a
    1be0:	ab 8f       	std	Y+27, r26	; 0x1b
    1be2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be4:	69 8d       	ldd	r22, Y+25	; 0x19
    1be6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1be8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	4a e7       	ldi	r20, 0x7A	; 122
    1bf2:	55 e4       	ldi	r21, 0x45	; 69
    1bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	8d 8b       	std	Y+21, r24	; 0x15
    1bfe:	9e 8b       	std	Y+22, r25	; 0x16
    1c00:	af 8b       	std	Y+23, r26	; 0x17
    1c02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c04:	6d 89       	ldd	r22, Y+21	; 0x15
    1c06:	7e 89       	ldd	r23, Y+22	; 0x16
    1c08:	8f 89       	ldd	r24, Y+23	; 0x17
    1c0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	40 e8       	ldi	r20, 0x80	; 128
    1c12:	5f e3       	ldi	r21, 0x3F	; 63
    1c14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c18:	88 23       	and	r24, r24
    1c1a:	2c f4       	brge	.+10     	; 0x1c26 <LCD_voidWriteBitsToSend+0xc8>
		__ticks = 1;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	9c 8b       	std	Y+20, r25	; 0x14
    1c22:	8b 8b       	std	Y+19, r24	; 0x13
    1c24:	3f c0       	rjmp	.+126    	; 0x1ca4 <LCD_voidWriteBitsToSend+0x146>
	else if (__tmp > 65535)
    1c26:	6d 89       	ldd	r22, Y+21	; 0x15
    1c28:	7e 89       	ldd	r23, Y+22	; 0x16
    1c2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	3f ef       	ldi	r19, 0xFF	; 255
    1c32:	4f e7       	ldi	r20, 0x7F	; 127
    1c34:	57 e4       	ldi	r21, 0x47	; 71
    1c36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c3a:	18 16       	cp	r1, r24
    1c3c:	4c f5       	brge	.+82     	; 0x1c90 <LCD_voidWriteBitsToSend+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e2       	ldi	r20, 0x20	; 32
    1c4c:	51 e4       	ldi	r21, 0x41	; 65
    1c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	bc 01       	movw	r22, r24
    1c58:	cd 01       	movw	r24, r26
    1c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	9c 8b       	std	Y+20, r25	; 0x14
    1c64:	8b 8b       	std	Y+19, r24	; 0x13
    1c66:	0f c0       	rjmp	.+30     	; 0x1c86 <LCD_voidWriteBitsToSend+0x128>
    1c68:	80 e9       	ldi	r24, 0x90	; 144
    1c6a:	91 e0       	ldi	r25, 0x01	; 1
    1c6c:	9a 8b       	std	Y+18, r25	; 0x12
    1c6e:	89 8b       	std	Y+17, r24	; 0x11
    1c70:	89 89       	ldd	r24, Y+17	; 0x11
    1c72:	9a 89       	ldd	r25, Y+18	; 0x12
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	f1 f7       	brne	.-4      	; 0x1c74 <LCD_voidWriteBitsToSend+0x116>
    1c78:	9a 8b       	std	Y+18, r25	; 0x12
    1c7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	9c 8b       	std	Y+20, r25	; 0x14
    1c84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c86:	8b 89       	ldd	r24, Y+19	; 0x13
    1c88:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	69 f7       	brne	.-38     	; 0x1c68 <LCD_voidWriteBitsToSend+0x10a>
    1c8e:	14 c0       	rjmp	.+40     	; 0x1cb8 <LCD_voidWriteBitsToSend+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c90:	6d 89       	ldd	r22, Y+21	; 0x15
    1c92:	7e 89       	ldd	r23, Y+22	; 0x16
    1c94:	8f 89       	ldd	r24, Y+23	; 0x17
    1c96:	98 8d       	ldd	r25, Y+24	; 0x18
    1c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	9c 8b       	std	Y+20, r25	; 0x14
    1ca2:	8b 8b       	std	Y+19, r24	; 0x13
    1ca4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca8:	98 8b       	std	Y+16, r25	; 0x10
    1caa:	8f 87       	std	Y+15, r24	; 0x0f
    1cac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cae:	98 89       	ldd	r25, Y+16	; 0x10
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <LCD_voidWriteBitsToSend+0x152>
    1cb4:	98 8b       	std	Y+16, r25	; 0x10
    1cb6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_LOW);
    1cb8:	82 e0       	ldi	r24, 0x02	; 2
    1cba:	61 e0       	ldi	r22, 0x01	; 1
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <DIO_voidSetPinValue>


	/*prepare 4 bits LSB to send */
	DIO_voidSetPinValue(D7_PORT,D7_PIN, GET_BIT(copy_u8Byte,PIN3) );
    1cc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cc4:	86 95       	lsr	r24
    1cc6:	86 95       	lsr	r24
    1cc8:	86 95       	lsr	r24
    1cca:	98 2f       	mov	r25, r24
    1ccc:	91 70       	andi	r25, 0x01	; 1
    1cce:	82 e0       	ldi	r24, 0x02	; 2
    1cd0:	65 e0       	ldi	r22, 0x05	; 5
    1cd2:	49 2f       	mov	r20, r25
    1cd4:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT,D6_PIN, GET_BIT(copy_u8Byte,PIN2) );
    1cd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cda:	86 95       	lsr	r24
    1cdc:	86 95       	lsr	r24
    1cde:	98 2f       	mov	r25, r24
    1ce0:	91 70       	andi	r25, 0x01	; 1
    1ce2:	82 e0       	ldi	r24, 0x02	; 2
    1ce4:	64 e0       	ldi	r22, 0x04	; 4
    1ce6:	49 2f       	mov	r20, r25
    1ce8:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT,D5_PIN, GET_BIT(copy_u8Byte,PIN1) );
    1cec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cee:	86 95       	lsr	r24
    1cf0:	98 2f       	mov	r25, r24
    1cf2:	91 70       	andi	r25, 0x01	; 1
    1cf4:	82 e0       	ldi	r24, 0x02	; 2
    1cf6:	63 e0       	ldi	r22, 0x03	; 3
    1cf8:	49 2f       	mov	r20, r25
    1cfa:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT,D4_PIN, GET_BIT(copy_u8Byte,PIN0) );
    1cfe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d00:	98 2f       	mov	r25, r24
    1d02:	91 70       	andi	r25, 0x01	; 1
    1d04:	82 e0       	ldi	r24, 0x02	; 2
    1d06:	62 e0       	ldi	r22, 0x02	; 2
    1d08:	49 2f       	mov	r20, r25
    1d0a:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <DIO_voidSetPinValue>

	/* open EN--> make it high --- then after 2m -- close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_HIGH);
    1d0e:	82 e0       	ldi	r24, 0x02	; 2
    1d10:	61 e0       	ldi	r22, 0x01	; 1
    1d12:	41 e0       	ldi	r20, 0x01	; 1
    1d14:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <DIO_voidSetPinValue>
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	a0 e0       	ldi	r26, 0x00	; 0
    1d1e:	b0 e4       	ldi	r27, 0x40	; 64
    1d20:	8b 87       	std	Y+11, r24	; 0x0b
    1d22:	9c 87       	std	Y+12, r25	; 0x0c
    1d24:	ad 87       	std	Y+13, r26	; 0x0d
    1d26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	4a e7       	ldi	r20, 0x7A	; 122
    1d36:	55 e4       	ldi	r21, 0x45	; 69
    1d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	8f 83       	std	Y+7, r24	; 0x07
    1d42:	98 87       	std	Y+8, r25	; 0x08
    1d44:	a9 87       	std	Y+9, r26	; 0x09
    1d46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d48:	6f 81       	ldd	r22, Y+7	; 0x07
    1d4a:	78 85       	ldd	r23, Y+8	; 0x08
    1d4c:	89 85       	ldd	r24, Y+9	; 0x09
    1d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e8       	ldi	r20, 0x80	; 128
    1d56:	5f e3       	ldi	r21, 0x3F	; 63
    1d58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d5c:	88 23       	and	r24, r24
    1d5e:	2c f4       	brge	.+10     	; 0x1d6a <LCD_voidWriteBitsToSend+0x20c>
		__ticks = 1;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	9e 83       	std	Y+6, r25	; 0x06
    1d66:	8d 83       	std	Y+5, r24	; 0x05
    1d68:	3f c0       	rjmp	.+126    	; 0x1de8 <LCD_voidWriteBitsToSend+0x28a>
	else if (__tmp > 65535)
    1d6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6c:	78 85       	ldd	r23, Y+8	; 0x08
    1d6e:	89 85       	ldd	r24, Y+9	; 0x09
    1d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	3f ef       	ldi	r19, 0xFF	; 255
    1d76:	4f e7       	ldi	r20, 0x7F	; 127
    1d78:	57 e4       	ldi	r21, 0x47	; 71
    1d7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d7e:	18 16       	cp	r1, r24
    1d80:	4c f5       	brge	.+82     	; 0x1dd4 <LCD_voidWriteBitsToSend+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e2       	ldi	r20, 0x20	; 32
    1d90:	51 e4       	ldi	r21, 0x41	; 65
    1d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	bc 01       	movw	r22, r24
    1d9c:	cd 01       	movw	r24, r26
    1d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	9e 83       	std	Y+6, r25	; 0x06
    1da8:	8d 83       	std	Y+5, r24	; 0x05
    1daa:	0f c0       	rjmp	.+30     	; 0x1dca <LCD_voidWriteBitsToSend+0x26c>
    1dac:	80 e9       	ldi	r24, 0x90	; 144
    1dae:	91 e0       	ldi	r25, 0x01	; 1
    1db0:	9c 83       	std	Y+4, r25	; 0x04
    1db2:	8b 83       	std	Y+3, r24	; 0x03
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	9c 81       	ldd	r25, Y+4	; 0x04
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	f1 f7       	brne	.-4      	; 0x1db8 <LCD_voidWriteBitsToSend+0x25a>
    1dbc:	9c 83       	std	Y+4, r25	; 0x04
    1dbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	9e 83       	std	Y+6, r25	; 0x06
    1dc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dca:	8d 81       	ldd	r24, Y+5	; 0x05
    1dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	69 f7       	brne	.-38     	; 0x1dac <LCD_voidWriteBitsToSend+0x24e>
    1dd2:	14 c0       	rjmp	.+40     	; 0x1dfc <LCD_voidWriteBitsToSend+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd6:	78 85       	ldd	r23, Y+8	; 0x08
    1dd8:	89 85       	ldd	r24, Y+9	; 0x09
    1dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	9e 83       	std	Y+6, r25	; 0x06
    1de6:	8d 83       	std	Y+5, r24	; 0x05
    1de8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dea:	9e 81       	ldd	r25, Y+6	; 0x06
    1dec:	9a 83       	std	Y+2, r25	; 0x02
    1dee:	89 83       	std	Y+1, r24	; 0x01
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	9a 81       	ldd	r25, Y+2	; 0x02
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <LCD_voidWriteBitsToSend+0x296>
    1df8:	9a 83       	std	Y+2, r25	; 0x02
    1dfa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_LOW);
    1dfc:	82 e0       	ldi	r24, 0x02	; 2
    1dfe:	61 e0       	ldi	r22, 0x01	; 1
    1e00:	40 e0       	ldi	r20, 0x00	; 0
    1e02:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <DIO_voidSetPinValue>




}
    1e06:	6d 96       	adiw	r28, 0x1d	; 29
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	f8 94       	cli
    1e0c:	de bf       	out	0x3e, r29	; 62
    1e0e:	0f be       	out	0x3f, r0	; 63
    1e10:	cd bf       	out	0x3d, r28	; 61
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <LCD_voidWriteData>:



/***********************************************************************************/
void LCD_voidWriteData(u8 copy_u8data)
{
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	0f 92       	push	r0
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to HIGH */
	DIO_voidSetPinValue(RS_PORT,RS_PIN,PIN_HIGH);
    1e24:	82 e0       	ldi	r24, 0x02	; 2
    1e26:	60 e0       	ldi	r22, 0x00	; 0
    1e28:	41 e0       	ldi	r20, 0x01	; 1
    1e2a:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <DIO_voidSetPinValue>

	LCD_voidWriteBitsToSend(copy_u8data);
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <LCD_voidWriteBitsToSend>
}
    1e34:	0f 90       	pop	r0
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	08 95       	ret

00001e3c <LCD_voidWriteCommand>:


/***********************************************************************************/

void LCD_voidWriteCommand(u8 copy_u8Command)
{
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	0f 92       	push	r0
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to low */
	DIO_voidSetPinValue(RS_PORT,RS_PIN,PIN_LOW);
    1e48:	82 e0       	ldi	r24, 0x02	; 2
    1e4a:	60 e0       	ldi	r22, 0x00	; 0
    1e4c:	40 e0       	ldi	r20, 0x00	; 0
    1e4e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <DIO_voidSetPinValue>


	LCD_voidWriteBitsToSend(copy_u8Command);
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <LCD_voidWriteBitsToSend>
}
    1e58:	0f 90       	pop	r0
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	08 95       	ret

00001e60 <LCD_voidWriteString>:
/***********************************************************************************/



void LCD_voidWriteString(u8 * copy_str)
{
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <LCD_voidWriteString+0x6>
    1e66:	00 d0       	rcall	.+0      	; 0x1e68 <LCD_voidWriteString+0x8>
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	9c 83       	std	Y+4, r25	; 0x04
    1e6e:	8b 83       	std	Y+3, r24	; 0x03

	u16 i= ZERO;
    1e70:	1a 82       	std	Y+2, r1	; 0x02
    1e72:	19 82       	std	Y+1, r1	; 0x01
    1e74:	0f c0       	rjmp	.+30     	; 0x1e94 <LCD_voidWriteString+0x34>
	while(copy_str[i] != '\0')
	{
		LCD_voidWriteData(copy_str[i]);
    1e76:	2b 81       	ldd	r18, Y+3	; 0x03
    1e78:	3c 81       	ldd	r19, Y+4	; 0x04
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7e:	f9 01       	movw	r30, r18
    1e80:	e8 0f       	add	r30, r24
    1e82:	f9 1f       	adc	r31, r25
    1e84:	80 81       	ld	r24, Z
    1e86:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <LCD_voidWriteData>
		i++;
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8e:	01 96       	adiw	r24, 0x01	; 1
    1e90:	9a 83       	std	Y+2, r25	; 0x02
    1e92:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidWriteString(u8 * copy_str)
{

	u16 i= ZERO;
	while(copy_str[i] != '\0')
    1e94:	2b 81       	ldd	r18, Y+3	; 0x03
    1e96:	3c 81       	ldd	r19, Y+4	; 0x04
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9c:	f9 01       	movw	r30, r18
    1e9e:	e8 0f       	add	r30, r24
    1ea0:	f9 1f       	adc	r31, r25
    1ea2:	80 81       	ld	r24, Z
    1ea4:	88 23       	and	r24, r24
    1ea6:	39 f7       	brne	.-50     	; 0x1e76 <LCD_voidWriteString+0x16>
	{
		LCD_voidWriteData(copy_str[i]);
		i++;
	}
}
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <LCD_voidGoToXY>:


/***********************************************************************************/
void LCD_voidGoToXY(u8 copy_u8row,u8 copy_u8col)
{
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	27 97       	sbiw	r28, 0x07	; 7
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	8e 83       	std	Y+6, r24	; 0x06
    1ecc:	6f 83       	std	Y+7, r22	; 0x07
	 * 0x40 --> address row 1
	 * 0x14 --> address row 2
	 * 0x54 --> address row 3
	 * copy_u8col --> col num
	 * */
	u8 rows_address[4]={0x00,0x40,0x14,0x54};
    1ece:	1a 82       	std	Y+2, r1	; 0x02
    1ed0:	80 e4       	ldi	r24, 0x40	; 64
    1ed2:	8b 83       	std	Y+3, r24	; 0x03
    1ed4:	84 e1       	ldi	r24, 0x14	; 20
    1ed6:	8c 83       	std	Y+4, r24	; 0x04
    1ed8:	84 e5       	ldi	r24, 0x54	; 84
    1eda:	8d 83       	std	Y+5, r24	; 0x05

	u8 local_address=( rows_address[copy_u8row]  + copy_u8col ) + SET_DDRAM_ADDRESS ;
    1edc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ede:	28 2f       	mov	r18, r24
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	02 96       	adiw	r24, 0x02	; 2
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	e2 0f       	add	r30, r18
    1eea:	f3 1f       	adc	r31, r19
    1eec:	90 81       	ld	r25, Z
    1eee:	8f 81       	ldd	r24, Y+7	; 0x07
    1ef0:	89 0f       	add	r24, r25
    1ef2:	80 58       	subi	r24, 0x80	; 128
    1ef4:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteCommand(local_address) ;
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidWriteCommand>

}
    1efc:	27 96       	adiw	r28, 0x07	; 7
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <LCD_voidClear>:

/***********************************************************************************/

void LCD_voidClear(void)
{
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
	LCD_voidWriteCommand( DISPLAY_CLEAR);
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidWriteCommand>

}
    1f1c:	cf 91       	pop	r28
    1f1e:	df 91       	pop	r29
    1f20:	08 95       	ret

00001f22 <LCD_voidShift>:



/***********************************************************************************/

void LCD_voidShift(u8 copy_u8direction){
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	0f 92       	push	r0
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	89 83       	std	Y+1, r24	; 0x01
	if (copy_u8direction==SHIFT_DISPLAY_RIGHT)
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	8c 31       	cpi	r24, 0x1C	; 28
    1f32:	21 f4       	brne	.+8      	; 0x1f3c <LCD_voidShift+0x1a>
		{
			//Shift right
			LCD_voidWriteCommand(SHIFT_DISPLAY_RIGHT);
    1f34:	8c e1       	ldi	r24, 0x1C	; 28
    1f36:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidWriteCommand>
    1f3a:	06 c0       	rjmp	.+12     	; 0x1f48 <LCD_voidShift+0x26>
		}
		else if (copy_u8direction==SHIFT_DISPLAY_LIFT)
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	88 31       	cpi	r24, 0x18	; 24
    1f40:	19 f4       	brne	.+6      	; 0x1f48 <LCD_voidShift+0x26>
		{
			//Shift left
			LCD_voidWriteCommand(SHIFT_DISPLAY_LIFT);
    1f42:	88 e1       	ldi	r24, 0x18	; 24
    1f44:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidWriteCommand>
		}
}
    1f48:	0f 90       	pop	r0
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <LCD_voidWriteNumber>:

/***********************************************************************************/

void LCD_voidWriteNumber( u32 Copy_u8num )

{
    1f50:	0f 93       	push	r16
    1f52:	1f 93       	push	r17
    1f54:	df 93       	push	r29
    1f56:	cf 93       	push	r28
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	63 97       	sbiw	r28, 0x13	; 19
    1f5e:	0f b6       	in	r0, 0x3f	; 63
    1f60:	f8 94       	cli
    1f62:	de bf       	out	0x3e, r29	; 62
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	cd bf       	out	0x3d, r28	; 61
    1f68:	68 8b       	std	Y+16, r22	; 0x10
    1f6a:	79 8b       	std	Y+17, r23	; 0x11
    1f6c:	8a 8b       	std	Y+18, r24	; 0x12
    1f6e:	9b 8b       	std	Y+19, r25	; 0x13
	u32 LOCAL_NUMBER=Copy_u8num ;
    1f70:	88 89       	ldd	r24, Y+16	; 0x10
    1f72:	99 89       	ldd	r25, Y+17	; 0x11
    1f74:	aa 89       	ldd	r26, Y+18	; 0x12
    1f76:	bb 89       	ldd	r27, Y+19	; 0x13
    1f78:	8a 83       	std	Y+2, r24	; 0x02
    1f7a:	9b 83       	std	Y+3, r25	; 0x03
    1f7c:	ac 83       	std	Y+4, r26	; 0x04
    1f7e:	bd 83       	std	Y+5, r27	; 0x05
	u8 LOCAL_ARR[10]   ;
	u8 i=ZERO ;
    1f80:	19 82       	std	Y+1, r1	; 0x01


	do
	{
		LOCAL_ARR[i]= ( (LOCAL_NUMBER%10)+'0' );
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	08 2f       	mov	r16, r24
    1f86:	10 e0       	ldi	r17, 0x00	; 0
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8c:	ac 81       	ldd	r26, Y+4	; 0x04
    1f8e:	bd 81       	ldd	r27, Y+5	; 0x05
    1f90:	2a e0       	ldi	r18, 0x0A	; 10
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e0       	ldi	r20, 0x00	; 0
    1f96:	50 e0       	ldi	r21, 0x00	; 0
    1f98:	bc 01       	movw	r22, r24
    1f9a:	cd 01       	movw	r24, r26
    1f9c:	0e 94 57 13 	call	0x26ae	; 0x26ae <__udivmodsi4>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	20 5d       	subi	r18, 0xD0	; 208
    1fa8:	ce 01       	movw	r24, r28
    1faa:	06 96       	adiw	r24, 0x06	; 6
    1fac:	fc 01       	movw	r30, r24
    1fae:	e0 0f       	add	r30, r16
    1fb0:	f1 1f       	adc	r31, r17
    1fb2:	20 83       	st	Z, r18
		LOCAL_NUMBER=LOCAL_NUMBER/10 ;
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb8:	ac 81       	ldd	r26, Y+4	; 0x04
    1fba:	bd 81       	ldd	r27, Y+5	; 0x05
    1fbc:	2a e0       	ldi	r18, 0x0A	; 10
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e0       	ldi	r20, 0x00	; 0
    1fc2:	50 e0       	ldi	r21, 0x00	; 0
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	0e 94 57 13 	call	0x26ae	; 0x26ae <__udivmodsi4>
    1fcc:	da 01       	movw	r26, r20
    1fce:	c9 01       	movw	r24, r18
    1fd0:	8a 83       	std	Y+2, r24	; 0x02
    1fd2:	9b 83       	std	Y+3, r25	; 0x03
    1fd4:	ac 83       	std	Y+4, r26	; 0x04
    1fd6:	bd 83       	std	Y+5, r27	; 0x05
		i++ ;
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	8f 5f       	subi	r24, 0xFF	; 255
    1fdc:	89 83       	std	Y+1, r24	; 0x01
	}
	while(LOCAL_NUMBER!=ZERO);
    1fde:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe2:	ac 81       	ldd	r26, Y+4	; 0x04
    1fe4:	bd 81       	ldd	r27, Y+5	; 0x05
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	a1 05       	cpc	r26, r1
    1fea:	b1 05       	cpc	r27, r1
    1fec:	51 f6       	brne	.-108    	; 0x1f82 <LCD_voidWriteNumber+0x32>
    1fee:	11 c0       	rjmp	.+34     	; 0x2012 <LCD_voidWriteNumber+0xc2>


	for(;i>0;i--)
	{
		LCD_voidWriteData(LOCAL_ARR[i-ONE]);
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	88 2f       	mov	r24, r24
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	9c 01       	movw	r18, r24
    1ff8:	21 50       	subi	r18, 0x01	; 1
    1ffa:	30 40       	sbci	r19, 0x00	; 0
    1ffc:	ce 01       	movw	r24, r28
    1ffe:	06 96       	adiw	r24, 0x06	; 6
    2000:	fc 01       	movw	r30, r24
    2002:	e2 0f       	add	r30, r18
    2004:	f3 1f       	adc	r31, r19
    2006:	80 81       	ld	r24, Z
    2008:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <LCD_voidWriteData>
		i++ ;
	}
	while(LOCAL_NUMBER!=ZERO);


	for(;i>0;i--)
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	81 50       	subi	r24, 0x01	; 1
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	88 23       	and	r24, r24
    2016:	61 f7       	brne	.-40     	; 0x1ff0 <LCD_voidWriteNumber+0xa0>
		LCD_voidWriteData(LOCAL_ARR[i-ONE]);
	}



}
    2018:	63 96       	adiw	r28, 0x13	; 19
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	1f 91       	pop	r17
    202a:	0f 91       	pop	r16
    202c:	08 95       	ret

0000202e <LCD_voidWriteSpecialCharToCGRAM>:

/***********************************************************************************/

void LCD_voidWriteSpecialCharToCGRAM(u8 *copy_u8data , u8 copy_u8ByteNum )

{
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	00 d0       	rcall	.+0      	; 0x2034 <LCD_voidWriteSpecialCharToCGRAM+0x6>
    2034:	00 d0       	rcall	.+0      	; 0x2036 <LCD_voidWriteSpecialCharToCGRAM+0x8>
    2036:	0f 92       	push	r0
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
    203c:	9c 83       	std	Y+4, r25	; 0x04
    203e:	8b 83       	std	Y+3, r24	; 0x03
    2040:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8CGramAddrss ;
	u8 counter=ZERO ;
    2042:	19 82       	std	Y+1, r1	; 0x01

	Local_u8CGramAddrss = ( (copy_u8ByteNum * EIGHT)+SET_CGRAM_ADDRESS ) ;
    2044:	8d 81       	ldd	r24, Y+5	; 0x05
    2046:	88 2f       	mov	r24, r24
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	08 96       	adiw	r24, 0x08	; 8
    204c:	88 0f       	add	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	88 0f       	add	r24, r24
    2052:	99 1f       	adc	r25, r25
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	8a 83       	std	Y+2, r24	; 0x02

	LCD_voidWriteCommand( Local_u8CGramAddrss  ) ;
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidWriteCommand>


	for(counter=ZERO;counter<EIGHT;counter++)
    2060:	19 82       	std	Y+1, r1	; 0x01
    2062:	0e c0       	rjmp	.+28     	; 0x2080 <LCD_voidWriteSpecialCharToCGRAM+0x52>
	{
		LCD_voidWriteData(copy_u8data[counter]);
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	28 2f       	mov	r18, r24
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	9c 81       	ldd	r25, Y+4	; 0x04
    206e:	fc 01       	movw	r30, r24
    2070:	e2 0f       	add	r30, r18
    2072:	f3 1f       	adc	r31, r19
    2074:	80 81       	ld	r24, Z
    2076:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <LCD_voidWriteData>
	Local_u8CGramAddrss = ( (copy_u8ByteNum * EIGHT)+SET_CGRAM_ADDRESS ) ;

	LCD_voidWriteCommand( Local_u8CGramAddrss  ) ;


	for(counter=ZERO;counter<EIGHT;counter++)
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	8f 5f       	subi	r24, 0xFF	; 255
    207e:	89 83       	std	Y+1, r24	; 0x01
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	88 30       	cpi	r24, 0x08	; 8
    2084:	78 f3       	brcs	.-34     	; 0x2064 <LCD_voidWriteSpecialCharToCGRAM+0x36>
	{
		LCD_voidWriteData(copy_u8data[counter]);
	}

	//Reset cursor
	LCD_voidGoToXY(0,0);
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	60 e0       	ldi	r22, 0x00	; 0
    208a:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <LCD_voidGoToXY>

}
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	cf 91       	pop	r28
    209a:	df 91       	pop	r29
    209c:	08 95       	ret

0000209e <LCD_voidDisplaySpecialChar>:

/***********************************************************************************/

void LCD_voidDisplaySpecialChar(u8 copy_u8ByteNum )
{
    209e:	df 93       	push	r29
    20a0:	cf 93       	push	r28
    20a2:	0f 92       	push	r0
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteData(copy_u8ByteNum);
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <LCD_voidWriteData>

}
    20b0:	0f 90       	pop	r0
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <OverFlowFunction>:

u32 OverFlowCounter = 0;

u8 edge = RISING_EDGE, RemainingTime = 0;

void OverFlowFunction(){
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
	OverFlowCounter++;
    20c0:	80 91 9c 01 	lds	r24, 0x019C
    20c4:	90 91 9d 01 	lds	r25, 0x019D
    20c8:	a0 91 9e 01 	lds	r26, 0x019E
    20cc:	b0 91 9f 01 	lds	r27, 0x019F
    20d0:	01 96       	adiw	r24, 0x01	; 1
    20d2:	a1 1d       	adc	r26, r1
    20d4:	b1 1d       	adc	r27, r1
    20d6:	80 93 9c 01 	sts	0x019C, r24
    20da:	90 93 9d 01 	sts	0x019D, r25
    20de:	a0 93 9e 01 	sts	0x019E, r26
    20e2:	b0 93 9f 01 	sts	0x019F, r27
}
    20e6:	cf 91       	pop	r28
    20e8:	df 91       	pop	r29
    20ea:	08 95       	ret

000020ec <EXTINT_voidTriger>:

void EXTINT_voidTriger(){
    20ec:	df 93       	push	r29
    20ee:	cf 93       	push	r28
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62

	//rising edge state
	if (edge==RISING_EDGE){
    20f4:	80 91 7c 01 	lds	r24, 0x017C
    20f8:	81 30       	cpi	r24, 0x01	; 1
    20fa:	09 f0       	breq	.+2      	; 0x20fe <EXTINT_voidTriger+0x12>
    20fc:	5d c0       	rjmp	.+186    	; 0x21b8 <EXTINT_voidTriger+0xcc>

		LowState = FALSE;
    20fe:	10 92 8f 01 	sts	0x018F, r1

		HighState = TRUE;
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	80 93 8e 01 	sts	0x018E, r24

		RemainingTime = TIMER0_VoidVal();
    2108:	0e 94 9a 07 	call	0xf34	; 0xf34 <TIMER0_VoidVal>
    210c:	80 93 a0 01 	sts	0x01A0, r24

		TotalTime = (RemainingTime + (256*OverFlowCounter) );
    2110:	80 91 a0 01 	lds	r24, 0x01A0
    2114:	28 2f       	mov	r18, r24
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e0       	ldi	r20, 0x00	; 0
    211a:	50 e0       	ldi	r21, 0x00	; 0
    211c:	80 91 9c 01 	lds	r24, 0x019C
    2120:	90 91 9d 01 	lds	r25, 0x019D
    2124:	a0 91 9e 01 	lds	r26, 0x019E
    2128:	b0 91 9f 01 	lds	r27, 0x019F
    212c:	ba 2f       	mov	r27, r26
    212e:	a9 2f       	mov	r26, r25
    2130:	98 2f       	mov	r25, r24
    2132:	88 27       	eor	r24, r24
    2134:	82 0f       	add	r24, r18
    2136:	93 1f       	adc	r25, r19
    2138:	a4 1f       	adc	r26, r20
    213a:	b5 1f       	adc	r27, r21
    213c:	bc 01       	movw	r22, r24
    213e:	cd 01       	movw	r24, r26
    2140:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	80 93 94 01 	sts	0x0194, r24
    214c:	90 93 95 01 	sts	0x0195, r25
    2150:	a0 93 96 01 	sts	0x0196, r26
    2154:	b0 93 97 01 	sts	0x0197, r27

		DutyCycle = (TotalONTime / TotalTime);
    2158:	80 91 90 01 	lds	r24, 0x0190
    215c:	90 91 91 01 	lds	r25, 0x0191
    2160:	a0 91 92 01 	lds	r26, 0x0192
    2164:	b0 91 93 01 	lds	r27, 0x0193
    2168:	20 91 94 01 	lds	r18, 0x0194
    216c:	30 91 95 01 	lds	r19, 0x0195
    2170:	40 91 96 01 	lds	r20, 0x0196
    2174:	50 91 97 01 	lds	r21, 0x0197
    2178:	bc 01       	movw	r22, r24
    217a:	cd 01       	movw	r24, r26
    217c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	80 93 98 01 	sts	0x0198, r24
    2188:	90 93 99 01 	sts	0x0199, r25
    218c:	a0 93 9a 01 	sts	0x019A, r26
    2190:	b0 93 9b 01 	sts	0x019B, r27

		TIMER0_VoidSetPreload(0);
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	0e 94 8c 07 	call	0xf18	; 0xf18 <TIMER0_VoidSetPreload>

		OverFlowCounter = 0;
    219a:	10 92 9c 01 	sts	0x019C, r1
    219e:	10 92 9d 01 	sts	0x019D, r1
    21a2:	10 92 9e 01 	sts	0x019E, r1
    21a6:	10 92 9f 01 	sts	0x019F, r1

		EXTINT_voidInit(EXT0_ID,FALLING_EDGE);
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	60 e0       	ldi	r22, 0x00	; 0
    21ae:	0e 94 fa 07 	call	0xff4	; 0xff4 <EXTINT_voidInit>

		edge = FALLING_EDGE;
    21b2:	10 92 7c 01 	sts	0x017C, r1
    21b6:	38 c0       	rjmp	.+112    	; 0x2228 <EXTINT_voidTriger+0x13c>

	}

	//falling edge state
	else if (edge==FALLING_EDGE){
    21b8:	80 91 7c 01 	lds	r24, 0x017C
    21bc:	88 23       	and	r24, r24
    21be:	a1 f5       	brne	.+104    	; 0x2228 <EXTINT_voidTriger+0x13c>

		HighState = FALSE;
    21c0:	10 92 8e 01 	sts	0x018E, r1

		LowState = TRUE;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	80 93 8f 01 	sts	0x018F, r24

		RemainingTime = TIMER0_VoidVal();
    21ca:	0e 94 9a 07 	call	0xf34	; 0xf34 <TIMER0_VoidVal>
    21ce:	80 93 a0 01 	sts	0x01A0, r24

		TotalONTime = (RemainingTime + (256*OverFlowCounter) );
    21d2:	80 91 a0 01 	lds	r24, 0x01A0
    21d6:	28 2f       	mov	r18, r24
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	50 e0       	ldi	r21, 0x00	; 0
    21de:	80 91 9c 01 	lds	r24, 0x019C
    21e2:	90 91 9d 01 	lds	r25, 0x019D
    21e6:	a0 91 9e 01 	lds	r26, 0x019E
    21ea:	b0 91 9f 01 	lds	r27, 0x019F
    21ee:	ba 2f       	mov	r27, r26
    21f0:	a9 2f       	mov	r26, r25
    21f2:	98 2f       	mov	r25, r24
    21f4:	88 27       	eor	r24, r24
    21f6:	82 0f       	add	r24, r18
    21f8:	93 1f       	adc	r25, r19
    21fa:	a4 1f       	adc	r26, r20
    21fc:	b5 1f       	adc	r27, r21
    21fe:	bc 01       	movw	r22, r24
    2200:	cd 01       	movw	r24, r26
    2202:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	80 93 90 01 	sts	0x0190, r24
    220e:	90 93 91 01 	sts	0x0191, r25
    2212:	a0 93 92 01 	sts	0x0192, r26
    2216:	b0 93 93 01 	sts	0x0193, r27

		EXTINT_voidInit(EXT0_ID,RISING_EDGE);
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	61 e0       	ldi	r22, 0x01	; 1
    221e:	0e 94 fa 07 	call	0xff4	; 0xff4 <EXTINT_voidInit>

		edge = RISING_EDGE;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	80 93 7c 01 	sts	0x017C, r24
	}
}
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	08 95       	ret

0000222e <main>:

int main(){
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	c0 54       	subi	r28, 0x40	; 64
    2238:	d0 40       	sbci	r29, 0x00	; 0
    223a:	0f b6       	in	r0, 0x3f	; 63
    223c:	f8 94       	cli
    223e:	de bf       	out	0x3e, r29	; 62
    2240:	0f be       	out	0x3f, r0	; 63
    2242:	cd bf       	out	0x3d, r28	; 61

	//LCD

	LCD_voidInit();
    2244:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <LCD_voidInit>

	u8 LCDLocation = 0;
    2248:	1b a6       	std	Y+43, r1	; 0x2b
	   (u8)0b00000000,
	   (u8)0b00000000,
	   (u8)0b00000000,
	   (u8)0b00000000,
	   (u8)0b00000000
	};
    224a:	88 e0       	ldi	r24, 0x08	; 8
    224c:	fe 01       	movw	r30, r28
    224e:	bc 96       	adiw	r30, 0x2c	; 44
    2250:	df 01       	movw	r26, r30
    2252:	98 2f       	mov	r25, r24
    2254:	1d 92       	st	X+, r1
    2256:	9a 95       	dec	r25
    2258:	e9 f7       	brne	.-6      	; 0x2254 <main+0x26>
    225a:	8f ef       	ldi	r24, 0xFF	; 255
    225c:	8c a7       	std	Y+44, r24	; 0x2c
		(u8)0b00000000,
		(u8)0b00000000,
		(u8)0b00000000,
		(u8)0b11111111,
		(u8)0b11111111
	};
    225e:	de 01       	movw	r26, r28
    2260:	d4 96       	adiw	r26, 0x34	; 52
    2262:	bd af       	std	Y+61, r27	; 0x3d
    2264:	ac af       	std	Y+60, r26	; 0x3c
    2266:	ed e7       	ldi	r30, 0x7D	; 125
    2268:	f1 e0       	ldi	r31, 0x01	; 1
    226a:	ff af       	std	Y+63, r31	; 0x3f
    226c:	ee af       	std	Y+62, r30	; 0x3e
    226e:	f8 e0       	ldi	r31, 0x08	; 8
    2270:	21 96       	adiw	r28, 0x01	; 1
    2272:	ff af       	std	Y+63, r31	; 0x3f
    2274:	21 97       	sbiw	r28, 0x01	; 1
    2276:	ae ad       	ldd	r26, Y+62	; 0x3e
    2278:	bf ad       	ldd	r27, Y+63	; 0x3f
    227a:	0c 90       	ld	r0, X
    227c:	ee ad       	ldd	r30, Y+62	; 0x3e
    227e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2280:	31 96       	adiw	r30, 0x01	; 1
    2282:	ff af       	std	Y+63, r31	; 0x3f
    2284:	ee af       	std	Y+62, r30	; 0x3e
    2286:	ac ad       	ldd	r26, Y+60	; 0x3c
    2288:	bd ad       	ldd	r27, Y+61	; 0x3d
    228a:	0c 92       	st	X, r0
    228c:	ec ad       	ldd	r30, Y+60	; 0x3c
    228e:	fd ad       	ldd	r31, Y+61	; 0x3d
    2290:	31 96       	adiw	r30, 0x01	; 1
    2292:	fd af       	std	Y+61, r31	; 0x3d
    2294:	ec af       	std	Y+60, r30	; 0x3c
    2296:	21 96       	adiw	r28, 0x01	; 1
    2298:	ff ad       	ldd	r31, Y+63	; 0x3f
    229a:	21 97       	sbiw	r28, 0x01	; 1
    229c:	f1 50       	subi	r31, 0x01	; 1
    229e:	21 96       	adiw	r28, 0x01	; 1
    22a0:	ff af       	std	Y+63, r31	; 0x3f
    22a2:	21 97       	sbiw	r28, 0x01	; 1
    22a4:	21 96       	adiw	r28, 0x01	; 1
    22a6:	8f ad       	ldd	r24, Y+63	; 0x3f
    22a8:	21 97       	sbiw	r28, 0x01	; 1
    22aa:	88 23       	and	r24, r24
    22ac:	21 f7       	brne	.-56     	; 0x2276 <main+0x48>

	//EXTINT0

	DIO_voidSetPinDirection(PORTD_ID,PIN2,PIN_INPUT);
    22ae:	83 e0       	ldi	r24, 0x03	; 3
    22b0:	62 e0       	ldi	r22, 0x02	; 2
    22b2:	40 e0       	ldi	r20, 0x00	; 0
    22b4:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(PORTD_ID,PIN2,PIN_HIGH);
    22b8:	83 e0       	ldi	r24, 0x03	; 3
    22ba:	62 e0       	ldi	r22, 0x02	; 2
    22bc:	41 e0       	ldi	r20, 0x01	; 1
    22be:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <DIO_voidSetPinValue>

	EXTINT_voidInit(EXT0_ID,RISING_EDGE);
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	61 e0       	ldi	r22, 0x01	; 1
    22c6:	0e 94 fa 07 	call	0xff4	; 0xff4 <EXTINT_voidInit>

	EXTINT_voidSetCallBack(EXTINT_voidTriger,EXT0_ID);
    22ca:	86 e7       	ldi	r24, 0x76	; 118
    22cc:	90 e1       	ldi	r25, 0x10	; 16
    22ce:	60 e0       	ldi	r22, 0x00	; 0
    22d0:	0e 94 9f 08 	call	0x113e	; 0x113e <EXTINT_voidSetCallBack>

	//Timer0
	TIMER0_VoidInit();
    22d4:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <TIMER0_VoidInit>

	TIMER_voidSetCallBack(OverFlowFunction);
    22d8:	8c e5       	ldi	r24, 0x5C	; 92
    22da:	90 e1       	ldi	r25, 0x10	; 16
    22dc:	0e 94 17 07 	call	0xe2e	; 0xe2e <TIMER_voidSetCallBack>

	TIMER0_VoidStart();
    22e0:	0e 94 7f 07 	call	0xefe	; 0xefe <TIMER0_VoidStart>

	//Global Interrupt Enable
	GIE_Enable();
    22e4:	0e 94 de 07 	call	0xfbc	; 0xfbc <GIE_Enable>

	//Send the custom characters to the CGRAM
	LCD_voidWriteSpecialCharToCGRAM(High,HIGH_ADDRESS);
    22e8:	ce 01       	movw	r24, r28
    22ea:	8c 96       	adiw	r24, 0x2c	; 44
    22ec:	61 e0       	ldi	r22, 0x01	; 1
    22ee:	0e 94 17 10 	call	0x202e	; 0x202e <LCD_voidWriteSpecialCharToCGRAM>

	LCD_voidWriteSpecialCharToCGRAM(Low,LOW_ADDRESS);
    22f2:	ce 01       	movw	r24, r28
    22f4:	c4 96       	adiw	r24, 0x34	; 52
    22f6:	62 e0       	ldi	r22, 0x02	; 2
    22f8:	0e 94 17 10 	call	0x202e	; 0x202e <LCD_voidWriteSpecialCharToCGRAM>

	while (1){


		//Frequency
		LCD_voidGoToXY(0,0);
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	60 e0       	ldi	r22, 0x00	; 0
    2300:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <LCD_voidGoToXY>

		LCD_voidWriteString("F: ");
    2304:	80 e6       	ldi	r24, 0x60	; 96
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <LCD_voidWriteString>

		LCD_voidWriteNumber((u8)((1 / DutyCycle) *1000));
    230c:	20 91 98 01 	lds	r18, 0x0198
    2310:	30 91 99 01 	lds	r19, 0x0199
    2314:	40 91 9a 01 	lds	r20, 0x019A
    2318:	50 91 9b 01 	lds	r21, 0x019B
    231c:	60 e0       	ldi	r22, 0x00	; 0
    231e:	70 e0       	ldi	r23, 0x00	; 0
    2320:	80 e8       	ldi	r24, 0x80	; 128
    2322:	9f e3       	ldi	r25, 0x3F	; 63
    2324:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	bc 01       	movw	r22, r24
    232e:	cd 01       	movw	r24, r26
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	4a e7       	ldi	r20, 0x7A	; 122
    2336:	54 e4       	ldi	r21, 0x44	; 68
    2338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	bc 01       	movw	r22, r24
    2342:	cd 01       	movw	r24, r26
    2344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	88 2f       	mov	r24, r24
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	a0 e0       	ldi	r26, 0x00	; 0
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	bc 01       	movw	r22, r24
    2356:	cd 01       	movw	r24, r26
    2358:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <LCD_voidWriteNumber>

		LCD_voidWriteString(" KHz");
    235c:	84 e6       	ldi	r24, 0x64	; 100
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <LCD_voidWriteString>

		//Duty Cycle
		LCD_voidGoToXY(0,12);
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	6c e0       	ldi	r22, 0x0C	; 12
    2368:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <LCD_voidGoToXY>

		LCD_voidWriteString("D: ");
    236c:	89 e6       	ldi	r24, 0x69	; 105
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <LCD_voidWriteString>

		LCD_voidWriteNumber((u8)(DutyCycle *100));
    2374:	80 91 98 01 	lds	r24, 0x0198
    2378:	90 91 99 01 	lds	r25, 0x0199
    237c:	a0 91 9a 01 	lds	r26, 0x019A
    2380:	b0 91 9b 01 	lds	r27, 0x019B
    2384:	bc 01       	movw	r22, r24
    2386:	cd 01       	movw	r24, r26
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	48 ec       	ldi	r20, 0xC8	; 200
    238e:	52 e4       	ldi	r21, 0x42	; 66
    2390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	bc 01       	movw	r22, r24
    239a:	cd 01       	movw	r24, r26
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	88 2f       	mov	r24, r24
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	a0 e0       	ldi	r26, 0x00	; 0
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	bc 01       	movw	r22, r24
    23ae:	cd 01       	movw	r24, r26
    23b0:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <LCD_voidWriteNumber>

		LCD_voidWriteString(" %");
    23b4:	8d e6       	ldi	r24, 0x6D	; 109
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <LCD_voidWriteString>

		//Illustration
		LCD_voidGoToXY(2,LCDLocation);
    23bc:	82 e0       	ldi	r24, 0x02	; 2
    23be:	6b a5       	ldd	r22, Y+43	; 0x2b
    23c0:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <LCD_voidGoToXY>
    23c4:	78 c0       	rjmp	.+240    	; 0x24b6 <main+0x288>

		while(HighState==TRUE){
			LCD_voidDisplaySpecialChar(HIGH_ADDRESS);
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	0e 94 4f 10 	call	0x209e	; 0x209e <LCD_voidDisplaySpecialChar>
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	a8 e4       	ldi	r26, 0x48	; 72
    23d2:	b2 e4       	ldi	r27, 0x42	; 66
    23d4:	8f a3       	std	Y+39, r24	; 0x27
    23d6:	98 a7       	std	Y+40, r25	; 0x28
    23d8:	a9 a7       	std	Y+41, r26	; 0x29
    23da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23dc:	6f a1       	ldd	r22, Y+39	; 0x27
    23de:	78 a5       	ldd	r23, Y+40	; 0x28
    23e0:	89 a5       	ldd	r24, Y+41	; 0x29
    23e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	4a e7       	ldi	r20, 0x7A	; 122
    23ea:	55 e4       	ldi	r21, 0x45	; 69
    23ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	8b a3       	std	Y+35, r24	; 0x23
    23f6:	9c a3       	std	Y+36, r25	; 0x24
    23f8:	ad a3       	std	Y+37, r26	; 0x25
    23fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23fc:	6b a1       	ldd	r22, Y+35	; 0x23
    23fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2400:	8d a1       	ldd	r24, Y+37	; 0x25
    2402:	9e a1       	ldd	r25, Y+38	; 0x26
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e8       	ldi	r20, 0x80	; 128
    240a:	5f e3       	ldi	r21, 0x3F	; 63
    240c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2410:	88 23       	and	r24, r24
    2412:	2c f4       	brge	.+10     	; 0x241e <main+0x1f0>
		__ticks = 1;
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	9a a3       	std	Y+34, r25	; 0x22
    241a:	89 a3       	std	Y+33, r24	; 0x21
    241c:	3f c0       	rjmp	.+126    	; 0x249c <main+0x26e>
	else if (__tmp > 65535)
    241e:	6b a1       	ldd	r22, Y+35	; 0x23
    2420:	7c a1       	ldd	r23, Y+36	; 0x24
    2422:	8d a1       	ldd	r24, Y+37	; 0x25
    2424:	9e a1       	ldd	r25, Y+38	; 0x26
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	3f ef       	ldi	r19, 0xFF	; 255
    242a:	4f e7       	ldi	r20, 0x7F	; 127
    242c:	57 e4       	ldi	r21, 0x47	; 71
    242e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2432:	18 16       	cp	r1, r24
    2434:	4c f5       	brge	.+82     	; 0x2488 <main+0x25a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2436:	6f a1       	ldd	r22, Y+39	; 0x27
    2438:	78 a5       	ldd	r23, Y+40	; 0x28
    243a:	89 a5       	ldd	r24, Y+41	; 0x29
    243c:	9a a5       	ldd	r25, Y+42	; 0x2a
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	40 e2       	ldi	r20, 0x20	; 32
    2444:	51 e4       	ldi	r21, 0x41	; 65
    2446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	bc 01       	movw	r22, r24
    2450:	cd 01       	movw	r24, r26
    2452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	9a a3       	std	Y+34, r25	; 0x22
    245c:	89 a3       	std	Y+33, r24	; 0x21
    245e:	0f c0       	rjmp	.+30     	; 0x247e <main+0x250>
    2460:	80 e9       	ldi	r24, 0x90	; 144
    2462:	91 e0       	ldi	r25, 0x01	; 1
    2464:	98 a3       	std	Y+32, r25	; 0x20
    2466:	8f 8f       	std	Y+31, r24	; 0x1f
    2468:	8f 8d       	ldd	r24, Y+31	; 0x1f
    246a:	98 a1       	ldd	r25, Y+32	; 0x20
    246c:	01 97       	sbiw	r24, 0x01	; 1
    246e:	f1 f7       	brne	.-4      	; 0x246c <main+0x23e>
    2470:	98 a3       	std	Y+32, r25	; 0x20
    2472:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2474:	89 a1       	ldd	r24, Y+33	; 0x21
    2476:	9a a1       	ldd	r25, Y+34	; 0x22
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	9a a3       	std	Y+34, r25	; 0x22
    247c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247e:	89 a1       	ldd	r24, Y+33	; 0x21
    2480:	9a a1       	ldd	r25, Y+34	; 0x22
    2482:	00 97       	sbiw	r24, 0x00	; 0
    2484:	69 f7       	brne	.-38     	; 0x2460 <main+0x232>
    2486:	14 c0       	rjmp	.+40     	; 0x24b0 <main+0x282>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2488:	6b a1       	ldd	r22, Y+35	; 0x23
    248a:	7c a1       	ldd	r23, Y+36	; 0x24
    248c:	8d a1       	ldd	r24, Y+37	; 0x25
    248e:	9e a1       	ldd	r25, Y+38	; 0x26
    2490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	9a a3       	std	Y+34, r25	; 0x22
    249a:	89 a3       	std	Y+33, r24	; 0x21
    249c:	89 a1       	ldd	r24, Y+33	; 0x21
    249e:	9a a1       	ldd	r25, Y+34	; 0x22
    24a0:	9e 8f       	std	Y+30, r25	; 0x1e
    24a2:	8d 8f       	std	Y+29, r24	; 0x1d
    24a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	f1 f7       	brne	.-4      	; 0x24a8 <main+0x27a>
    24ac:	9e 8f       	std	Y+30, r25	; 0x1e
    24ae:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(50);
			LCDLocation++;
    24b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    24b2:	8f 5f       	subi	r24, 0xFF	; 255
    24b4:	8b a7       	std	Y+43, r24	; 0x2b
		LCD_voidWriteString(" %");

		//Illustration
		LCD_voidGoToXY(2,LCDLocation);

		while(HighState==TRUE){
    24b6:	80 91 8e 01 	lds	r24, 0x018E
    24ba:	81 30       	cpi	r24, 0x01	; 1
    24bc:	09 f4       	brne	.+2      	; 0x24c0 <main+0x292>
    24be:	83 cf       	rjmp	.-250    	; 0x23c6 <main+0x198>
    24c0:	78 c0       	rjmp	.+240    	; 0x25b2 <main+0x384>
			LCDLocation++;

		}

		while(LowState==TRUE){
			LCD_voidDisplaySpecialChar(LOW_ADDRESS);
    24c2:	82 e0       	ldi	r24, 0x02	; 2
    24c4:	0e 94 4f 10 	call	0x209e	; 0x209e <LCD_voidDisplaySpecialChar>
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	a8 e4       	ldi	r26, 0x48	; 72
    24ce:	b2 e4       	ldi	r27, 0x42	; 66
    24d0:	89 8f       	std	Y+25, r24	; 0x19
    24d2:	9a 8f       	std	Y+26, r25	; 0x1a
    24d4:	ab 8f       	std	Y+27, r26	; 0x1b
    24d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d8:	69 8d       	ldd	r22, Y+25	; 0x19
    24da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	4a e7       	ldi	r20, 0x7A	; 122
    24e6:	55 e4       	ldi	r21, 0x45	; 69
    24e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	8d 8b       	std	Y+21, r24	; 0x15
    24f2:	9e 8b       	std	Y+22, r25	; 0x16
    24f4:	af 8b       	std	Y+23, r26	; 0x17
    24f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24f8:	6d 89       	ldd	r22, Y+21	; 0x15
    24fa:	7e 89       	ldd	r23, Y+22	; 0x16
    24fc:	8f 89       	ldd	r24, Y+23	; 0x17
    24fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	40 e8       	ldi	r20, 0x80	; 128
    2506:	5f e3       	ldi	r21, 0x3F	; 63
    2508:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    250c:	88 23       	and	r24, r24
    250e:	2c f4       	brge	.+10     	; 0x251a <main+0x2ec>
		__ticks = 1;
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	9c 8b       	std	Y+20, r25	; 0x14
    2516:	8b 8b       	std	Y+19, r24	; 0x13
    2518:	3f c0       	rjmp	.+126    	; 0x2598 <main+0x36a>
	else if (__tmp > 65535)
    251a:	6d 89       	ldd	r22, Y+21	; 0x15
    251c:	7e 89       	ldd	r23, Y+22	; 0x16
    251e:	8f 89       	ldd	r24, Y+23	; 0x17
    2520:	98 8d       	ldd	r25, Y+24	; 0x18
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	3f ef       	ldi	r19, 0xFF	; 255
    2526:	4f e7       	ldi	r20, 0x7F	; 127
    2528:	57 e4       	ldi	r21, 0x47	; 71
    252a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    252e:	18 16       	cp	r1, r24
    2530:	4c f5       	brge	.+82     	; 0x2584 <main+0x356>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2532:	69 8d       	ldd	r22, Y+25	; 0x19
    2534:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2536:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2538:	9c 8d       	ldd	r25, Y+28	; 0x1c
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e2       	ldi	r20, 0x20	; 32
    2540:	51 e4       	ldi	r21, 0x41	; 65
    2542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	bc 01       	movw	r22, r24
    254c:	cd 01       	movw	r24, r26
    254e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	9c 8b       	std	Y+20, r25	; 0x14
    2558:	8b 8b       	std	Y+19, r24	; 0x13
    255a:	0f c0       	rjmp	.+30     	; 0x257a <main+0x34c>
    255c:	80 e9       	ldi	r24, 0x90	; 144
    255e:	91 e0       	ldi	r25, 0x01	; 1
    2560:	9a 8b       	std	Y+18, r25	; 0x12
    2562:	89 8b       	std	Y+17, r24	; 0x11
    2564:	89 89       	ldd	r24, Y+17	; 0x11
    2566:	9a 89       	ldd	r25, Y+18	; 0x12
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	f1 f7       	brne	.-4      	; 0x2568 <main+0x33a>
    256c:	9a 8b       	std	Y+18, r25	; 0x12
    256e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2570:	8b 89       	ldd	r24, Y+19	; 0x13
    2572:	9c 89       	ldd	r25, Y+20	; 0x14
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	9c 8b       	std	Y+20, r25	; 0x14
    2578:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257a:	8b 89       	ldd	r24, Y+19	; 0x13
    257c:	9c 89       	ldd	r25, Y+20	; 0x14
    257e:	00 97       	sbiw	r24, 0x00	; 0
    2580:	69 f7       	brne	.-38     	; 0x255c <main+0x32e>
    2582:	14 c0       	rjmp	.+40     	; 0x25ac <main+0x37e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2584:	6d 89       	ldd	r22, Y+21	; 0x15
    2586:	7e 89       	ldd	r23, Y+22	; 0x16
    2588:	8f 89       	ldd	r24, Y+23	; 0x17
    258a:	98 8d       	ldd	r25, Y+24	; 0x18
    258c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	9c 8b       	std	Y+20, r25	; 0x14
    2596:	8b 8b       	std	Y+19, r24	; 0x13
    2598:	8b 89       	ldd	r24, Y+19	; 0x13
    259a:	9c 89       	ldd	r25, Y+20	; 0x14
    259c:	98 8b       	std	Y+16, r25	; 0x10
    259e:	8f 87       	std	Y+15, r24	; 0x0f
    25a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25a2:	98 89       	ldd	r25, Y+16	; 0x10
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	f1 f7       	brne	.-4      	; 0x25a4 <main+0x376>
    25a8:	98 8b       	std	Y+16, r25	; 0x10
    25aa:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(50);
			LCDLocation++;
    25ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    25ae:	8f 5f       	subi	r24, 0xFF	; 255
    25b0:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(50);
			LCDLocation++;

		}

		while(LowState==TRUE){
    25b2:	80 91 8f 01 	lds	r24, 0x018F
    25b6:	81 30       	cpi	r24, 0x01	; 1
    25b8:	09 f4       	brne	.+2      	; 0x25bc <main+0x38e>
    25ba:	83 cf       	rjmp	.-250    	; 0x24c2 <main+0x294>
			LCDLocation++;

		}


		if(LCDLocation>=18){
    25bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    25be:	82 31       	cpi	r24, 0x12	; 18
    25c0:	18 f0       	brcs	.+6      	; 0x25c8 <main+0x39a>
			LCD_voidClear();
    25c2:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <LCD_voidClear>
			LCDLocation = 0;
    25c6:	1b a6       	std	Y+43, r1	; 0x2b
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	a8 e4       	ldi	r26, 0x48	; 72
    25ce:	b2 e4       	ldi	r27, 0x42	; 66
    25d0:	8b 87       	std	Y+11, r24	; 0x0b
    25d2:	9c 87       	std	Y+12, r25	; 0x0c
    25d4:	ad 87       	std	Y+13, r26	; 0x0d
    25d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25da:	7c 85       	ldd	r23, Y+12	; 0x0c
    25dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    25de:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	4a e7       	ldi	r20, 0x7A	; 122
    25e6:	55 e4       	ldi	r21, 0x45	; 69
    25e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	8f 83       	std	Y+7, r24	; 0x07
    25f2:	98 87       	std	Y+8, r25	; 0x08
    25f4:	a9 87       	std	Y+9, r26	; 0x09
    25f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25f8:	6f 81       	ldd	r22, Y+7	; 0x07
    25fa:	78 85       	ldd	r23, Y+8	; 0x08
    25fc:	89 85       	ldd	r24, Y+9	; 0x09
    25fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e8       	ldi	r20, 0x80	; 128
    2606:	5f e3       	ldi	r21, 0x3F	; 63
    2608:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    260c:	88 23       	and	r24, r24
    260e:	2c f4       	brge	.+10     	; 0x261a <main+0x3ec>
		__ticks = 1;
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	9e 83       	std	Y+6, r25	; 0x06
    2616:	8d 83       	std	Y+5, r24	; 0x05
    2618:	3f c0       	rjmp	.+126    	; 0x2698 <main+0x46a>
	else if (__tmp > 65535)
    261a:	6f 81       	ldd	r22, Y+7	; 0x07
    261c:	78 85       	ldd	r23, Y+8	; 0x08
    261e:	89 85       	ldd	r24, Y+9	; 0x09
    2620:	9a 85       	ldd	r25, Y+10	; 0x0a
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	3f ef       	ldi	r19, 0xFF	; 255
    2626:	4f e7       	ldi	r20, 0x7F	; 127
    2628:	57 e4       	ldi	r21, 0x47	; 71
    262a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    262e:	18 16       	cp	r1, r24
    2630:	4c f5       	brge	.+82     	; 0x2684 <main+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2632:	6b 85       	ldd	r22, Y+11	; 0x0b
    2634:	7c 85       	ldd	r23, Y+12	; 0x0c
    2636:	8d 85       	ldd	r24, Y+13	; 0x0d
    2638:	9e 85       	ldd	r25, Y+14	; 0x0e
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e2       	ldi	r20, 0x20	; 32
    2640:	51 e4       	ldi	r21, 0x41	; 65
    2642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	bc 01       	movw	r22, r24
    264c:	cd 01       	movw	r24, r26
    264e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	9e 83       	std	Y+6, r25	; 0x06
    2658:	8d 83       	std	Y+5, r24	; 0x05
    265a:	0f c0       	rjmp	.+30     	; 0x267a <main+0x44c>
    265c:	80 e9       	ldi	r24, 0x90	; 144
    265e:	91 e0       	ldi	r25, 0x01	; 1
    2660:	9c 83       	std	Y+4, r25	; 0x04
    2662:	8b 83       	std	Y+3, r24	; 0x03
    2664:	8b 81       	ldd	r24, Y+3	; 0x03
    2666:	9c 81       	ldd	r25, Y+4	; 0x04
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	f1 f7       	brne	.-4      	; 0x2668 <main+0x43a>
    266c:	9c 83       	std	Y+4, r25	; 0x04
    266e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2670:	8d 81       	ldd	r24, Y+5	; 0x05
    2672:	9e 81       	ldd	r25, Y+6	; 0x06
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	9e 83       	std	Y+6, r25	; 0x06
    2678:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    267a:	8d 81       	ldd	r24, Y+5	; 0x05
    267c:	9e 81       	ldd	r25, Y+6	; 0x06
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	69 f7       	brne	.-38     	; 0x265c <main+0x42e>
    2682:	3c ce       	rjmp	.-904    	; 0x22fc <main+0xce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2684:	6f 81       	ldd	r22, Y+7	; 0x07
    2686:	78 85       	ldd	r23, Y+8	; 0x08
    2688:	89 85       	ldd	r24, Y+9	; 0x09
    268a:	9a 85       	ldd	r25, Y+10	; 0x0a
    268c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	9e 83       	std	Y+6, r25	; 0x06
    2696:	8d 83       	std	Y+5, r24	; 0x05
    2698:	8d 81       	ldd	r24, Y+5	; 0x05
    269a:	9e 81       	ldd	r25, Y+6	; 0x06
    269c:	9a 83       	std	Y+2, r25	; 0x02
    269e:	89 83       	std	Y+1, r24	; 0x01
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	9a 81       	ldd	r25, Y+2	; 0x02
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <main+0x476>
    26a8:	9a 83       	std	Y+2, r25	; 0x02
    26aa:	89 83       	std	Y+1, r24	; 0x01
    26ac:	27 ce       	rjmp	.-946    	; 0x22fc <main+0xce>

000026ae <__udivmodsi4>:
    26ae:	a1 e2       	ldi	r26, 0x21	; 33
    26b0:	1a 2e       	mov	r1, r26
    26b2:	aa 1b       	sub	r26, r26
    26b4:	bb 1b       	sub	r27, r27
    26b6:	fd 01       	movw	r30, r26
    26b8:	0d c0       	rjmp	.+26     	; 0x26d4 <__udivmodsi4_ep>

000026ba <__udivmodsi4_loop>:
    26ba:	aa 1f       	adc	r26, r26
    26bc:	bb 1f       	adc	r27, r27
    26be:	ee 1f       	adc	r30, r30
    26c0:	ff 1f       	adc	r31, r31
    26c2:	a2 17       	cp	r26, r18
    26c4:	b3 07       	cpc	r27, r19
    26c6:	e4 07       	cpc	r30, r20
    26c8:	f5 07       	cpc	r31, r21
    26ca:	20 f0       	brcs	.+8      	; 0x26d4 <__udivmodsi4_ep>
    26cc:	a2 1b       	sub	r26, r18
    26ce:	b3 0b       	sbc	r27, r19
    26d0:	e4 0b       	sbc	r30, r20
    26d2:	f5 0b       	sbc	r31, r21

000026d4 <__udivmodsi4_ep>:
    26d4:	66 1f       	adc	r22, r22
    26d6:	77 1f       	adc	r23, r23
    26d8:	88 1f       	adc	r24, r24
    26da:	99 1f       	adc	r25, r25
    26dc:	1a 94       	dec	r1
    26de:	69 f7       	brne	.-38     	; 0x26ba <__udivmodsi4_loop>
    26e0:	60 95       	com	r22
    26e2:	70 95       	com	r23
    26e4:	80 95       	com	r24
    26e6:	90 95       	com	r25
    26e8:	9b 01       	movw	r18, r22
    26ea:	ac 01       	movw	r20, r24
    26ec:	bd 01       	movw	r22, r26
    26ee:	cf 01       	movw	r24, r30
    26f0:	08 95       	ret

000026f2 <__prologue_saves__>:
    26f2:	2f 92       	push	r2
    26f4:	3f 92       	push	r3
    26f6:	4f 92       	push	r4
    26f8:	5f 92       	push	r5
    26fa:	6f 92       	push	r6
    26fc:	7f 92       	push	r7
    26fe:	8f 92       	push	r8
    2700:	9f 92       	push	r9
    2702:	af 92       	push	r10
    2704:	bf 92       	push	r11
    2706:	cf 92       	push	r12
    2708:	df 92       	push	r13
    270a:	ef 92       	push	r14
    270c:	ff 92       	push	r15
    270e:	0f 93       	push	r16
    2710:	1f 93       	push	r17
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
    271a:	ca 1b       	sub	r28, r26
    271c:	db 0b       	sbc	r29, r27
    271e:	0f b6       	in	r0, 0x3f	; 63
    2720:	f8 94       	cli
    2722:	de bf       	out	0x3e, r29	; 62
    2724:	0f be       	out	0x3f, r0	; 63
    2726:	cd bf       	out	0x3d, r28	; 61
    2728:	09 94       	ijmp

0000272a <__epilogue_restores__>:
    272a:	2a 88       	ldd	r2, Y+18	; 0x12
    272c:	39 88       	ldd	r3, Y+17	; 0x11
    272e:	48 88       	ldd	r4, Y+16	; 0x10
    2730:	5f 84       	ldd	r5, Y+15	; 0x0f
    2732:	6e 84       	ldd	r6, Y+14	; 0x0e
    2734:	7d 84       	ldd	r7, Y+13	; 0x0d
    2736:	8c 84       	ldd	r8, Y+12	; 0x0c
    2738:	9b 84       	ldd	r9, Y+11	; 0x0b
    273a:	aa 84       	ldd	r10, Y+10	; 0x0a
    273c:	b9 84       	ldd	r11, Y+9	; 0x09
    273e:	c8 84       	ldd	r12, Y+8	; 0x08
    2740:	df 80       	ldd	r13, Y+7	; 0x07
    2742:	ee 80       	ldd	r14, Y+6	; 0x06
    2744:	fd 80       	ldd	r15, Y+5	; 0x05
    2746:	0c 81       	ldd	r16, Y+4	; 0x04
    2748:	1b 81       	ldd	r17, Y+3	; 0x03
    274a:	aa 81       	ldd	r26, Y+2	; 0x02
    274c:	b9 81       	ldd	r27, Y+1	; 0x01
    274e:	ce 0f       	add	r28, r30
    2750:	d1 1d       	adc	r29, r1
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	de bf       	out	0x3e, r29	; 62
    2758:	0f be       	out	0x3f, r0	; 63
    275a:	cd bf       	out	0x3d, r28	; 61
    275c:	ed 01       	movw	r28, r26
    275e:	08 95       	ret

00002760 <_exit>:
    2760:	f8 94       	cli

00002762 <__stop_program>:
    2762:	ff cf       	rjmp	.-2      	; 0x2762 <__stop_program>
